"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./components/Starfield.jsx":
/*!**********************************!*\
  !*** ./components/Starfield.jsx ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_EffectComposer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three/examples/jsm/postprocessing/EffectComposer */ \"./node_modules/three/examples/jsm/postprocessing/EffectComposer.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_UnrealBloomPass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three/examples/jsm/postprocessing/UnrealBloomPass */ \"./node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_RenderPass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three/examples/jsm/postprocessing/RenderPass */ \"./node_modules/three/examples/jsm/postprocessing/RenderPass.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_ShaderPass__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! three/examples/jsm/postprocessing/ShaderPass */ \"./node_modules/three/examples/jsm/postprocessing/ShaderPass.js\");\n/* harmony import */ var three_examples_jsm_shaders_FXAAShader__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! three/examples/jsm/shaders/FXAAShader */ \"./node_modules/three/examples/jsm/shaders/FXAAShader.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_FilmPass__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! three/examples/jsm/postprocessing/FilmPass */ \"./node_modules/three/examples/jsm/postprocessing/FilmPass.js\");\n/* harmony import */ var _ChromaticAberrationPass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ChromaticAberrationPass */ \"./components/ChromaticAberrationPass.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\nconst Starfield = ()=>{\n    _s();\n    const mountRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Defensive: always use .current for refs\n        if (!mountRef.current) return;\n        const mount = mountRef.current;\n        mount.style.position = \"fixed\";\n        mount.style.top = \"0\";\n        mount.style.left = \"0\";\n        mount.style.width = \"100%\";\n        mount.style.height = \"100%\";\n        mount.style.zIndex = \"0\";\n        // Scene & Renderer\n        const scene = new three__WEBPACK_IMPORTED_MODULE_3__.Scene();\n        const camera = new three__WEBPACK_IMPORTED_MODULE_3__.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 5000);\n        camera.position.set(0, 0, 0);\n        // Virtual position to simulate infinite travel\n        let virtualCameraPos = new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 0, 0);\n        const renderer = new three__WEBPACK_IMPORTED_MODULE_3__.WebGLRenderer({\n            antialias: false\n        }) // We'll use FXAA instead\n        ;\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setClearColor(0x000000, 1);\n        if (\"outputColorSpace\" in renderer) {\n            renderer.outputColorSpace = three__WEBPACK_IMPORTED_MODULE_3__.SRGBColorSpace;\n        }\n        // Create a render target for the composer with correct color space\n        const renderTarget = new three__WEBPACK_IMPORTED_MODULE_3__.WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n            colorSpace: three__WEBPACK_IMPORTED_MODULE_3__.SRGBColorSpace,\n            type: three__WEBPACK_IMPORTED_MODULE_3__.UnsignedByteType\n        });\n        renderer.toneMapping = three__WEBPACK_IMPORTED_MODULE_3__.NoToneMapping;\n        renderer.autoClear = true;\n        mount.appendChild(renderer.domElement);\n        // --- MAIN STARFIELD POST-PROCESSING ---\n        const composer = new three_examples_jsm_postprocessing_EffectComposer__WEBPACK_IMPORTED_MODULE_4__.EffectComposer(renderer, renderTarget);\n        composer.setSize(window.innerWidth, window.innerHeight);\n        const renderPass = new three_examples_jsm_postprocessing_RenderPass__WEBPACK_IMPORTED_MODULE_5__.RenderPass(scene, camera);\n        renderPass.clear = true;\n        composer.addPass(renderPass);\n        // UnrealBloomPass: \"crazy\" bloom\n        const bloomPass = new three_examples_jsm_postprocessing_UnrealBloomPass__WEBPACK_IMPORTED_MODULE_6__.UnrealBloomPass(new three__WEBPACK_IMPORTED_MODULE_3__.Vector2(window.innerWidth, window.innerHeight), 3.5, 1.6, 0.01 // threshold\n        );\n        composer.addPass(bloomPass);\n        // FXAA Pass\n        const fxaaPass = new three_examples_jsm_postprocessing_ShaderPass__WEBPACK_IMPORTED_MODULE_7__.ShaderPass(three_examples_jsm_shaders_FXAAShader__WEBPACK_IMPORTED_MODULE_8__.FXAAShader);\n        fxaaPass.material.uniforms[\"resolution\"].value.x = 1 / window.innerWidth;\n        fxaaPass.material.uniforms[\"resolution\"].value.y = 1 / window.innerHeight;\n        composer.addPass(fxaaPass);\n        // FilmPass\n        const filmPass = new three_examples_jsm_postprocessing_FilmPass__WEBPACK_IMPORTED_MODULE_9__.FilmPass(0.0, 0.0, 648, false // grayscale\n        );\n        composer.addPass(filmPass);\n        // --- SHOOTING STAR POST-PROCESSING ONLY ---\n        // Separate scene and composer for shooting stars\n        const shootingStarScene = new three__WEBPACK_IMPORTED_MODULE_3__.Scene();\n        const shootingStarComposer = new three_examples_jsm_postprocessing_EffectComposer__WEBPACK_IMPORTED_MODULE_4__.EffectComposer(renderer);\n        shootingStarComposer.setSize(window.innerWidth, window.innerHeight);\n        const shootingStarRenderPass = new three_examples_jsm_postprocessing_RenderPass__WEBPACK_IMPORTED_MODULE_5__.RenderPass(shootingStarScene, camera);\n        shootingStarComposer.addPass(shootingStarRenderPass);\n        // Intense bloom for shooting stars\n        const shootingStarBloomPass = new three_examples_jsm_postprocessing_UnrealBloomPass__WEBPACK_IMPORTED_MODULE_6__.UnrealBloomPass(new three__WEBPACK_IMPORTED_MODULE_3__.Vector2(window.innerWidth, window.innerHeight), 4.0, 2.0, 0.0 // all bright\n        );\n        shootingStarComposer.addPass(shootingStarBloomPass);\n        // --- CLOSE STARS: Separate Scene for Chromatic Aberration ---\n        const closeStarsScene = new three__WEBPACK_IMPORTED_MODULE_3__.Scene();\n        const caPass = new _ChromaticAberrationPass__WEBPACK_IMPORTED_MODULE_2__.ChromaticAberrationPass(new three__WEBPACK_IMPORTED_MODULE_3__.Vector2(0.0002, 0.0002)); // barely visible\n        const caComposer = new three_examples_jsm_postprocessing_EffectComposer__WEBPACK_IMPORTED_MODULE_4__.EffectComposer(renderer);\n        caComposer.setSize(window.innerWidth, window.innerHeight);\n        const caRenderPass = new three_examples_jsm_postprocessing_RenderPass__WEBPACK_IMPORTED_MODULE_5__.RenderPass(closeStarsScene, camera);\n        caComposer.addPass(caRenderPass);\n        caComposer.addPass(caPass);\n        // --- HANDLE RESIZE AND FULLSCREEN ---\n        function resizeAll() {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            // Main composer\n            composer.setSize(window.innerWidth, window.innerHeight);\n            // FXAA resolution\n            fxaaPass.material.uniforms[\"resolution\"].value.x = 1 / window.innerWidth;\n            fxaaPass.material.uniforms[\"resolution\"].value.y = 1 / window.innerHeight;\n            // Other composers\n            shootingStarComposer.setSize(window.innerWidth, window.innerHeight);\n            caComposer.setSize(window.innerWidth, window.innerHeight);\n        }\n        window.addEventListener(\"resize\", resizeAll);\n        window.addEventListener(\"fullscreenchange\", resizeAll);\n        // Starfield\n        const starCount = 5000;\n        const starMaxDistance = 2000;\n        const starSpeed = 1;\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_3__.BufferGeometry();\n        const closeGeometry = new three__WEBPACK_IMPORTED_MODULE_3__.BufferGeometry();\n        const positions = [];\n        const closePositions = [];\n        let starsPlaced = 0;\n        while(starsPlaced < starCount){\n            // With 1% chance, spawn a star cluster (10-30 stars)\n            if (Math.random() < 0.01 && starsPlaced < starCount - 10) {\n                const clusterTheta = Math.random() * 2 * Math.PI;\n                const clusterPhi = Math.acos(2 * Math.random() - 1);\n                const clusterR = Math.random() * starMaxDistance;\n                const clusterCenter = [\n                    clusterR * Math.sin(clusterPhi) * Math.cos(clusterTheta),\n                    clusterR * Math.sin(clusterPhi) * Math.sin(clusterTheta),\n                    clusterR * Math.cos(clusterPhi)\n                ];\n                const clusterSize = 10 + Math.floor(Math.random() * 20); // 10-30 stars\n                for(let c = 0; c < clusterSize && starsPlaced < starCount; c++){\n                    // Each star in cluster is within 30 units of center\n                    const offsetTheta = Math.random() * 2 * Math.PI;\n                    const offsetPhi = Math.acos(2 * Math.random() - 1);\n                    const offsetR = Math.random() * 30; // cluster radius\n                    positions.push(clusterCenter[0] + offsetR * Math.sin(offsetPhi) * Math.cos(offsetTheta), clusterCenter[1] + offsetR * Math.sin(offsetPhi) * Math.sin(offsetTheta), clusterCenter[2] + offsetR * Math.cos(offsetPhi));\n                    starsPlaced++;\n                }\n            } else {\n                // Normal single star\n                const theta = Math.random() * 2 * Math.PI;\n                const phi = Math.acos(2 * Math.random() - 1);\n                const r = Math.random() * starMaxDistance;\n                const x = r * Math.sin(phi) * Math.cos(theta);\n                const y = r * Math.sin(phi) * Math.sin(theta);\n                const z = r * Math.cos(phi);\n                positions.push(x, y, z);\n                // If close, also add to closePositions\n                if (r < 400) {\n                    closePositions.push(x, y, z);\n                }\n                starsPlaced++;\n            }\n        }\n        geometry.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_3__.Float32BufferAttribute(positions, 3));\n        if (closePositions.length > 0) {\n            closeGeometry.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_3__.Float32BufferAttribute(closePositions, 3));\n        }\n        // CRAZY BLOOM: All stars are extremely bright (color intensity >1)\n        const palette = [\n            [\n                1.0,\n                0.5,\n                0.5\n            ],\n            [\n                1.0,\n                0.75,\n                0.4\n            ],\n            [\n                1.0,\n                1.0,\n                0.9\n            ],\n            [\n                1.0,\n                1.0,\n                1.0\n            ],\n            [\n                0.4,\n                0.5,\n                1.0\n            ]\n        ];\n        const colors = [];\n        for(let i = 0; i < starCount; i++){\n            const c = palette[Math.floor(Math.random() * palette.length)];\n            colors.push(...c);\n        }\n        geometry.setAttribute(\"color\", new three__WEBPACK_IMPORTED_MODULE_3__.Float32BufferAttribute(colors, 3));\n        const originalColors = geometry.attributes.color.array.slice();\n        const timers = new Float32Array(starCount);\n        const sparkColors = new Float32Array(starCount * 3);\n        const sparkleDuration = 180;\n        // --- SQUARE STARS USING POINTS ---\n        const material = new three__WEBPACK_IMPORTED_MODULE_3__.PointsMaterial({\n            size: 10,\n            sizeAttenuation: false,\n            vertexColors: true\n        });\n        const stars = new three__WEBPACK_IMPORTED_MODULE_3__.Points(geometry, material);\n        scene.add(stars);\n        // Add glow sprites to each star and animate them based on distance\n        const glowMap = new three__WEBPACK_IMPORTED_MODULE_3__.TextureLoader().load(\"/glow.png\");\n        const glowSprites = [];\n        const glowMaterial = new three__WEBPACK_IMPORTED_MODULE_3__.SpriteMaterial({\n            map: glowMap,\n            color: 0xffffff,\n            opacity: 0.18,\n            blending: three__WEBPACK_IMPORTED_MODULE_3__.AdditiveBlending,\n            depthWrite: false,\n            transparent: true\n        });\n        for(let i = 0; i < starCount; i++){\n            const glow = new three__WEBPACK_IMPORTED_MODULE_3__.Sprite(glowMaterial.clone());\n            glow.position.set(positions[i * 3], positions[i * 3 + 1], positions[i * 3 + 2]);\n            glow.scale.set(10, 10, 1);\n            scene.add(glow);\n            glowSprites.push(glow);\n        }\n        // Add close stars to separate scene\n        let closeStars;\n        if (closePositions.length > 0) {\n            closeStars = new three__WEBPACK_IMPORTED_MODULE_3__.Points(closeGeometry, material.clone());\n            closeStarsScene.add(closeStars);\n        }\n        let targetY = 0;\n        const damping = 0.05;\n        const onScroll = ()=>{\n            const pct = window.scrollY / (document.body.scrollHeight - window.innerHeight);\n            targetY = pct * Math.PI * 2;\n        };\n        window.addEventListener(\"scroll\", onScroll);\n        // --- Shooting Stars ---\n        const tailLength = 32; // Increase for longer tails\n        const shootingStars = [];\n        let shootingStarCooldown = 0;\n        // Spawn a shooting star with a stunning glowing tail\n        function spawnShootingStar() {\n            // Pick a random direction on the sphere for the spawn location\n            const dir = new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1).normalize();\n            // Ensure shooting stars never spawn close to the camera (at least 70% of max distance)\n            const minDist = starMaxDistance * 0.7;\n            const maxDist = starMaxDistance * 1.0;\n            const dist = minDist + Math.random() * (maxDist - minDist);\n            const spawnPos = dir.clone().multiplyScalar(dist);\n            // Tangential velocity: perpendicular to dir\n            let tangent = new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1);\n            tangent = tangent.sub(tangent.clone().projectOnVector(dir)).normalize();\n            // Mix in a small radial component (inward or outward)\n            const tangentialSpeed = starSpeed * (2.5 + Math.random() * 2.5); // much faster\n            const radialSpeed = starSpeed * (Math.random() - 0.5) * 0.3; // more dramatic\n            const velocity = tangent.multiplyScalar(tangentialSpeed).add(dir.clone().multiplyScalar(radialSpeed));\n            // Stunning color gradient for the head\n            const vibrantColors = [\n                0xffe066,\n                0xff66cc,\n                0x66ccff,\n                0xffffff,\n                0x80ffea,\n                0xfff2cc,\n                0xffc080,\n                0x80c0ff,\n                0xff80b3\n            ];\n            const color = vibrantColors[Math.floor(Math.random() * vibrantColors.length)];\n            // Star brightness and size (always small and subtle)\n            const brightness = 2.5 + Math.random() * 1.5;\n            const geo = new three__WEBPACK_IMPORTED_MODULE_3__.SphereGeometry(0.7 + Math.random() * 0.5, 16, 16); // Small sphere\n            const mat = new three__WEBPACK_IMPORTED_MODULE_3__.MeshPhysicalMaterial({\n                color: color,\n                emissive: color,\n                emissiveIntensity: 14.0,\n                metalness: 0.7,\n                roughness: 0.3,\n                transmission: 0.7,\n                opacity: 0.98,\n                transparent: true,\n                clearcoat: 0.8,\n                clearcoatRoughness: 0.2\n            });\n            const star = new three__WEBPACK_IMPORTED_MODULE_3__.Mesh(geo, mat);\n            // Add a large, intense bloom sprite for extra bloom\n            const spriteMap = new three__WEBPACK_IMPORTED_MODULE_3__.TextureLoader().load(\"/glow.png\");\n            const spriteMaterial = new three__WEBPACK_IMPORTED_MODULE_3__.SpriteMaterial({\n                map: spriteMap,\n                color: 0xffffff,\n                opacity: 1.0,\n                blending: three__WEBPACK_IMPORTED_MODULE_3__.AdditiveBlending\n            });\n            const sprite = new three__WEBPACK_IMPORTED_MODULE_3__.Sprite(spriteMaterial);\n            sprite.scale.set(70, 70, 1); // Large for bloom\n            sprite.position.copy(star.position);\n            star.add(sprite);\n            // Add a colored sprite for color pop\n            const colorSpriteMaterial = new three__WEBPACK_IMPORTED_MODULE_3__.SpriteMaterial({\n                map: spriteMap,\n                color: color,\n                opacity: 0.6,\n                blending: three__WEBPACK_IMPORTED_MODULE_3__.AdditiveBlending\n            });\n            const colorSprite = new three__WEBPACK_IMPORTED_MODULE_3__.Sprite(colorSpriteMaterial);\n            colorSprite.scale.set(34, 34, 1);\n            colorSprite.position.copy(star.position);\n            star.add(colorSprite);\n            // Add to both main scene and shootingStarScene\n            scene.add(star);\n            shootingStarScene.add(star);\n            // Add dynamic spark burst at the head\n            const sparkCount = 18 + Math.floor(Math.random() * 8);\n            const sparkGroup = new three__WEBPACK_IMPORTED_MODULE_3__.Group();\n            for(let i = 0; i < sparkCount; i++){\n                const sparkMat = new three__WEBPACK_IMPORTED_MODULE_3__.MeshBasicMaterial({\n                    color: vibrantColors[Math.floor(Math.random() * vibrantColors.length)],\n                    transparent: true,\n                    opacity: 0.8\n                });\n                const sparkGeo = new three__WEBPACK_IMPORTED_MODULE_3__.SphereGeometry(0.07 + Math.random() * 0.06, 8, 8);\n                const spark = new three__WEBPACK_IMPORTED_MODULE_3__.Mesh(sparkGeo, sparkMat);\n                const angle = i / sparkCount * Math.PI * 2;\n                spark.position.set(Math.cos(angle) * 1.2, Math.sin(angle) * 1.2, Math.random() * 0.4 - 0.2);\n                sparkGroup.add(spark);\n            }\n            sparkGroup.name = \"sparkBurst\";\n            star.add(sparkGroup);\n            star.position.copy(spawnPos);\n            star.velocity = velocity;\n            star.normalizedLife = 0.0;\n            star.normalizedLifetime = 80 + Math.random() * 80; // Longer, more dramatic\n            star.age = 0;\n            // --- Stunning Meteor Tail (very long, multi-color, glowing, fading, and 3D curve) ---\n            const trailSegments = tailLength * 3;\n            const trailPoints = [];\n            for(let i = 0; i < trailSegments; i++){\n                // Add a 3D spiral/curve for more depth\n                const spiral = Math.sin(i * 0.25) * 8;\n                const curve = Math.cos(i * 0.15) * 4;\n                const pt = star.position.clone().add(new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(spiral, curve, -i * 3));\n                trailPoints.push(pt);\n            }\n            const tailGeo = new three__WEBPACK_IMPORTED_MODULE_3__.BufferGeometry().setFromPoints(trailPoints);\n            // Per-vertex color (multi-color rainbow gradient)\n            const tailColors = [];\n            for(let i = 0; i < trailSegments; i++){\n                // Alpha fades out along the tail\n                const alpha = (1 - i / (trailSegments - 1)) * 0.99;\n                // Rainbow gradient\n                const rainbow = [\n                    0xffe066,\n                    0xff66cc,\n                    0x66ccff,\n                    0xffffff,\n                    0x80ffea,\n                    0xfff2cc,\n                    0xffc080,\n                    0x80c0ff,\n                    0xff80b3\n                ];\n                const gradColor = rainbow[Math.floor(i / trailSegments * rainbow.length)];\n                tailColors.push((gradColor >> 16 & 255) / 255, (gradColor >> 8 & 255) / 255, (gradColor & 255) / 255, alpha);\n            }\n            tailGeo.setAttribute(\"color\", new three__WEBPACK_IMPORTED_MODULE_3__.Float32BufferAttribute(tailColors, 4));\n            // Additive blending for glow + BLOOMED TAIL\n            const tailMat = new three__WEBPACK_IMPORTED_MODULE_3__.LineBasicMaterial({\n                vertexColors: true,\n                transparent: true,\n                opacity: 1.0,\n                blending: three__WEBPACK_IMPORTED_MODULE_3__.AdditiveBlending\n            });\n            // --- TAILS ---\n            // 1. Crisp tail for main scene\n            const tailMatMain = new three__WEBPACK_IMPORTED_MODULE_3__.LineBasicMaterial({\n                vertexColors: true,\n                transparent: true,\n                opacity: 1.0,\n                blending: three__WEBPACK_IMPORTED_MODULE_3__.NormalBlending\n            });\n            const tailMain = new three__WEBPACK_IMPORTED_MODULE_3__.Line(tailGeo.clone(), tailMatMain);\n            tailMain.position.copy(star.position);\n            scene.add(tailMain);\n            // 2. Intense bloom tail for shootingStarScene\n            const tailMatBloom = new three__WEBPACK_IMPORTED_MODULE_3__.LineBasicMaterial({\n                vertexColors: true,\n                transparent: true,\n                opacity: 1.0,\n                blending: three__WEBPACK_IMPORTED_MODULE_3__.AdditiveBlending\n            });\n            const tailBloom = new three__WEBPACK_IMPORTED_MODULE_3__.Line(tailGeo, tailMatBloom);\n            tailBloom.position.copy(star.position);\n            // Add a bloom sprite to the tail's head for extra glow\n            const tailGlowMap = new three__WEBPACK_IMPORTED_MODULE_3__.TextureLoader().load(\"/glow.png\");\n            const tailGlowMat = new three__WEBPACK_IMPORTED_MODULE_3__.SpriteMaterial({\n                map: tailGlowMap,\n                color: 0xffffff,\n                opacity: 0.88,\n                blending: three__WEBPACK_IMPORTED_MODULE_3__.AdditiveBlending\n            });\n            const tailGlow = new three__WEBPACK_IMPORTED_MODULE_3__.Sprite(tailGlowMat);\n            tailGlow.scale.set(50, 50, 1); // Larger for more bloom\n            tailGlow.position.copy(star.position);\n            tailBloom.add(tailGlow);\n            shootingStarScene.add(tailBloom);\n            // Add star to both scenes\n            scene.add(star);\n            shootingStarScene.add(star);\n            shootingStars.push({\n                mesh: star,\n                tail: tailMain,\n                tailBloom,\n                velocity: star.velocity,\n                dir,\n                age: 0,\n                normalizedLifetime: star.normalizedLifetime,\n                trailPoints,\n                color,\n                brightness,\n                hasFragmented: false\n            });\n        }\n        // Create an animation ID reference for cleanup\n        let animationId;\n        const animate = ()=>{\n            // Store the animation ID for cleanup\n            animationId = requestAnimationFrame(animate);\n            // Update star positions relative to virtual camera\n            for(let i = 0; i < positions.length; i += 3){\n                geometry.attributes.position.array[i] = positions[i] - virtualCameraPos.x;\n                geometry.attributes.position.array[i + 1] = positions[i + 1] - virtualCameraPos.y;\n                geometry.attributes.position.array[i + 2] = positions[i + 2] - virtualCameraPos.z;\n            }\n            geometry.attributes.position.needsUpdate = true;\n            // Update glow sprite positions\n            for(let i = 0; i < glowSprites.length; i++){\n                const idx = i * 3;\n                glowSprites[i].position.set(positions[idx] - virtualCameraPos.x, positions[idx + 1] - virtualCameraPos.y, positions[idx + 2] - virtualCameraPos.z);\n            }\n            // --- POST-PROCESSING PIPELINE ---\n            // --- POST-PROCESSING PIPELINE ---\n            composer.render(); // Only RenderPass enabled for debugging\n            // (bloom, FXAA, FilmPass are NOT added)\n            // shootingStarComposer, caComposer remain disabled for now\n            camera.rotation.y += (targetY - camera.rotation.y) * damping;\n            // Move the virtual camera position in the direction the camera is facing\n            const forward = new three__WEBPACK_IMPORTED_MODULE_3__.Vector3();\n            camera.getWorldDirection(forward);\n            virtualCameraPos.add(forward.multiplyScalar(starSpeed));\n            // Intense color (oversaturated, brightened) -- must be inside the for loop over stars\n            const colorAttr = geometry.attributes.color;\n            for(let i = 0; i < positions.length; i += 3){\n                const origR = colorAttr.array[i];\n                const origG = colorAttr.array[i + 1];\n                const origB = colorAttr.array[i + 2];\n                const dist = Math.sqrt(Math.pow(positions[i] - virtualCameraPos.x, 2) + Math.pow(positions[i + 1] - virtualCameraPos.y, 2) + Math.pow(positions[i + 2] - virtualCameraPos.z, 2));\n                const intenseR = Math.min(origR * 2.5, 1.0), intenseG = Math.min(origG * 2.5, 1.0), intenseB = Math.min(origB * 2.5, 1.0);\n                // Fade factor: 0 = close, 1 = far\n                let fadeT = (dist - 200) / (starMaxDistance * 0.9 - 200);\n                fadeT = Math.max(0, Math.min(1, fadeT));\n                // Ease for smoothness\n                fadeT = Math.pow(fadeT, 1.5);\n                // Lerp between original and intense color\n                colorAttr.array[i] = origR * (1 - fadeT) + intenseR * fadeT;\n                colorAttr.array[i + 1] = origG * (1 - fadeT) + intenseG * fadeT;\n                colorAttr.array[i + 2] = origB * (1 - fadeT) + intenseB * fadeT;\n            }\n            colorAttr.needsUpdate = true;\n            // If you have glow logic per-star, move that inside the loop as well, or handle after\n            if (closeStars && closeGeometry && closePositions.length > 0) {\n                for(let i = 0; i < closePositions.length; i += 3){\n                    closeGeometry.attributes.position.array[i] = closePositions[i] - virtualCameraPos.x;\n                    closeGeometry.attributes.position.array[i + 1] = closePositions[i + 1] - virtualCameraPos.y;\n                    closeGeometry.attributes.position.array[i + 2] = closePositions[i + 2] - virtualCameraPos.z;\n                }\n                closeGeometry.attributes.position.needsUpdate = true;\n            }\n            geometry.attributes.position.needsUpdate = true;\n            // Update shooting star cooldown\n            if (shootingStarCooldown <= 0 && Math.random() < 0.02) {\n                spawnShootingStar();\n                shootingStarCooldown = 30 + Math.random() * 60;\n            } else if (shootingStarCooldown > 0) {\n                shootingStarCooldown--;\n            }\n            // --- Shooting star spawning ---\n            if (shootingStarCooldown <= 0 && Math.random() < 0.1) {\n                spawnShootingStar();\n                if (camera) {\n                    const shakeStrength = 0.06 + Math.random() * 0.04;\n                    camera.position.x += (Math.random() - 0.5) * shakeStrength;\n                    camera.position.y += (Math.random() - 0.5) * shakeStrength;\n                }\n                shootingStarCooldown = 10 + Math.random() * 10;\n            } else if (shootingStarCooldown > 0) {\n                shootingStarCooldown--;\n            }\n            // Animate and clean up shooting stars\n            for(let i = shootingStars.length - 1; i >= 0; i--){\n                const obj = shootingStars[i];\n                // Animate spark burst (fade and expand)\n                if (obj.mesh.children) {\n                    const sparks = obj.mesh.children.find((child)=>child.name === \"sparkBurst\");\n                    if (sparks) {\n                        for(let j = 0; j < sparks.children.length; j++){\n                            const spark = sparks.children[j];\n                            spark.material.opacity *= 0.96; // Fade\n                            spark.scale.multiplyScalar(1.03); // Expand\n                        }\n                    }\n                }\n                // Animate tail shimmer and color cycling\n                if (obj.tail && obj.trailPoints) {\n                    const time = performance.now() * 0.001;\n                    const tailGeo = obj.tail.geometry;\n                    const tailColors = tailGeo.getAttribute(\"color\");\n                    for(let k = 0; k < tailColors.count; k++){\n                        // Cycle hue\n                        let r = tailColors.getX(k), g = tailColors.getY(k), b = tailColors.getZ(k);\n                        // Convert to HSL\n                        const max = Math.max(r, g, b), min = Math.min(r, g, b);\n                        let h, s, l;\n                        l = (max + min) / 2;\n                        if (max === min) {\n                            h = s = 0;\n                        } else {\n                            const d = max - min;\n                            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n                            switch(max){\n                                case r:\n                                    h = (g - b) / d + (g < b ? 6 : 0);\n                                    break;\n                                case g:\n                                    h = (b - r) / d + 2;\n                                    break;\n                                case b:\n                                    h = (r - g) / d + 4;\n                                    break;\n                            }\n                            h /= 6;\n                        }\n                        h = (h + 0.25 * Math.sin(time + k * 0.2)) % 1.0; // Animate hue\n                        // Convert back to RGB\n                        let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                        let p = 2 * l - q;\n                        let tr = h + 1 / 3, tg = h, tb = h - 1 / 3;\n                        const hue2rgb = (p, q, t)=>{\n                            if (t < 0) t += 1;\n                            if (t > 1) t -= 1;\n                            if (t < 1 / 6) return p + (q - p) * 6 * t;\n                            if (t < 1 / 2) return q;\n                            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n                            return p;\n                        };\n                        tailColors.setX(k, hue2rgb(p, q, tr));\n                        tailColors.setY(k, hue2rgb(p, q, tg));\n                        tailColors.setZ(k, hue2rgb(p, q, tb));\n                        // Shimmer: modulate alpha\n                        tailColors.setW(k, tailColors.getW(k) * (0.97 + 0.03 * Math.sin(time * 8 + k)));\n                    }\n                    tailColors.needsUpdate = true;\n                }\n                // Straight-line trajectory\n                obj.mesh.position.add(obj.velocity);\n                obj.tail.position.copy(obj.mesh.position);\n                if (obj.tailBloom) obj.tailBloom.position.copy(obj.mesh.position);\n                // Animate tail (no lerp, just drag)\n                // COMPLETE MESS VERY HACKY FIX LATER OR DONT?????\n                obj.age++;\n                const normalizedLife = obj.age / obj.normalizedLifetime;\n                obj.trailPoints.unshift(obj.mesh.position.clone());\n                if (obj.trailPoints.length > tailLength * 3) obj.trailPoints.pop();\n                let tailGrow = Math.min(1, normalizedLife / 0.3);\n                let activeSegments = Math.floor(obj.trailPoints.length * tailGrow);\n                if (activeSegments < 2) activeSegments = 2;\n                const visibleTrail = obj.trailPoints.slice(0, activeSegments);\n                obj.tail.geometry.setFromPoints(visibleTrail);\n                if (obj.tailBloom) obj.tailBloom.geometry.setFromPoints(visibleTrail);\n                const tailColors = obj.tail.geometry.getAttribute(\"color\");\n                let tailColorsBloom = obj.tailBloom ? obj.tailBloom.geometry.getAttribute(\"color\") : null;\n                for(let j = 0; j < visibleTrail.length; j++){\n                    let alpha = (1 - j / (visibleTrail.length - 1)) * 0.95;\n                    alpha *= 0.92 + 0.08 * Math.sin(Date.now() * 0.015 + j * 0.5);\n                    let rainbow = [\n                        0xffc080,\n                        0xffe080,\n                        0xffff80,\n                        0x80ffe6,\n                        0x80c0ff,\n                        0xc080ff\n                    ];\n                    let gradColor = rainbow[j % rainbow.length];\n                    if (normalizedLife > 0.7) alpha *= Math.max(0, 1 - (normalizedLife - 0.7 - 0.2) / 0.3);\n                    tailColors.setXYZW(j, (gradColor >> 16 & 255) / 255, (gradColor >> 8 & 255) / 255, (gradColor & 255) / 255, alpha);\n                    if (tailColorsBloom) tailColorsBloom.setXYZW(j, (gradColor >> 16 & 255) / 255, (gradColor >> 8 & 255) / 255, (gradColor & 255) / 255, alpha);\n                }\n                tailColors.needsUpdate = true;\n                // Animate head\n                let headColor;\n                if (normalizedLife < 0.5) {\n                    headColor = new three__WEBPACK_IMPORTED_MODULE_3__.Color(obj.color).lerp(new three__WEBPACK_IMPORTED_MODULE_3__.Color(0xffc080), normalizedLife * 2);\n                } else {\n                    headColor = new three__WEBPACK_IMPORTED_MODULE_3__.Color(0xffc080).lerp(new three__WEBPACK_IMPORTED_MODULE_3__.Color(0xff4000), (normalizedLife - 0.5) * 2);\n                }\n                let flicker = 0.95 + 0.13 * Math.sin(Date.now() * 0.07 + Math.random() * 10);\n                headColor.multiplyScalar(flicker);\n                obj.mesh.material.color.copy(headColor);\n                let scale = 1 + 2.2 * Math.sin(Math.PI * normalizedLife);\n                let distToCam = obj.mesh.position.length();\n                let dofBlur = distToCam < starMaxDistance * 0.7 ? 0.7 : 1.0;\n                obj.mesh.scale.set(scale * dofBlur, scale * dofBlur, scale * dofBlur);\n                // Sparkle burst\n                if (normalizedLife >= 1 && !obj.hasFragmented) {\n                    // --- SPECTACULAR EXPLOSION (very rare) ---\n                    const spectacular = Math.random() < 0.02; // 2% chance\n                    const burstCount = spectacular ? 120 + Math.floor(Math.random() * 60) : 18 + Math.floor(Math.random() * 8);\n                    const palette = spectacular ? [\n                        0xffe066,\n                        0xff66cc,\n                        0x66ccff,\n                        0xffffff,\n                        0x80ffea,\n                        0xfff2cc,\n                        0xffc080,\n                        0x80c0ff,\n                        0xff80b3,\n                        0xff0000,\n                        0x00ff00,\n                        0x0000ff,\n                        0xffff00,\n                        0x00ffff,\n                        0xff00ff,\n                        0xff8800,\n                        0x00ff88,\n                        0x8800ff\n                    ] : [\n                        0xffffff,\n                        0xfff6c0,\n                        0xffe066,\n                        0xffc080,\n                        0x80c0ff\n                    ];\n                    for(let s = 0; s < burstCount; s++){\n                        const color = palette[Math.floor(Math.random() * palette.length)];\n                        const size = spectacular ? 1.2 + Math.random() * 2.2 : 0.7 + Math.random() * 0.8;\n                        const sparkleGeo = new three__WEBPACK_IMPORTED_MODULE_3__.SphereGeometry(size, 8, 8);\n                        const sparkleMat = new three__WEBPACK_IMPORTED_MODULE_3__.MeshBasicMaterial({\n                            color,\n                            transparent: true,\n                            opacity: spectacular ? 0.92 : 0.7,\n                            blending: three__WEBPACK_IMPORTED_MODULE_3__.AdditiveBlending\n                        });\n                        const sparkle = new three__WEBPACK_IMPORTED_MODULE_3__.Mesh(sparkleGeo, sparkleMat);\n                        sparkle.position.copy(obj.mesh.position);\n                        // Spectacular: huge, fast, random directions; normal: moderate\n                        const spd = spectacular ? 4 + Math.random() * 8 : 2 + Math.random() * 2;\n                        const sparkleVel = new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5).normalize().multiplyScalar(spd);\n                        sparkle.userData = {\n                            velocity: sparkleVel,\n                            age: 0,\n                            spectacular,\n                            maxAge: spectacular ? 80 + Math.random() * 40 : 40 + Math.random() * 20\n                        }; // <-- LONGER LIFE\n                        scene.add(sparkle);\n                        if (!window._sparkles) window._sparkles = [];\n                        window._sparkles.push(sparkle);\n                    }\n                    if (spectacular) {\n                        // Add a big flash\n                        const flashGeo = new three__WEBPACK_IMPORTED_MODULE_3__.SphereGeometry(6, 24, 24);\n                        const flashMat = new three__WEBPACK_IMPORTED_MODULE_3__.MeshBasicMaterial({\n                            color: 0xffffff,\n                            transparent: true,\n                            opacity: 0.8,\n                            blending: three__WEBPACK_IMPORTED_MODULE_3__.AdditiveBlending\n                        });\n                        const flash = new three__WEBPACK_IMPORTED_MODULE_3__.Mesh(flashGeo, flashMat);\n                        flash.position.copy(obj.mesh.position);\n                        scene.add(flash);\n                        if (!window._starFlashes) window._starFlashes = [];\n                        window._starFlashes.push({\n                            mesh: flash,\n                            age: 0\n                        });\n                    }\n                    // Fragmented trail logic (keep as before)\n                    const fragVel = obj.velocity.clone().applyAxisAngle(new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 1, 0), (Math.random() - 0.5) * 0.3);\n                    const fragStar = obj.mesh.clone();\n                    fragStar.position.copy(obj.mesh.position);\n                    fragStar.velocity = fragVel;\n                    fragStar.normalizedLife = normalizedLife;\n                    fragStar.normalizedLifetime = obj.normalizedLifetime * (0.5 + Math.random() * 0.5);\n                    fragStar.age = obj.age;\n                    fragStar.material = obj.mesh.material.clone();\n                    const fragTrailPoints = obj.trailPoints.slice();\n                    const fragTailGeo = new three__WEBPACK_IMPORTED_MODULE_3__.BufferGeometry().setFromPoints(fragTrailPoints);\n                    fragTailGeo.setAttribute(\"color\", obj.tail.geometry.getAttribute(\"color\").clone());\n                    const fragTailMat = obj.tail.material.clone();\n                    const fragTail = new three__WEBPACK_IMPORTED_MODULE_3__.Line(fragTailGeo, fragTailMat);\n                    fragTail.position.copy(fragStar.position);\n                    scene.add(fragStar);\n                    scene.add(fragTail);\n                    shootingStars.push({\n                        mesh: fragStar,\n                        tail: fragTail,\n                        velocity: fragStar.velocity,\n                        dir: obj.dir,\n                        age: fragStar.age,\n                        normalizedLifetime: fragStar.normalizedLifetime,\n                        trailPoints: fragTrailPoints,\n                        color: obj.color,\n                        brightness: obj.brightness,\n                        hasFragmented: true\n                    });\n                    obj.hasFragmented = true;\n                }\n                // Spark burst\n                if (!obj.hasSparked && normalizedLife > 0.95 && Math.random() < 0.1) {\n                    for(let s = 0; s < 8 + Math.floor(Math.random() * 8); s++){\n                        const sparkGeo = new three__WEBPACK_IMPORTED_MODULE_3__.SphereGeometry(0.5 + Math.random() * 0.5, 8, 8);\n                        const sparkMat = new three__WEBPACK_IMPORTED_MODULE_3__.MeshBasicMaterial({\n                            color: 0xfff6c0,\n                            transparent: true,\n                            opacity: 1,\n                            blending: three__WEBPACK_IMPORTED_MODULE_3__.AdditiveBlending\n                        });\n                        const spark = new three__WEBPACK_IMPORTED_MODULE_3__.Mesh(sparkGeo, sparkMat);\n                        spark.position.copy(obj.mesh.position);\n                        spark.sparkVel = new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5).normalize().multiplyScalar(0.5 + Math.random() * 1.2);\n                        spark.sparkLife = 12 + Math.random() * 10;\n                        spark.sparkAge = 0;\n                        scene.add(spark);\n                        if (!window._starSparks) window._starSparks = [];\n                        window._starSparks.push(spark);\n                    }\n                    obj.hasSparked = true;\n                }\n                // Flash\n                if (!obj.hasFlashed && normalizedLife > 0.98 && Math.random() < 0.2) {\n                    const flashGeo = new three__WEBPACK_IMPORTED_MODULE_3__.SphereGeometry(1, 16, 16);\n                    const flashMat = new three__WEBPACK_IMPORTED_MODULE_3__.MeshBasicMaterial({\n                        color: 0xffffee,\n                        transparent: true,\n                        opacity: 0.8,\n                        blending: three__WEBPACK_IMPORTED_MODULE_3__.AdditiveBlending\n                    });\n                    const flash = new three__WEBPACK_IMPORTED_MODULE_3__.Mesh(flashGeo, flashMat);\n                    flash.position.copy(obj.mesh.position);\n                    scene.add(flash);\n                    if (!window._starFlashes) window._starFlashes = [];\n                    window._starFlashes.push({\n                        mesh: flash,\n                        age: 0\n                    });\n                    obj.hasFlashed = true;\n                }\n                // Fade out as it gets far away\n                const dist = obj.mesh.position.distanceTo(camera.position);\n                const fadeStart = starMaxDistance * 0.5;\n                if (dist > fadeStart) {\n                    const fade = 1 - (dist - fadeStart) / (starMaxDistance - fadeStart);\n                    obj.mesh.material.opacity = Math.max(0, fade);\n                    obj.mesh.material.transparent = true;\n                    obj.tail.material.opacity = Math.max(0, fade * 0.8);\n                    obj.tail.material.transparent = true;\n                }\n                // Remove when out of bounds or fully faded or life ended\n                // Fade tail after explosion\n                if ((normalizedLife >= 1.0 || dist > starMaxDistance || obj.mesh.material.opacity <= 0.01) && !obj.tailFading) {\n                    scene.remove(obj.mesh);\n                    // Start tail fade-out ghost\n                    obj.tailFading = true;\n                    obj.tailFadeAge = 0;\n                    if (!window._fadingTails) window._fadingTails = [];\n                    window._fadingTails.push({\n                        tail: obj.tail,\n                        tailBloom: obj.tailBloom,\n                        age: 0\n                    });\n                    shootingStars.splice(i, 1);\n                }\n            }\n            // Animate sparks\n            if (window._starSparks) {\n                for(let i = window._starSparks.length - 1; i >= 0; i--){\n                    const spark = window._starSparks[i];\n                    spark.position.add(spark.sparkVel);\n                    spark.sparkAge++;\n                    spark.material.opacity *= 0.92;\n                    if (spark.sparkAge > spark.sparkLife) {\n                        scene.remove(spark);\n                        window._starSparks.splice(i, 1);\n                    }\n                }\n            }\n            // Animate explosion particles (sparkles)\n            if (window._sparkles) {\n                for(let i = window._sparkles.length - 1; i >= 0; i--){\n                    const sparkle = window._sparkles[i];\n                    sparkle.position.add(sparkle.userData.velocity);\n                    sparkle.userData.age++;\n                    sparkle.material.opacity *= 0.97;\n                    if (sparkle.userData.age > (sparkle.userData.maxAge || 40)) {\n                        scene.remove(sparkle);\n                        window._sparkles.splice(i, 1);\n                    }\n                }\n            }\n            // Animate fading tails (ghosts)\n            if (window._fadingTails) {\n                for(let i = window._fadingTails.length - 1; i >= 0; i--){\n                    const ghost = window._fadingTails[i];\n                    if (ghost.tail) {\n                        ghost.tail.material.opacity *= 0.92;\n                        if (ghost.tail.material.opacity < 0.01) {\n                            scene.remove(ghost.tail);\n                            window._fadingTails.splice(i, 1);\n                            continue;\n                        }\n                    }\n                    if (ghost.tailBloom) {\n                        ghost.tailBloom.material.opacity *= 0.92;\n                        if (ghost.tailBloom.material.opacity < 0.01) {\n                            shootingStarScene.remove(ghost.tailBloom);\n                            ghost.tailBloom = null;\n                        }\n                    }\n                    ghost.age++;\n                }\n            }\n            // Animate flashes\n            if (window._starFlashes) {\n                for(let i = window._starFlashes.length - 1; i >= 0; i--){\n                    const flash = window._starFlashes[i];\n                    flash.mesh.scale.multiplyScalar(1.15);\n                    flash.mesh.material.opacity *= 0.85;\n                    flash.age++;\n                    if (flash.age > 10) {\n                        scene.remove(flash.mesh);\n                        window._starFlashes.splice(i, 1);\n                    }\n                }\n            }\n            // --- Starfield logic ---\n            const sqDist = starMaxDistance * starMaxDistance;\n            for(let i = 0; i < positions.length; i += 3){\n                const dx = positions[i] - virtualCameraPos.x;\n                const dy = positions[i + 1] - virtualCameraPos.y;\n                const dz = positions[i + 2] - virtualCameraPos.z;\n                if (dx * dx + dy * dy + dz * dz > sqDist) {\n                    // Place in a thick spherical shell around the virtual camera, never too close\n                    const minRadius = starMaxDistance * 0.8;\n                    const maxRadius = starMaxDistance;\n                    const r = minRadius + Math.random() * (maxRadius - minRadius);\n                    const theta = Math.random() * 2 * Math.PI;\n                    const phi = Math.acos(2 * Math.random() - 1);\n                    positions[i] = virtualCameraPos.x + r * Math.sin(phi) * Math.cos(theta);\n                    positions[i + 1] = virtualCameraPos.y + r * Math.sin(phi) * Math.sin(theta);\n                    positions[i + 2] = virtualCameraPos.z + r * Math.cos(phi);\n                }\n            }\n            // geometry.attributes.position.needsUpdate = true; // Already set above\n            // Robust starfield color update to prevent stuck white dots\n            // This works NO TOUCHY\n            const colArr = geometry.attributes.color.array;\n            for(let i = 0; i < positions.length; i += 3){\n                const idx = i / 3;\n                const dx = positions[i] - virtualCameraPos.x;\n                const dy = positions[i + 1] - virtualCameraPos.y;\n                const dz = positions[i + 2] - virtualCameraPos.z;\n                const dist = Math.sqrt(dx * dx + dy * dy + dz * dz);\n                if (timers[idx] > 0) {\n                    timers[idx]--;\n                    if (timers[idx] === 0) {\n                        // Timer expired, restore color\n                        sparkColors[i] = originalColors[i];\n                        sparkColors[i + 1] = originalColors[i + 1];\n                        sparkColors[i + 2] = originalColors[i + 2];\n                        colArr[i] = originalColors[i];\n                        colArr[i + 1] = originalColors[i + 1];\n                        colArr[i + 2] = originalColors[i + 2];\n                    } else {\n                        colArr[i] = sparkColors[i];\n                        colArr[i + 1] = sparkColors[i + 1];\n                        colArr[i + 2] = sparkColors[i + 2];\n                    }\n                } else if (dist > starMaxDistance * 0.3 && Math.random() < 0.05) {\n                    timers[idx] = sparkleDuration;\n                    const c = palette[Math.floor(Math.random() * palette.length)];\n                    sparkColors[i] = c[0];\n                    sparkColors[i + 1] = c[1];\n                    sparkColors[i + 2] = c[2];\n                    colArr[i] = sparkColors[i];\n                    colArr[i + 1] = sparkColors[i + 1];\n                    colArr[i + 2] = sparkColors[i + 2];\n                } else {\n                    sparkColors[i] = originalColors[i];\n                    sparkColors[i + 1] = originalColors[i + 1];\n                    sparkColors[i + 2] = originalColors[i + 2];\n                    colArr[i] = originalColors[i];\n                    colArr[i + 1] = originalColors[i + 1];\n                    colArr[i + 2] = originalColors[i + 2];\n                }\n            }\n            geometry.attributes.color.needsUpdate = true;\n        };\n        // Start the animation loop\n        animate();\n        // Handle window resize\n        const onResize = ()=>{\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            shootingStarComposer.setSize(window.innerWidth, window.innerHeight);\n            caComposer.setSize(window.innerWidth, window.innerHeight);\n        };\n        // Add event listener for resize\n        window.addEventListener(\"resize\", onResize);\n        // Clean up function\n        return ()=>{\n            window.removeEventListener(\"resize\", onResize);\n            window.removeEventListener(\"resize\", resizeAll);\n            window.removeEventListener(\"fullscreenchange\", resizeAll);\n            window.removeEventListener(\"scroll\", onScroll);\n            // Cancel the animation frame using the stored ID\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            // Dispose composers\n            if (composer) composer.dispose();\n            if (shootingStarComposer) shootingStarComposer.dispose();\n            if (caComposer) caComposer.dispose();\n            // Clean up Three.js resources\n            if (renderer) {\n                renderer.dispose();\n                if (mount && mount.contains(renderer.domElement)) {\n                    mount.removeChild(renderer.domElement);\n                }\n            }\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: mountRef\n    }, void 0, false, {\n        fileName: \"/home/kayosdev/Websites/Portfolio/components/Starfield.jsx\",\n        lineNumber: 805,\n        columnNumber: 10\n    }, undefined);\n};\n_s(Starfield, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = Starfield;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Starfield);\nvar _c;\n$RefreshReg$(_c, \"Starfield\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U3RhcmZpZWxkLmpzeD9mMWEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB7IEVmZmVjdENvbXBvc2VyIH0gZnJvbSAndGhyZWUvZXhhbXBsZXMvanNtL3Bvc3Rwcm9jZXNzaW5nL0VmZmVjdENvbXBvc2VyJztcbmltcG9ydCB7IFVucmVhbEJsb29tUGFzcyB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9wb3N0cHJvY2Vzc2luZy9VbnJlYWxCbG9vbVBhc3MnO1xuaW1wb3J0IHsgUmVuZGVyUGFzcyB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9wb3N0cHJvY2Vzc2luZy9SZW5kZXJQYXNzJztcbmltcG9ydCB7IFNoYWRlclBhc3MgfSBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vcG9zdHByb2Nlc3NpbmcvU2hhZGVyUGFzcyc7XG5pbXBvcnQgeyBGWEFBU2hhZGVyIH0gZnJvbSAndGhyZWUvZXhhbXBsZXMvanNtL3NoYWRlcnMvRlhBQVNoYWRlcic7XG5pbXBvcnQgeyBGaWxtUGFzcyB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9wb3N0cHJvY2Vzc2luZy9GaWxtUGFzcyc7XG5pbXBvcnQgeyBDaHJvbWF0aWNBYmVycmF0aW9uUGFzcyB9IGZyb20gJy4vQ2hyb21hdGljQWJlcnJhdGlvblBhc3MnO1xuXG5jb25zdCBTdGFyZmllbGQgPSAoKSA9PiB7XG4gIGNvbnN0IG1vdW50UmVmID0gdXNlUmVmKG51bGwpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBEZWZlbnNpdmU6IGFsd2F5cyB1c2UgLmN1cnJlbnQgZm9yIHJlZnNcbiAgICBpZiAoIW1vdW50UmVmLmN1cnJlbnQpIHJldHVybjtcbiAgICBjb25zdCBtb3VudCA9IG1vdW50UmVmLmN1cnJlbnRcbiAgICBtb3VudC5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCdcbiAgICBtb3VudC5zdHlsZS50b3AgPSAnMCdcbiAgICBtb3VudC5zdHlsZS5sZWZ0ID0gJzAnXG4gICAgbW91bnQuc3R5bGUud2lkdGggPSAnMTAwJSdcbiAgICBtb3VudC5zdHlsZS5oZWlnaHQgPSAnMTAwJSdcbiAgICBtb3VudC5zdHlsZS56SW5kZXggPSAnMCdcblxuICAgIC8vIFNjZW5lICYgUmVuZGVyZXJcbiAgICBjb25zdCBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpXG4gICAgY29uc3QgY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDc1LCB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCwgMC4xLCA1MDAwKVxuICAgIGNhbWVyYS5wb3NpdGlvbi5zZXQoMCwgMCwgMCk7XG4gICAgLy8gVmlydHVhbCBwb3NpdGlvbiB0byBzaW11bGF0ZSBpbmZpbml0ZSB0cmF2ZWxcbiAgICBsZXQgdmlydHVhbENhbWVyYVBvcyA9IG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIDApO1xuICAgIGNvbnN0IHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoeyBhbnRpYWxpYXM6IGZhbHNlIH0pIC8vIFdlJ2xsIHVzZSBGWEFBIGluc3RlYWRcbiAgICByZW5kZXJlci5zZXRQaXhlbFJhdGlvKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKVxuICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodClcbiAgICByZW5kZXJlci5zZXRDbGVhckNvbG9yKDB4MDAwMDAwLCAxKTtcbiAgICBpZiAoJ291dHB1dENvbG9yU3BhY2UnIGluIHJlbmRlcmVyKSB7XG4gICAgICByZW5kZXJlci5vdXRwdXRDb2xvclNwYWNlID0gVEhSRUUuU1JHQkNvbG9yU3BhY2U7XG4gICAgfVxuICAgIC8vIENyZWF0ZSBhIHJlbmRlciB0YXJnZXQgZm9yIHRoZSBjb21wb3NlciB3aXRoIGNvcnJlY3QgY29sb3Igc3BhY2VcbiAgICBjb25zdCByZW5kZXJUYXJnZXQgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCwge1xuICAgICAgY29sb3JTcGFjZTogVEhSRUUuU1JHQkNvbG9yU3BhY2UsXG4gICAgICB0eXBlOiBUSFJFRS5VbnNpZ25lZEJ5dGVUeXBlXG4gICAgfSk7XG4gICAgcmVuZGVyZXIudG9uZU1hcHBpbmcgPSBUSFJFRS5Ob1RvbmVNYXBwaW5nO1xuICAgIHJlbmRlcmVyLmF1dG9DbGVhciA9IHRydWU7XG4gICAgbW91bnQuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudClcblxuICAgIC8vIC0tLSBNQUlOIFNUQVJGSUVMRCBQT1NULVBST0NFU1NJTkcgLS0tXG4gICAgY29uc3QgY29tcG9zZXIgPSBuZXcgRWZmZWN0Q29tcG9zZXIocmVuZGVyZXIsIHJlbmRlclRhcmdldCk7XG4gICAgY29tcG9zZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICBjb25zdCByZW5kZXJQYXNzID0gbmV3IFJlbmRlclBhc3Moc2NlbmUsIGNhbWVyYSk7XG4gICAgcmVuZGVyUGFzcy5jbGVhciA9IHRydWU7XG4gICAgY29tcG9zZXIuYWRkUGFzcyhyZW5kZXJQYXNzKTtcbiAgICAvLyBVbnJlYWxCbG9vbVBhc3M6IFwiY3JhenlcIiBibG9vbVxuICAgIGNvbnN0IGJsb29tUGFzcyA9IG5ldyBVbnJlYWxCbG9vbVBhc3MoXG4gICAgICBuZXcgVEhSRUUuVmVjdG9yMih3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KSxcbiAgICAgIDMuNSwgLy8gaW50ZW5zaXR5XG4gICAgICAxLjYsIC8vIHJhZGl1c1xuICAgICAgMC4wMSAvLyB0aHJlc2hvbGRcbiAgICApO1xuICAgIGNvbXBvc2VyLmFkZFBhc3MoYmxvb21QYXNzKTtcbiAgICAvLyBGWEFBIFBhc3NcbiAgICBjb25zdCBmeGFhUGFzcyA9IG5ldyBTaGFkZXJQYXNzKEZYQUFTaGFkZXIpO1xuICAgIGZ4YWFQYXNzLm1hdGVyaWFsLnVuaWZvcm1zWydyZXNvbHV0aW9uJ10udmFsdWUueCA9IDEgLyB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBmeGFhUGFzcy5tYXRlcmlhbC51bmlmb3Jtc1sncmVzb2x1dGlvbiddLnZhbHVlLnkgPSAxIC8gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIGNvbXBvc2VyLmFkZFBhc3MoZnhhYVBhc3MpO1xuICAgIC8vIEZpbG1QYXNzXG4gICAgY29uc3QgZmlsbVBhc3MgPSBuZXcgRmlsbVBhc3MoXG4gICAgICAwLjAsIC8vIG5vaXNlIGludGVuc2l0eSAod2FzIDAuNylcbiAgICAgIDAuMCwgLy8gc2NhbmxpbmUgaW50ZW5zaXR5ICh3YXMgMC4wOClcbiAgICAgIDY0OCwgLy8gc2NhbmxpbmUgY291bnRcbiAgICAgIGZhbHNlIC8vIGdyYXlzY2FsZVxuICAgICk7XG4gICAgY29tcG9zZXIuYWRkUGFzcyhmaWxtUGFzcyk7XG5cbiAgICBcbiAgICAvLyAtLS0gU0hPT1RJTkcgU1RBUiBQT1NULVBST0NFU1NJTkcgT05MWSAtLS1cbiAgICAvLyBTZXBhcmF0ZSBzY2VuZSBhbmQgY29tcG9zZXIgZm9yIHNob290aW5nIHN0YXJzXG4gICAgY29uc3Qgc2hvb3RpbmdTdGFyU2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcbiAgICBjb25zdCBzaG9vdGluZ1N0YXJDb21wb3NlciA9IG5ldyBFZmZlY3RDb21wb3NlcihyZW5kZXJlcik7XG4gICAgc2hvb3RpbmdTdGFyQ29tcG9zZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICBjb25zdCBzaG9vdGluZ1N0YXJSZW5kZXJQYXNzID0gbmV3IFJlbmRlclBhc3Moc2hvb3RpbmdTdGFyU2NlbmUsIGNhbWVyYSk7XG4gICAgc2hvb3RpbmdTdGFyQ29tcG9zZXIuYWRkUGFzcyhzaG9vdGluZ1N0YXJSZW5kZXJQYXNzKTtcbiAgICAvLyBJbnRlbnNlIGJsb29tIGZvciBzaG9vdGluZyBzdGFyc1xuICAgIGNvbnN0IHNob290aW5nU3RhckJsb29tUGFzcyA9IG5ldyBVbnJlYWxCbG9vbVBhc3MoXG4gICAgICBuZXcgVEhSRUUuVmVjdG9yMih3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KSxcbiAgICAgIDQuMCwgLy8gc3Ryb25nXG4gICAgICAyLjAsIC8vIHdpZGVcbiAgICAgIDAuMCAvLyBhbGwgYnJpZ2h0XG4gICAgKTtcbiAgICBzaG9vdGluZ1N0YXJDb21wb3Nlci5hZGRQYXNzKHNob290aW5nU3RhckJsb29tUGFzcyk7XG5cbiAgICAvLyAtLS0gQ0xPU0UgU1RBUlM6IFNlcGFyYXRlIFNjZW5lIGZvciBDaHJvbWF0aWMgQWJlcnJhdGlvbiAtLS1cbiAgICBjb25zdCBjbG9zZVN0YXJzU2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcbiAgICBjb25zdCBjYVBhc3MgPSBuZXcgQ2hyb21hdGljQWJlcnJhdGlvblBhc3MobmV3IFRIUkVFLlZlY3RvcjIoMC4wMDAyLCAwLjAwMDIpKTsgLy8gYmFyZWx5IHZpc2libGVcbiAgICBjb25zdCBjYUNvbXBvc2VyID0gbmV3IEVmZmVjdENvbXBvc2VyKHJlbmRlcmVyKTtcbiAgICBjYUNvbXBvc2VyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgY29uc3QgY2FSZW5kZXJQYXNzID0gbmV3IFJlbmRlclBhc3MoY2xvc2VTdGFyc1NjZW5lLCBjYW1lcmEpO1xuICAgIGNhQ29tcG9zZXIuYWRkUGFzcyhjYVJlbmRlclBhc3MpO1xuICAgIGNhQ29tcG9zZXIuYWRkUGFzcyhjYVBhc3MpO1xuXG4gICAgLy8gLS0tIEhBTkRMRSBSRVNJWkUgQU5EIEZVTExTQ1JFRU4gLS0tXG4gICAgZnVuY3Rpb24gcmVzaXplQWxsKCkge1xuICAgICAgY2FtZXJhLmFzcGVjdCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG5cbiAgICAgIC8vIE1haW4gY29tcG9zZXJcbiAgICAgIGNvbXBvc2VyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgICAvLyBGWEFBIHJlc29sdXRpb25cbiAgICAgIGZ4YWFQYXNzLm1hdGVyaWFsLnVuaWZvcm1zWydyZXNvbHV0aW9uJ10udmFsdWUueCA9IDEgLyB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIGZ4YWFQYXNzLm1hdGVyaWFsLnVuaWZvcm1zWydyZXNvbHV0aW9uJ10udmFsdWUueSA9IDEgLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAvLyBPdGhlciBjb21wb3NlcnNcbiAgICAgIHNob290aW5nU3RhckNvbXBvc2VyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgICBjYUNvbXBvc2VyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgfVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVBbGwpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdmdWxsc2NyZWVuY2hhbmdlJywgcmVzaXplQWxsKTtcblxuICAgIC8vIFN0YXJmaWVsZFxuICAgIGNvbnN0IHN0YXJDb3VudCA9IDUwMDBcbiAgICBjb25zdCBzdGFyTWF4RGlzdGFuY2UgPSAyMDAwXG4gICAgY29uc3Qgc3RhclNwZWVkID0gMVxuICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KClcbiAgICBjb25zdCBjbG9zZUdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XG4gICAgY29uc3QgcG9zaXRpb25zID0gW107XG4gICAgY29uc3QgY2xvc2VQb3NpdGlvbnMgPSBbXTtcbiAgICBsZXQgc3RhcnNQbGFjZWQgPSAwO1xuICAgIHdoaWxlIChzdGFyc1BsYWNlZCA8IHN0YXJDb3VudCkge1xuICAgICAgLy8gV2l0aCAxJSBjaGFuY2UsIHNwYXduIGEgc3RhciBjbHVzdGVyICgxMC0zMCBzdGFycylcbiAgICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgMC4wMSAmJiBzdGFyc1BsYWNlZCA8IHN0YXJDb3VudCAtIDEwKSB7XG4gICAgICAgIGNvbnN0IGNsdXN0ZXJUaGV0YSA9IE1hdGgucmFuZG9tKCkgKiAyICogTWF0aC5QSTtcbiAgICAgICAgY29uc3QgY2x1c3RlclBoaSA9IE1hdGguYWNvcygyICogTWF0aC5yYW5kb20oKSAtIDEpO1xuICAgICAgICBjb25zdCBjbHVzdGVyUiA9IE1hdGgucmFuZG9tKCkgKiBzdGFyTWF4RGlzdGFuY2U7XG4gICAgICAgIGNvbnN0IGNsdXN0ZXJDZW50ZXIgPSBbXG4gICAgICAgICAgY2x1c3RlclIgKiBNYXRoLnNpbihjbHVzdGVyUGhpKSAqIE1hdGguY29zKGNsdXN0ZXJUaGV0YSksXG4gICAgICAgICAgY2x1c3RlclIgKiBNYXRoLnNpbihjbHVzdGVyUGhpKSAqIE1hdGguc2luKGNsdXN0ZXJUaGV0YSksXG4gICAgICAgICAgY2x1c3RlclIgKiBNYXRoLmNvcyhjbHVzdGVyUGhpKVxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBjbHVzdGVyU2l6ZSA9IDEwICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjApOyAvLyAxMC0zMCBzdGFyc1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IGNsdXN0ZXJTaXplICYmIHN0YXJzUGxhY2VkIDwgc3RhckNvdW50OyBjKyspIHtcbiAgICAgICAgICAvLyBFYWNoIHN0YXIgaW4gY2x1c3RlciBpcyB3aXRoaW4gMzAgdW5pdHMgb2YgY2VudGVyXG4gICAgICAgICAgY29uc3Qgb2Zmc2V0VGhldGEgPSBNYXRoLnJhbmRvbSgpICogMiAqIE1hdGguUEk7XG4gICAgICAgICAgY29uc3Qgb2Zmc2V0UGhpID0gTWF0aC5hY29zKDIgKiBNYXRoLnJhbmRvbSgpIC0gMSk7XG4gICAgICAgICAgY29uc3Qgb2Zmc2V0UiA9IE1hdGgucmFuZG9tKCkgKiAzMDsgLy8gY2x1c3RlciByYWRpdXNcbiAgICAgICAgICBwb3NpdGlvbnMucHVzaChcbiAgICAgICAgICAgIGNsdXN0ZXJDZW50ZXJbMF0gKyBvZmZzZXRSICogTWF0aC5zaW4ob2Zmc2V0UGhpKSAqIE1hdGguY29zKG9mZnNldFRoZXRhKSxcbiAgICAgICAgICAgIGNsdXN0ZXJDZW50ZXJbMV0gKyBvZmZzZXRSICogTWF0aC5zaW4ob2Zmc2V0UGhpKSAqIE1hdGguc2luKG9mZnNldFRoZXRhKSxcbiAgICAgICAgICAgIGNsdXN0ZXJDZW50ZXJbMl0gKyBvZmZzZXRSICogTWF0aC5jb3Mob2Zmc2V0UGhpKVxuICAgICAgICAgICk7XG4gICAgICAgICAgc3RhcnNQbGFjZWQrKztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTm9ybWFsIHNpbmdsZSBzdGFyXG4gICAgICAgIGNvbnN0IHRoZXRhID0gTWF0aC5yYW5kb20oKSAqIDIgKiBNYXRoLlBJO1xuICAgICAgICBjb25zdCBwaGkgPSBNYXRoLmFjb3MoMiAqIE1hdGgucmFuZG9tKCkgLSAxKTtcbiAgICAgICAgY29uc3QgciA9IE1hdGgucmFuZG9tKCkgKiBzdGFyTWF4RGlzdGFuY2U7XG4gICAgICAgIGNvbnN0IHggPSByICogTWF0aC5zaW4ocGhpKSAqIE1hdGguY29zKHRoZXRhKTtcbiAgICAgICAgY29uc3QgeSA9IHIgKiBNYXRoLnNpbihwaGkpICogTWF0aC5zaW4odGhldGEpO1xuICAgICAgICBjb25zdCB6ID0gciAqIE1hdGguY29zKHBoaSk7XG4gICAgICAgIHBvc2l0aW9ucy5wdXNoKHgsIHksIHopO1xuICAgICAgICAvLyBJZiBjbG9zZSwgYWxzbyBhZGQgdG8gY2xvc2VQb3NpdGlvbnNcbiAgICAgICAgaWYgKHIgPCA0MDApIHtcbiAgICAgICAgICBjbG9zZVBvc2l0aW9ucy5wdXNoKHgsIHksIHopO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJzUGxhY2VkKys7XG4gICAgICB9XG4gICAgfVxuICAgIGdlb21ldHJ5LnNldEF0dHJpYnV0ZSgncG9zaXRpb24nLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZShwb3NpdGlvbnMsIDMpKVxuICAgIGlmIChjbG9zZVBvc2l0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICBjbG9zZUdlb21ldHJ5LnNldEF0dHJpYnV0ZSgncG9zaXRpb24nLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZShjbG9zZVBvc2l0aW9ucywgMykpO1xuICAgIH1cblxuICAgIC8vIENSQVpZIEJMT09NOiBBbGwgc3RhcnMgYXJlIGV4dHJlbWVseSBicmlnaHQgKGNvbG9yIGludGVuc2l0eSA+MSlcbiAgICBjb25zdCBwYWxldHRlID0gW1xuICAgICAgWzEuMCwgMC41LCAwLjVdLFxuICAgICAgWzEuMCwgMC43NSwgMC40XSxcbiAgICAgIFsxLjAsIDEuMCwgMC45XSxcbiAgICAgIFsxLjAsIDEuMCwgMS4wXSxcbiAgICAgIFswLjQsIDAuNSwgMS4wXSxcbiAgICBdO1xuICAgIGNvbnN0IGNvbG9ycyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhckNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IGMgPSBwYWxldHRlW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBhbGV0dGUubGVuZ3RoKV07XG4gICAgICBjb2xvcnMucHVzaCguLi5jKTtcbiAgICB9XG4gICAgZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCdjb2xvcicsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKGNvbG9ycywgMykpO1xuXG4gICAgY29uc3Qgb3JpZ2luYWxDb2xvcnMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yLmFycmF5LnNsaWNlKClcbiAgICBjb25zdCB0aW1lcnMgPSBuZXcgRmxvYXQzMkFycmF5KHN0YXJDb3VudClcbiAgICBjb25zdCBzcGFya0NvbG9ycyA9IG5ldyBGbG9hdDMyQXJyYXkoc3RhckNvdW50ICogMylcbiAgICBjb25zdCBzcGFya2xlRHVyYXRpb24gPSAxODBcblxuICAgIC8vIC0tLSBTUVVBUkUgU1RBUlMgVVNJTkcgUE9JTlRTIC0tLVxuY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuUG9pbnRzTWF0ZXJpYWwoeyBzaXplOiAxMCwgc2l6ZUF0dGVudWF0aW9uOiBmYWxzZSwgdmVydGV4Q29sb3JzOiB0cnVlIH0pO1xuY29uc3Qgc3RhcnMgPSBuZXcgVEhSRUUuUG9pbnRzKGdlb21ldHJ5LCBtYXRlcmlhbCk7XG5zY2VuZS5hZGQoc3RhcnMpO1xuLy8gQWRkIGdsb3cgc3ByaXRlcyB0byBlYWNoIHN0YXIgYW5kIGFuaW1hdGUgdGhlbSBiYXNlZCBvbiBkaXN0YW5jZVxuY29uc3QgZ2xvd01hcCA9IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCkubG9hZCgnL2dsb3cucG5nJyk7XG5jb25zdCBnbG93U3ByaXRlcyA9IFtdO1xuY29uc3QgZ2xvd01hdGVyaWFsID0gbmV3IFRIUkVFLlNwcml0ZU1hdGVyaWFsKHsgbWFwOiBnbG93TWFwLCBjb2xvcjogMHhmZmZmZmYsIG9wYWNpdHk6IDAuMTgsIGJsZW5kaW5nOiBUSFJFRS5BZGRpdGl2ZUJsZW5kaW5nLCBkZXB0aFdyaXRlOiBmYWxzZSwgdHJhbnNwYXJlbnQ6IHRydWUgfSk7XG5mb3IgKGxldCBpID0gMDsgaSA8IHN0YXJDb3VudDsgaSsrKSB7XG4gIGNvbnN0IGdsb3cgPSBuZXcgVEhSRUUuU3ByaXRlKGdsb3dNYXRlcmlhbC5jbG9uZSgpKTtcbiAgZ2xvdy5wb3NpdGlvbi5zZXQocG9zaXRpb25zW2kqM10sIHBvc2l0aW9uc1tpKjMrMV0sIHBvc2l0aW9uc1tpKjMrMl0pO1xuICBnbG93LnNjYWxlLnNldCgxMCwgMTAsIDEpO1xuICBzY2VuZS5hZGQoZ2xvdyk7XG4gIGdsb3dTcHJpdGVzLnB1c2goZ2xvdyk7XG59XG4vLyBBZGQgY2xvc2Ugc3RhcnMgdG8gc2VwYXJhdGUgc2NlbmVcbmxldCBjbG9zZVN0YXJzO1xuaWYgKGNsb3NlUG9zaXRpb25zLmxlbmd0aCA+IDApIHtcbiAgY2xvc2VTdGFycyA9IG5ldyBUSFJFRS5Qb2ludHMoY2xvc2VHZW9tZXRyeSwgbWF0ZXJpYWwuY2xvbmUoKSk7XG4gIGNsb3NlU3RhcnNTY2VuZS5hZGQoY2xvc2VTdGFycyk7XG59XG5cbiAgICBsZXQgdGFyZ2V0WSA9IDBcbiAgICBjb25zdCBkYW1waW5nID0gMC4wNVxuICAgIGNvbnN0IG9uU2Nyb2xsID0gKCkgPT4ge1xuICAgICAgY29uc3QgcGN0ID0gd2luZG93LnNjcm9sbFkgLyAoZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQgLSB3aW5kb3cuaW5uZXJIZWlnaHQpXG4gICAgICB0YXJnZXRZID0gcGN0ICogTWF0aC5QSSAqIDJcbiAgICB9XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uU2Nyb2xsKVxuXG5cbiAgICAvLyAtLS0gU2hvb3RpbmcgU3RhcnMgLS0tXG4gICAgY29uc3QgdGFpbExlbmd0aCA9IDMyOyAvLyBJbmNyZWFzZSBmb3IgbG9uZ2VyIHRhaWxzXG4gICAgY29uc3Qgc2hvb3RpbmdTdGFycyA9IFtdO1xuICAgIGxldCBzaG9vdGluZ1N0YXJDb29sZG93biA9IDA7XG4gICAgLy8gU3Bhd24gYSBzaG9vdGluZyBzdGFyIHdpdGggYSBzdHVubmluZyBnbG93aW5nIHRhaWxcbiAgICBmdW5jdGlvbiBzcGF3blNob290aW5nU3RhcigpIHtcbiAgICAgIC8vIFBpY2sgYSByYW5kb20gZGlyZWN0aW9uIG9uIHRoZSBzcGhlcmUgZm9yIHRoZSBzcGF3biBsb2NhdGlvblxuICAgICAgY29uc3QgZGlyID0gbmV3IFRIUkVFLlZlY3RvcjMoTWF0aC5yYW5kb20oKSoyLTEsIE1hdGgucmFuZG9tKCkqMi0xLCBNYXRoLnJhbmRvbSgpKjItMSkubm9ybWFsaXplKCk7XG4gICAgICAvLyBFbnN1cmUgc2hvb3Rpbmcgc3RhcnMgbmV2ZXIgc3Bhd24gY2xvc2UgdG8gdGhlIGNhbWVyYSAoYXQgbGVhc3QgNzAlIG9mIG1heCBkaXN0YW5jZSlcbiAgICAgIGNvbnN0IG1pbkRpc3QgPSBzdGFyTWF4RGlzdGFuY2UgKiAwLjc7XG4gICAgICBjb25zdCBtYXhEaXN0ID0gc3Rhck1heERpc3RhbmNlICogMS4wO1xuICAgICAgY29uc3QgZGlzdCA9IG1pbkRpc3QgKyBNYXRoLnJhbmRvbSgpICogKG1heERpc3QgLSBtaW5EaXN0KTtcbiAgICAgIGNvbnN0IHNwYXduUG9zID0gZGlyLmNsb25lKCkubXVsdGlwbHlTY2FsYXIoZGlzdCk7XG4gICAgICAvLyBUYW5nZW50aWFsIHZlbG9jaXR5OiBwZXJwZW5kaWN1bGFyIHRvIGRpclxuICAgICAgbGV0IHRhbmdlbnQgPSBuZXcgVEhSRUUuVmVjdG9yMyhNYXRoLnJhbmRvbSgpKjItMSwgTWF0aC5yYW5kb20oKSoyLTEsIE1hdGgucmFuZG9tKCkqMi0xKTtcbiAgICAgIHRhbmdlbnQgPSB0YW5nZW50LnN1Yih0YW5nZW50LmNsb25lKCkucHJvamVjdE9uVmVjdG9yKGRpcikpLm5vcm1hbGl6ZSgpO1xuICAgICAgLy8gTWl4IGluIGEgc21hbGwgcmFkaWFsIGNvbXBvbmVudCAoaW53YXJkIG9yIG91dHdhcmQpXG4gICAgICBjb25zdCB0YW5nZW50aWFsU3BlZWQgPSBzdGFyU3BlZWQgKiAoMi41ICsgTWF0aC5yYW5kb20oKSAqIDIuNSk7IC8vIG11Y2ggZmFzdGVyXG4gICAgICBjb25zdCByYWRpYWxTcGVlZCA9IHN0YXJTcGVlZCAqIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDAuMzsgLy8gbW9yZSBkcmFtYXRpY1xuICAgICAgY29uc3QgdmVsb2NpdHkgPSB0YW5nZW50Lm11bHRpcGx5U2NhbGFyKHRhbmdlbnRpYWxTcGVlZCkuYWRkKGRpci5jbG9uZSgpLm11bHRpcGx5U2NhbGFyKHJhZGlhbFNwZWVkKSk7XG5cbiAgICAgIC8vIFN0dW5uaW5nIGNvbG9yIGdyYWRpZW50IGZvciB0aGUgaGVhZFxuICAgICAgY29uc3QgdmlicmFudENvbG9ycyA9IFsweGZmZTA2NiwgMHhmZjY2Y2MsIDB4NjZjY2ZmLCAweGZmZmZmZiwgMHg4MGZmZWEsIDB4ZmZmMmNjLCAweGZmYzA4MCwgMHg4MGMwZmYsIDB4ZmY4MGIzXTtcbiAgICAgIGNvbnN0IGNvbG9yID0gdmlicmFudENvbG9yc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqdmlicmFudENvbG9ycy5sZW5ndGgpXTtcbiAgICAgIC8vIFN0YXIgYnJpZ2h0bmVzcyBhbmQgc2l6ZSAoYWx3YXlzIHNtYWxsIGFuZCBzdWJ0bGUpXG4gICAgICBjb25zdCBicmlnaHRuZXNzID0gMi41ICsgTWF0aC5yYW5kb20oKSoxLjU7XG4gICAgICBjb25zdCBnZW8gPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoMC43ICsgTWF0aC5yYW5kb20oKSowLjUsIDE2LCAxNik7IC8vIFNtYWxsIHNwaGVyZVxuICAgICAgY29uc3QgbWF0ID0gbmV3IFRIUkVFLk1lc2hQaHlzaWNhbE1hdGVyaWFsKHtcbiAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICBlbWlzc2l2ZTogY29sb3IsXG4gICAgICAgIGVtaXNzaXZlSW50ZW5zaXR5OiAxNC4wLCAvLyBJbnRlbnNlIGJsb29tXG4gICAgICAgIG1ldGFsbmVzczogMC43LFxuICAgICAgICByb3VnaG5lc3M6IDAuMyxcbiAgICAgICAgdHJhbnNtaXNzaW9uOiAwLjcsXG4gICAgICAgIG9wYWNpdHk6IDAuOTgsXG4gICAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgICAgICBjbGVhcmNvYXQ6IDAuOCxcbiAgICAgICAgY2xlYXJjb2F0Um91Z2huZXNzOiAwLjIsXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHN0YXIgPSBuZXcgVEhSRUUuTWVzaChnZW8sIG1hdCk7XG4gICAgICAvLyBBZGQgYSBsYXJnZSwgaW50ZW5zZSBibG9vbSBzcHJpdGUgZm9yIGV4dHJhIGJsb29tXG4gICAgICBjb25zdCBzcHJpdGVNYXAgPSBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlcigpLmxvYWQoJy9nbG93LnBuZycpO1xuICAgICAgY29uc3Qgc3ByaXRlTWF0ZXJpYWwgPSBuZXcgVEhSRUUuU3ByaXRlTWF0ZXJpYWwoeyBtYXA6IHNwcml0ZU1hcCwgY29sb3I6IDB4ZmZmZmZmLCBvcGFjaXR5OiAxLjAsIGJsZW5kaW5nOiBUSFJFRS5BZGRpdGl2ZUJsZW5kaW5nIH0pO1xuICAgICAgY29uc3Qgc3ByaXRlID0gbmV3IFRIUkVFLlNwcml0ZShzcHJpdGVNYXRlcmlhbCk7XG4gICAgICBzcHJpdGUuc2NhbGUuc2V0KDcwLCA3MCwgMSk7IC8vIExhcmdlIGZvciBibG9vbVxuICAgICAgc3ByaXRlLnBvc2l0aW9uLmNvcHkoc3Rhci5wb3NpdGlvbik7XG4gICAgICBzdGFyLmFkZChzcHJpdGUpO1xuICAgICAgLy8gQWRkIGEgY29sb3JlZCBzcHJpdGUgZm9yIGNvbG9yIHBvcFxuICAgICAgY29uc3QgY29sb3JTcHJpdGVNYXRlcmlhbCA9IG5ldyBUSFJFRS5TcHJpdGVNYXRlcmlhbCh7IG1hcDogc3ByaXRlTWFwLCBjb2xvcjogY29sb3IsIG9wYWNpdHk6IDAuNiwgYmxlbmRpbmc6IFRIUkVFLkFkZGl0aXZlQmxlbmRpbmcgfSk7XG4gICAgICBjb25zdCBjb2xvclNwcml0ZSA9IG5ldyBUSFJFRS5TcHJpdGUoY29sb3JTcHJpdGVNYXRlcmlhbCk7XG4gICAgICBjb2xvclNwcml0ZS5zY2FsZS5zZXQoMzQsIDM0LCAxKTtcbiAgICAgIGNvbG9yU3ByaXRlLnBvc2l0aW9uLmNvcHkoc3Rhci5wb3NpdGlvbik7XG4gICAgICBzdGFyLmFkZChjb2xvclNwcml0ZSk7XG4gICAgICAvLyBBZGQgdG8gYm90aCBtYWluIHNjZW5lIGFuZCBzaG9vdGluZ1N0YXJTY2VuZVxuICAgICAgc2NlbmUuYWRkKHN0YXIpO1xuICAgICAgc2hvb3RpbmdTdGFyU2NlbmUuYWRkKHN0YXIpO1xuICAgICAgLy8gQWRkIGR5bmFtaWMgc3BhcmsgYnVyc3QgYXQgdGhlIGhlYWRcbiAgICAgIGNvbnN0IHNwYXJrQ291bnQgPSAxOCArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSo4KTtcbiAgICAgIGNvbnN0IHNwYXJrR3JvdXAgPSBuZXcgVEhSRUUuR3JvdXAoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3BhcmtDb3VudDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHNwYXJrTWF0ID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHsgY29sb3I6IHZpYnJhbnRDb2xvcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKnZpYnJhbnRDb2xvcnMubGVuZ3RoKV0sIHRyYW5zcGFyZW50OiB0cnVlLCBvcGFjaXR5OiAwLjggfSk7XG4gICAgICAgIGNvbnN0IHNwYXJrR2VvID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDAuMDcgKyBNYXRoLnJhbmRvbSgpKjAuMDYsIDgsIDgpO1xuICAgICAgICBjb25zdCBzcGFyayA9IG5ldyBUSFJFRS5NZXNoKHNwYXJrR2VvLCBzcGFya01hdCk7XG4gICAgICAgIGNvbnN0IGFuZ2xlID0gKGkgLyBzcGFya0NvdW50KSAqIE1hdGguUEkgKiAyO1xuICAgICAgICBzcGFyay5wb3NpdGlvbi5zZXQoTWF0aC5jb3MoYW5nbGUpKjEuMiwgTWF0aC5zaW4oYW5nbGUpKjEuMiwgTWF0aC5yYW5kb20oKSowLjQtMC4yKTtcbiAgICAgICAgc3BhcmtHcm91cC5hZGQoc3BhcmspO1xuICAgICAgfVxuICAgICAgc3BhcmtHcm91cC5uYW1lID0gJ3NwYXJrQnVyc3QnO1xuICAgICAgc3Rhci5hZGQoc3BhcmtHcm91cCk7XG4gICAgICBzdGFyLnBvc2l0aW9uLmNvcHkoc3Bhd25Qb3MpO1xuICAgICAgc3Rhci52ZWxvY2l0eSA9IHZlbG9jaXR5O1xuICAgICAgc3Rhci5ub3JtYWxpemVkTGlmZSA9IDAuMDtcbiAgICAgIHN0YXIubm9ybWFsaXplZExpZmV0aW1lID0gODAgKyBNYXRoLnJhbmRvbSgpICogODA7IC8vIExvbmdlciwgbW9yZSBkcmFtYXRpY1xuICAgICAgc3Rhci5hZ2UgPSAwO1xuICAgICAgLy8gLS0tIFN0dW5uaW5nIE1ldGVvciBUYWlsICh2ZXJ5IGxvbmcsIG11bHRpLWNvbG9yLCBnbG93aW5nLCBmYWRpbmcsIGFuZCAzRCBjdXJ2ZSkgLS0tXG4gICAgICBjb25zdCB0cmFpbFNlZ21lbnRzID0gdGFpbExlbmd0aCAqIDM7IFxuICAgICAgY29uc3QgdHJhaWxQb2ludHMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhaWxTZWdtZW50czsgaSsrKSB7XG4gICAgICAgIC8vIEFkZCBhIDNEIHNwaXJhbC9jdXJ2ZSBmb3IgbW9yZSBkZXB0aFxuICAgICAgICBjb25zdCBzcGlyYWwgPSBNYXRoLnNpbihpICogMC4yNSkgKiA4O1xuICAgICAgICBjb25zdCBjdXJ2ZSA9IE1hdGguY29zKGkgKiAwLjE1KSAqIDQ7XG4gICAgICAgIGNvbnN0IHB0ID0gc3Rhci5wb3NpdGlvbi5jbG9uZSgpLmFkZChuZXcgVEhSRUUuVmVjdG9yMyhzcGlyYWwsIGN1cnZlLCAtaSAqIDMpKTtcbiAgICAgICAgdHJhaWxQb2ludHMucHVzaChwdCk7XG4gICAgICB9XG4gICAgICBjb25zdCB0YWlsR2VvID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCkuc2V0RnJvbVBvaW50cyh0cmFpbFBvaW50cyk7XG4gICAgICAvLyBQZXItdmVydGV4IGNvbG9yIChtdWx0aS1jb2xvciByYWluYm93IGdyYWRpZW50KVxuICAgICAgY29uc3QgdGFpbENvbG9ycyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmFpbFNlZ21lbnRzOyBpKyspIHtcbiAgICAgICAgLy8gQWxwaGEgZmFkZXMgb3V0IGFsb25nIHRoZSB0YWlsXG4gICAgICAgIGNvbnN0IGFscGhhID0gKDEgLSBpIC8gKHRyYWlsU2VnbWVudHMgLSAxKSkgKiAwLjk5O1xuICAgICAgICAvLyBSYWluYm93IGdyYWRpZW50XG4gICAgICAgIGNvbnN0IHJhaW5ib3cgPSBbMHhmZmUwNjYsIDB4ZmY2NmNjLCAweDY2Y2NmZiwgMHhmZmZmZmYsIDB4ODBmZmVhLCAweGZmZjJjYywgMHhmZmMwODAsIDB4ODBjMGZmLCAweGZmODBiM107XG4gICAgICAgIGNvbnN0IGdyYWRDb2xvciA9IHJhaW5ib3dbTWF0aC5mbG9vcigoaSAvIHRyYWlsU2VnbWVudHMpICogcmFpbmJvdy5sZW5ndGgpXTtcbiAgICAgICAgdGFpbENvbG9ycy5wdXNoKChncmFkQ29sb3IgPj4gMTYgJiAyNTUpIC8gMjU1LCAoZ3JhZENvbG9yID4+IDggJiAyNTUpIC8gMjU1LCAoZ3JhZENvbG9yICYgMjU1KSAvIDI1NSwgYWxwaGEpO1xuICAgICAgfVxuICAgICAgdGFpbEdlby5zZXRBdHRyaWJ1dGUoJ2NvbG9yJywgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodGFpbENvbG9ycywgNCkpO1xuICAgICAgLy8gQWRkaXRpdmUgYmxlbmRpbmcgZm9yIGdsb3cgKyBCTE9PTUVEIFRBSUxcbiAgICAgIGNvbnN0IHRhaWxNYXQgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoeyB2ZXJ0ZXhDb2xvcnM6IHRydWUsIHRyYW5zcGFyZW50OiB0cnVlLCBvcGFjaXR5OiAxLjAsIGJsZW5kaW5nOiBUSFJFRS5BZGRpdGl2ZUJsZW5kaW5nIH0pO1xuICAgICAgLy8gLS0tIFRBSUxTIC0tLVxuICAgICAgLy8gMS4gQ3Jpc3AgdGFpbCBmb3IgbWFpbiBzY2VuZVxuICAgICAgY29uc3QgdGFpbE1hdE1haW4gPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoeyB2ZXJ0ZXhDb2xvcnM6IHRydWUsIHRyYW5zcGFyZW50OiB0cnVlLCBvcGFjaXR5OiAxLjAsIGJsZW5kaW5nOiBUSFJFRS5Ob3JtYWxCbGVuZGluZyB9KTtcbiAgICAgIGNvbnN0IHRhaWxNYWluID0gbmV3IFRIUkVFLkxpbmUodGFpbEdlby5jbG9uZSgpLCB0YWlsTWF0TWFpbik7XG4gICAgICB0YWlsTWFpbi5wb3NpdGlvbi5jb3B5KHN0YXIucG9zaXRpb24pO1xuICAgICAgc2NlbmUuYWRkKHRhaWxNYWluKTtcbiAgICAgIC8vIDIuIEludGVuc2UgYmxvb20gdGFpbCBmb3Igc2hvb3RpbmdTdGFyU2NlbmVcbiAgICAgIGNvbnN0IHRhaWxNYXRCbG9vbSA9IG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7IHZlcnRleENvbG9yczogdHJ1ZSwgdHJhbnNwYXJlbnQ6IHRydWUsIG9wYWNpdHk6IDEuMCwgYmxlbmRpbmc6IFRIUkVFLkFkZGl0aXZlQmxlbmRpbmcgfSk7XG4gICAgICBjb25zdCB0YWlsQmxvb20gPSBuZXcgVEhSRUUuTGluZSh0YWlsR2VvLCB0YWlsTWF0Qmxvb20pO1xuICAgICAgdGFpbEJsb29tLnBvc2l0aW9uLmNvcHkoc3Rhci5wb3NpdGlvbik7XG4gICAgICAvLyBBZGQgYSBibG9vbSBzcHJpdGUgdG8gdGhlIHRhaWwncyBoZWFkIGZvciBleHRyYSBnbG93XG4gICAgICBjb25zdCB0YWlsR2xvd01hcCA9IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCkubG9hZCgnL2dsb3cucG5nJyk7XG4gICAgICBjb25zdCB0YWlsR2xvd01hdCA9IG5ldyBUSFJFRS5TcHJpdGVNYXRlcmlhbCh7IG1hcDogdGFpbEdsb3dNYXAsIGNvbG9yOiAweGZmZmZmZiwgb3BhY2l0eTogMC44OCwgYmxlbmRpbmc6IFRIUkVFLkFkZGl0aXZlQmxlbmRpbmcgfSk7XG4gICAgICBjb25zdCB0YWlsR2xvdyA9IG5ldyBUSFJFRS5TcHJpdGUodGFpbEdsb3dNYXQpO1xuICAgICAgdGFpbEdsb3cuc2NhbGUuc2V0KDUwLCA1MCwgMSk7IC8vIExhcmdlciBmb3IgbW9yZSBibG9vbVxuICAgICAgdGFpbEdsb3cucG9zaXRpb24uY29weShzdGFyLnBvc2l0aW9uKTtcbiAgICAgIHRhaWxCbG9vbS5hZGQodGFpbEdsb3cpO1xuICAgICAgc2hvb3RpbmdTdGFyU2NlbmUuYWRkKHRhaWxCbG9vbSk7XG4gICAgICAvLyBBZGQgc3RhciB0byBib3RoIHNjZW5lc1xuICAgICAgc2NlbmUuYWRkKHN0YXIpO1xuICAgICAgc2hvb3RpbmdTdGFyU2NlbmUuYWRkKHN0YXIpO1xuICAgICAgc2hvb3RpbmdTdGFycy5wdXNoKHsgbWVzaDogc3RhciwgdGFpbDogdGFpbE1haW4sIHRhaWxCbG9vbSwgdmVsb2NpdHk6IHN0YXIudmVsb2NpdHksIGRpciwgYWdlOiAwLCBub3JtYWxpemVkTGlmZXRpbWU6IHN0YXIubm9ybWFsaXplZExpZmV0aW1lLCB0cmFpbFBvaW50cywgY29sb3IsIGJyaWdodG5lc3MsIGhhc0ZyYWdtZW50ZWQ6IGZhbHNlIH0pO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBhbiBhbmltYXRpb24gSUQgcmVmZXJlbmNlIGZvciBjbGVhbnVwXG4gICAgbGV0IGFuaW1hdGlvbklkO1xuICAgIFxuICAgIGNvbnN0IGFuaW1hdGUgPSAoKSA9PiB7XG4gICAgICAvLyBTdG9yZSB0aGUgYW5pbWF0aW9uIElEIGZvciBjbGVhbnVwXG4gICAgICBhbmltYXRpb25JZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgICAgIFxuICAgICAgLy8gVXBkYXRlIHN0YXIgcG9zaXRpb25zIHJlbGF0aXZlIHRvIHZpcnR1YWwgY2FtZXJhXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc2l0aW9ucy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5W2ldID0gcG9zaXRpb25zW2ldIC0gdmlydHVhbENhbWVyYVBvcy54O1xuICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5W2krMV0gPSBwb3NpdGlvbnNbaSsxXSAtIHZpcnR1YWxDYW1lcmFQb3MueTtcbiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheVtpKzJdID0gcG9zaXRpb25zW2krMl0gLSB2aXJ0dWFsQ2FtZXJhUG9zLno7XG4gICAgICB9XG4gICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgIFxuICAgICAgLy8gVXBkYXRlIGdsb3cgc3ByaXRlIHBvc2l0aW9uc1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBnbG93U3ByaXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBpZHggPSBpICogMztcbiAgICAgICAgZ2xvd1Nwcml0ZXNbaV0ucG9zaXRpb24uc2V0KFxuICAgICAgICAgIHBvc2l0aW9uc1tpZHhdIC0gdmlydHVhbENhbWVyYVBvcy54LFxuICAgICAgICAgIHBvc2l0aW9uc1tpZHgrMV0gLSB2aXJ0dWFsQ2FtZXJhUG9zLnksXG4gICAgICAgICAgcG9zaXRpb25zW2lkeCsyXSAtIHZpcnR1YWxDYW1lcmFQb3MuelxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyAtLS0gUE9TVC1QUk9DRVNTSU5HIFBJUEVMSU5FIC0tLVxuICAgICAgLy8gLS0tIFBPU1QtUFJPQ0VTU0lORyBQSVBFTElORSAtLS1cbiAgICAgIGNvbXBvc2VyLnJlbmRlcigpOyAvLyBPbmx5IFJlbmRlclBhc3MgZW5hYmxlZCBmb3IgZGVidWdnaW5nXG4gICAgICAvLyAoYmxvb20sIEZYQUEsIEZpbG1QYXNzIGFyZSBOT1QgYWRkZWQpXG4gICAgICAvLyBzaG9vdGluZ1N0YXJDb21wb3NlciwgY2FDb21wb3NlciByZW1haW4gZGlzYWJsZWQgZm9yIG5vd1xuXG4gICAgICBjYW1lcmEucm90YXRpb24ueSArPSAodGFyZ2V0WSAtIGNhbWVyYS5yb3RhdGlvbi55KSAqIGRhbXBpbmc7XG4gICAgICAvLyBNb3ZlIHRoZSB2aXJ0dWFsIGNhbWVyYSBwb3NpdGlvbiBpbiB0aGUgZGlyZWN0aW9uIHRoZSBjYW1lcmEgaXMgZmFjaW5nXG4gICAgICBjb25zdCBmb3J3YXJkID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICAgIGNhbWVyYS5nZXRXb3JsZERpcmVjdGlvbihmb3J3YXJkKTtcbiAgICAgIHZpcnR1YWxDYW1lcmFQb3MuYWRkKGZvcndhcmQubXVsdGlwbHlTY2FsYXIoc3RhclNwZWVkKSk7XG5cbiAgICAgIC8vIEludGVuc2UgY29sb3IgKG92ZXJzYXR1cmF0ZWQsIGJyaWdodGVuZWQpIC0tIG11c3QgYmUgaW5zaWRlIHRoZSBmb3IgbG9vcCBvdmVyIHN0YXJzXG4gICAgICBjb25zdCBjb2xvckF0dHIgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgY29uc3Qgb3JpZ1IgPSBjb2xvckF0dHIuYXJyYXlbaV07XG4gICAgICAgIGNvbnN0IG9yaWdHID0gY29sb3JBdHRyLmFycmF5W2krMV07XG4gICAgICAgIGNvbnN0IG9yaWdCID0gY29sb3JBdHRyLmFycmF5W2krMl07XG4gICAgICAgIGNvbnN0IGRpc3QgPSBNYXRoLnNxcnQoXG4gICAgICAgICAgTWF0aC5wb3cocG9zaXRpb25zW2ldIC0gdmlydHVhbENhbWVyYVBvcy54LCAyKSArXG4gICAgICAgICAgTWF0aC5wb3cocG9zaXRpb25zW2krMV0gLSB2aXJ0dWFsQ2FtZXJhUG9zLnksIDIpICtcbiAgICAgICAgICBNYXRoLnBvdyhwb3NpdGlvbnNbaSsyXSAtIHZpcnR1YWxDYW1lcmFQb3MueiwgMilcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgaW50ZW5zZVIgPSBNYXRoLm1pbihvcmlnUiAqIDIuNSwgMS4wKSwgaW50ZW5zZUcgPSBNYXRoLm1pbihvcmlnRyAqIDIuNSwgMS4wKSwgaW50ZW5zZUIgPSBNYXRoLm1pbihvcmlnQiAqIDIuNSwgMS4wKTtcbiAgICAgICAgLy8gRmFkZSBmYWN0b3I6IDAgPSBjbG9zZSwgMSA9IGZhclxuICAgICAgICBsZXQgZmFkZVQgPSAoZGlzdCAtIDIwMCkgLyAoc3Rhck1heERpc3RhbmNlICogMC45IC0gMjAwKTtcbiAgICAgICAgZmFkZVQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBmYWRlVCkpO1xuICAgICAgICAvLyBFYXNlIGZvciBzbW9vdGhuZXNzXG4gICAgICAgIGZhZGVUID0gTWF0aC5wb3coZmFkZVQsIDEuNSk7XG4gICAgICAgIC8vIExlcnAgYmV0d2VlbiBvcmlnaW5hbCBhbmQgaW50ZW5zZSBjb2xvclxuICAgICAgICBjb2xvckF0dHIuYXJyYXlbaV0gPSBvcmlnUiAqICgxLWZhZGVUKSArIGludGVuc2VSICogZmFkZVQ7XG4gICAgICAgIGNvbG9yQXR0ci5hcnJheVtpKzFdID0gb3JpZ0cgKiAoMS1mYWRlVCkgKyBpbnRlbnNlRyAqIGZhZGVUO1xuICAgICAgICBjb2xvckF0dHIuYXJyYXlbaSsyXSA9IG9yaWdCICogKDEtZmFkZVQpICsgaW50ZW5zZUIgKiBmYWRlVDtcbiAgICAgIH1cbiAgICAgIGNvbG9yQXR0ci5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAvLyBJZiB5b3UgaGF2ZSBnbG93IGxvZ2ljIHBlci1zdGFyLCBtb3ZlIHRoYXQgaW5zaWRlIHRoZSBsb29wIGFzIHdlbGwsIG9yIGhhbmRsZSBhZnRlclxuXG4gICAgICBpZiAoY2xvc2VTdGFycyAmJiBjbG9zZUdlb21ldHJ5ICYmIGNsb3NlUG9zaXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbG9zZVBvc2l0aW9ucy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgIGNsb3NlR2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheVtpXSA9IGNsb3NlUG9zaXRpb25zW2ldIC0gdmlydHVhbENhbWVyYVBvcy54O1xuICAgICAgICAgIGNsb3NlR2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheVtpKzFdID0gY2xvc2VQb3NpdGlvbnNbaSsxXSAtIHZpcnR1YWxDYW1lcmFQb3MueTtcbiAgICAgICAgICBjbG9zZUdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXlbaSsyXSA9IGNsb3NlUG9zaXRpb25zW2krMl0gLSB2aXJ0dWFsQ2FtZXJhUG9zLno7XG4gICAgICAgIH1cbiAgICAgICAgY2xvc2VHZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgXG4gICAgICAvLyBVcGRhdGUgc2hvb3Rpbmcgc3RhciBjb29sZG93blxuICAgICAgaWYgKHNob290aW5nU3RhckNvb2xkb3duIDw9IDAgJiYgTWF0aC5yYW5kb20oKSA8IDAuMDIpIHtcbiAgICAgICAgc3Bhd25TaG9vdGluZ1N0YXIoKTtcbiAgICAgICAgc2hvb3RpbmdTdGFyQ29vbGRvd24gPSAzMCArIE1hdGgucmFuZG9tKCkgKiA2MDtcbiAgICAgIH0gZWxzZSBpZiAoc2hvb3RpbmdTdGFyQ29vbGRvd24gPiAwKSB7XG4gICAgICAgIHNob290aW5nU3RhckNvb2xkb3duLS07XG4gICAgICB9XG5cbiAgICAgIC8vIC0tLSBTaG9vdGluZyBzdGFyIHNwYXduaW5nIC0tLVxuICAgICAgaWYgKHNob290aW5nU3RhckNvb2xkb3duIDw9IDAgJiYgTWF0aC5yYW5kb20oKSA8IDAuMSkge1xuICAgICAgICBzcGF3blNob290aW5nU3RhcigpO1xuICAgICAgICBpZiAoY2FtZXJhKSB7XG4gICAgICAgICAgY29uc3Qgc2hha2VTdHJlbmd0aCA9IDAuMDYgKyBNYXRoLnJhbmRvbSgpKjAuMDQ7XG4gICAgICAgICAgY2FtZXJhLnBvc2l0aW9uLnggKz0gKE1hdGgucmFuZG9tKCktMC41KSpzaGFrZVN0cmVuZ3RoO1xuICAgICAgICAgIGNhbWVyYS5wb3NpdGlvbi55ICs9IChNYXRoLnJhbmRvbSgpLTAuNSkqc2hha2VTdHJlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBzaG9vdGluZ1N0YXJDb29sZG93biA9IDEwICsgTWF0aC5yYW5kb20oKSAqIDEwO1xuICAgICAgfSBlbHNlIGlmIChzaG9vdGluZ1N0YXJDb29sZG93biA+IDApIHtcbiAgICAgICAgc2hvb3RpbmdTdGFyQ29vbGRvd24tLTtcbiAgICAgIH1cbiAgICAgIC8vIEFuaW1hdGUgYW5kIGNsZWFuIHVwIHNob290aW5nIHN0YXJzXG4gICAgICBmb3IgKGxldCBpID0gc2hvb3RpbmdTdGFycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBjb25zdCBvYmogPSBzaG9vdGluZ1N0YXJzW2ldO1xuICAgICAgICAvLyBBbmltYXRlIHNwYXJrIGJ1cnN0IChmYWRlIGFuZCBleHBhbmQpXG4gICAgICAgIGlmIChvYmoubWVzaC5jaGlsZHJlbikge1xuICAgICAgICAgIGNvbnN0IHNwYXJrcyA9IG9iai5tZXNoLmNoaWxkcmVuLmZpbmQoY2hpbGQgPT4gY2hpbGQubmFtZSA9PT0gJ3NwYXJrQnVyc3QnKTtcbiAgICAgICAgICBpZiAoc3BhcmtzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNwYXJrcy5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICBjb25zdCBzcGFyayA9IHNwYXJrcy5jaGlsZHJlbltqXTtcbiAgICAgICAgICAgICAgc3BhcmsubWF0ZXJpYWwub3BhY2l0eSAqPSAwLjk2OyAvLyBGYWRlXG4gICAgICAgICAgICAgIHNwYXJrLnNjYWxlLm11bHRpcGx5U2NhbGFyKDEuMDMpOyAvLyBFeHBhbmRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQW5pbWF0ZSB0YWlsIHNoaW1tZXIgYW5kIGNvbG9yIGN5Y2xpbmdcbiAgICAgICAgaWYgKG9iai50YWlsICYmIG9iai50cmFpbFBvaW50cykge1xuICAgICAgICAgIGNvbnN0IHRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSAqIDAuMDAxO1xuICAgICAgICAgIGNvbnN0IHRhaWxHZW8gPSBvYmoudGFpbC5nZW9tZXRyeTtcbiAgICAgICAgICBjb25zdCB0YWlsQ29sb3JzID0gdGFpbEdlby5nZXRBdHRyaWJ1dGUoJ2NvbG9yJyk7XG4gICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCB0YWlsQ29sb3JzLmNvdW50OyBrKyspIHtcbiAgICAgICAgICAgIC8vIEN5Y2xlIGh1ZVxuICAgICAgICAgICAgbGV0IHIgPSB0YWlsQ29sb3JzLmdldFgoayksIGcgPSB0YWlsQ29sb3JzLmdldFkoayksIGIgPSB0YWlsQ29sb3JzLmdldFooayk7XG4gICAgICAgICAgICAvLyBDb252ZXJ0IHRvIEhTTFxuICAgICAgICAgICAgY29uc3QgbWF4ID0gTWF0aC5tYXgocixnLGIpLCBtaW4gPSBNYXRoLm1pbihyLGcsYik7XG4gICAgICAgICAgICBsZXQgaCxzLGw7XG4gICAgICAgICAgICBsID0gKG1heCttaW4pLzI7XG4gICAgICAgICAgICBpZiAobWF4ID09PSBtaW4pIHtoID0gcyA9IDA7fSBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc3QgZCA9IG1heC1taW47XG4gICAgICAgICAgICAgIHMgPSBsID4gMC41ID8gZC8oMi1tYXgtbWluKSA6IGQvKG1heCttaW4pO1xuICAgICAgICAgICAgICBzd2l0Y2gobWF4KXtcbiAgICAgICAgICAgICAgICBjYXNlIHI6IGggPSAoZy1iKS9kICsgKGc8Yj82OjApOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGc6IGggPSAoYi1yKS9kICsgMjsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBiOiBoID0gKHItZykvZCArIDQ7IGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGgvPTY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoID0gKGggKyAwLjI1Kk1hdGguc2luKHRpbWUgKyBrKjAuMikpICUgMS4wOyAvLyBBbmltYXRlIGh1ZVxuICAgICAgICAgICAgLy8gQ29udmVydCBiYWNrIHRvIFJHQlxuICAgICAgICAgICAgbGV0IHEgPSBsIDwgMC41ID8gbCooMStzKSA6IGwrcy1sKnM7XG4gICAgICAgICAgICBsZXQgcCA9IDIqbC1xO1xuICAgICAgICAgICAgbGV0IHRyID0gaCsxLzMsIHRnID0gaCwgdGIgPSBoLTEvMztcbiAgICAgICAgICAgIGNvbnN0IGh1ZTJyZ2IgPSAocCxxLHQpID0+IHtcbiAgICAgICAgICAgICAgaWYgKHQ8MCkgdCs9MTsgaWYgKHQ+MSkgdC09MTtcbiAgICAgICAgICAgICAgaWYgKHQ8MS82KSByZXR1cm4gcCsocS1wKSo2KnQ7XG4gICAgICAgICAgICAgIGlmICh0PDEvMikgcmV0dXJuIHE7XG4gICAgICAgICAgICAgIGlmICh0PDIvMykgcmV0dXJuIHArKHEtcCkqKDIvMy10KSo2O1xuICAgICAgICAgICAgICByZXR1cm4gcDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0YWlsQ29sb3JzLnNldFgoaywgaHVlMnJnYihwLHEsdHIpKTtcbiAgICAgICAgICAgIHRhaWxDb2xvcnMuc2V0WShrLCBodWUycmdiKHAscSx0ZykpO1xuICAgICAgICAgICAgdGFpbENvbG9ycy5zZXRaKGssIGh1ZTJyZ2IocCxxLHRiKSk7XG4gICAgICAgICAgICAvLyBTaGltbWVyOiBtb2R1bGF0ZSBhbHBoYVxuICAgICAgICAgICAgdGFpbENvbG9ycy5zZXRXKGssIHRhaWxDb2xvcnMuZ2V0VyhrKSAqICgwLjk3ICsgMC4wMypNYXRoLnNpbih0aW1lKjggKyBrKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0YWlsQ29sb3JzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdHJhaWdodC1saW5lIHRyYWplY3RvcnlcbiAgICAgICAgb2JqLm1lc2gucG9zaXRpb24uYWRkKG9iai52ZWxvY2l0eSk7XG4gICAgICAgIG9iai50YWlsLnBvc2l0aW9uLmNvcHkob2JqLm1lc2gucG9zaXRpb24pO1xuICAgICAgICBpZiAob2JqLnRhaWxCbG9vbSkgb2JqLnRhaWxCbG9vbS5wb3NpdGlvbi5jb3B5KG9iai5tZXNoLnBvc2l0aW9uKTtcbiAgICAgICAgLy8gQW5pbWF0ZSB0YWlsIChubyBsZXJwLCBqdXN0IGRyYWcpXG4gICAgICAgIC8vIENPTVBMRVRFIE1FU1MgVkVSWSBIQUNLWSBGSVggTEFURVIgT1IgRE9OVD8/Pz8/XG4gICAgICAgIG9iai5hZ2UrKztcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZExpZmUgPSBvYmouYWdlIC8gb2JqLm5vcm1hbGl6ZWRMaWZldGltZTtcbiAgICAgICAgb2JqLnRyYWlsUG9pbnRzLnVuc2hpZnQob2JqLm1lc2gucG9zaXRpb24uY2xvbmUoKSk7XG4gICAgICAgIGlmIChvYmoudHJhaWxQb2ludHMubGVuZ3RoID4gdGFpbExlbmd0aCAqIDMpIG9iai50cmFpbFBvaW50cy5wb3AoKTtcbiAgICAgICAgbGV0IHRhaWxHcm93ID0gTWF0aC5taW4oMSwgbm9ybWFsaXplZExpZmUgLyAwLjMpO1xuICAgICAgICBsZXQgYWN0aXZlU2VnbWVudHMgPSBNYXRoLmZsb29yKG9iai50cmFpbFBvaW50cy5sZW5ndGggKiB0YWlsR3Jvdyk7XG4gICAgICAgIGlmIChhY3RpdmVTZWdtZW50cyA8IDIpIGFjdGl2ZVNlZ21lbnRzID0gMjtcbiAgICAgICAgY29uc3QgdmlzaWJsZVRyYWlsID0gb2JqLnRyYWlsUG9pbnRzLnNsaWNlKDAsIGFjdGl2ZVNlZ21lbnRzKTtcbiAgICAgICAgb2JqLnRhaWwuZ2VvbWV0cnkuc2V0RnJvbVBvaW50cyh2aXNpYmxlVHJhaWwpO1xuICAgICAgICBpZiAob2JqLnRhaWxCbG9vbSkgb2JqLnRhaWxCbG9vbS5nZW9tZXRyeS5zZXRGcm9tUG9pbnRzKHZpc2libGVUcmFpbCk7XG4gICAgICAgIGNvbnN0IHRhaWxDb2xvcnMgPSBvYmoudGFpbC5nZW9tZXRyeS5nZXRBdHRyaWJ1dGUoJ2NvbG9yJyk7XG4gICAgICAgIGxldCB0YWlsQ29sb3JzQmxvb20gPSBvYmoudGFpbEJsb29tID8gb2JqLnRhaWxCbG9vbS5nZW9tZXRyeS5nZXRBdHRyaWJ1dGUoJ2NvbG9yJykgOiBudWxsO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZpc2libGVUcmFpbC5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGxldCBhbHBoYSA9ICgxIC0gaiAvICh2aXNpYmxlVHJhaWwubGVuZ3RoIC0gMSkpICogMC45NTtcbiAgICAgICAgICBhbHBoYSAqPSAwLjkyICsgMC4wOCAqIE1hdGguc2luKERhdGUubm93KCkqMC4wMTUgKyBqKjAuNSk7XG4gICAgICAgICAgbGV0IHJhaW5ib3cgPSBbMHhmZmMwODAsIDB4ZmZlMDgwLCAweGZmZmY4MCwgMHg4MGZmZTYsIDB4ODBjMGZmLCAweGMwODBmZl07XG4gICAgICAgICAgbGV0IGdyYWRDb2xvciA9IHJhaW5ib3dbaiAlIHJhaW5ib3cubGVuZ3RoXTtcbiAgICAgICAgICBpZiAobm9ybWFsaXplZExpZmUgPiAwLjcpIGFscGhhICo9IE1hdGgubWF4KDAsIDEgLSAobm9ybWFsaXplZExpZmUgLSAwLjcgLSAwLjIpIC8gMC4zKTtcbiAgICAgICAgICB0YWlsQ29sb3JzLnNldFhZWlcoaiwgKGdyYWRDb2xvciA+PiAxNiAmIDI1NSkgLyAyNTUsIChncmFkQ29sb3IgPj4gOCAmIDI1NSkgLyAyNTUsIChncmFkQ29sb3IgJiAyNTUpIC8gMjU1LCBhbHBoYSk7XG4gICAgICAgICAgaWYgKHRhaWxDb2xvcnNCbG9vbSkgdGFpbENvbG9yc0Jsb29tLnNldFhZWlcoaiwgKGdyYWRDb2xvciA+PiAxNiAmIDI1NSkgLyAyNTUsIChncmFkQ29sb3IgPj4gOCAmIDI1NSkgLyAyNTUsIChncmFkQ29sb3IgJiAyNTUpIC8gMjU1LCBhbHBoYSk7XG4gICAgICAgIH1cbiAgICAgICAgdGFpbENvbG9ycy5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIC8vIEFuaW1hdGUgaGVhZFxuICAgICAgICBsZXQgaGVhZENvbG9yO1xuICAgICAgICBpZiAobm9ybWFsaXplZExpZmUgPCAwLjUpIHtcbiAgICAgICAgICBoZWFkQ29sb3IgPSBuZXcgVEhSRUUuQ29sb3Iob2JqLmNvbG9yKS5sZXJwKG5ldyBUSFJFRS5Db2xvcigweGZmYzA4MCksIG5vcm1hbGl6ZWRMaWZlKjIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhlYWRDb2xvciA9IG5ldyBUSFJFRS5Db2xvcigweGZmYzA4MCkubGVycChuZXcgVEhSRUUuQ29sb3IoMHhmZjQwMDApLCAobm9ybWFsaXplZExpZmUtMC41KSoyKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZmxpY2tlciA9IDAuOTUgKyAwLjEzICogTWF0aC5zaW4oRGF0ZS5ub3coKSowLjA3ICsgTWF0aC5yYW5kb20oKSoxMCk7XG4gICAgICAgIGhlYWRDb2xvci5tdWx0aXBseVNjYWxhcihmbGlja2VyKTtcbiAgICAgICAgb2JqLm1lc2gubWF0ZXJpYWwuY29sb3IuY29weShoZWFkQ29sb3IpO1xuICAgICAgICBsZXQgc2NhbGUgPSAxICsgMi4yICogTWF0aC5zaW4oTWF0aC5QSSAqIG5vcm1hbGl6ZWRMaWZlKTtcbiAgICAgICAgbGV0IGRpc3RUb0NhbSA9IG9iai5tZXNoLnBvc2l0aW9uLmxlbmd0aCgpO1xuICAgICAgICBsZXQgZG9mQmx1ciA9IGRpc3RUb0NhbSA8IHN0YXJNYXhEaXN0YW5jZSAqIDAuNyA/IDAuNyA6IDEuMDtcbiAgICAgICAgb2JqLm1lc2guc2NhbGUuc2V0KHNjYWxlICogZG9mQmx1ciwgc2NhbGUgKiBkb2ZCbHVyLCBzY2FsZSAqIGRvZkJsdXIpO1xuICAgICAgICAvLyBTcGFya2xlIGJ1cnN0XG4gICAgICAgIGlmIChub3JtYWxpemVkTGlmZSA+PSAxICYmICFvYmouaGFzRnJhZ21lbnRlZCkge1xuICAgICAgICAgIC8vIC0tLSBTUEVDVEFDVUxBUiBFWFBMT1NJT04gKHZlcnkgcmFyZSkgLS0tXG4gICAgICAgICAgY29uc3Qgc3BlY3RhY3VsYXIgPSBNYXRoLnJhbmRvbSgpIDwgMC4wMjsgLy8gMiUgY2hhbmNlXG4gICAgICAgICAgY29uc3QgYnVyc3RDb3VudCA9IHNwZWN0YWN1bGFyID8gMTIwICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjYwKSA6IDE4ICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjgpO1xuICAgICAgICAgIGNvbnN0IHBhbGV0dGUgPSBzcGVjdGFjdWxhclxuICAgICAgICAgICAgPyBbMHhmZmUwNjYsIDB4ZmY2NmNjLCAweDY2Y2NmZiwgMHhmZmZmZmYsIDB4ODBmZmVhLCAweGZmZjJjYywgMHhmZmMwODAsIDB4ODBjMGZmLCAweGZmODBiMywgMHhmZjAwMDAsIDB4MDBmZjAwLCAweDAwMDBmZiwgMHhmZmZmMDAsIDB4MDBmZmZmLCAweGZmMDBmZiwgMHhmZjg4MDAsIDB4MDBmZjg4LCAweDg4MDBmZl1cbiAgICAgICAgICAgIDogWzB4ZmZmZmZmLCAweGZmZjZjMCwgMHhmZmUwNjYsIDB4ZmZjMDgwLCAweDgwYzBmZl07XG4gICAgICAgICAgZm9yIChsZXQgcyA9IDA7IHMgPCBidXJzdENvdW50OyBzKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gcGFsZXR0ZVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqcGFsZXR0ZS5sZW5ndGgpXTtcbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSBzcGVjdGFjdWxhciA/ICgxLjIgKyBNYXRoLnJhbmRvbSgpKjIuMikgOiAoMC43ICsgTWF0aC5yYW5kb20oKSowLjgpO1xuICAgICAgICAgICAgY29uc3Qgc3BhcmtsZUdlbyA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeShzaXplLCA4LCA4KTtcbiAgICAgICAgICAgIGNvbnN0IHNwYXJrbGVNYXQgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBjb2xvciwgdHJhbnNwYXJlbnQ6IHRydWUsIG9wYWNpdHk6IHNwZWN0YWN1bGFyID8gMC45MiA6IDAuNywgYmxlbmRpbmc6IFRIUkVFLkFkZGl0aXZlQmxlbmRpbmcgfSk7XG4gICAgICAgICAgICBjb25zdCBzcGFya2xlID0gbmV3IFRIUkVFLk1lc2goc3BhcmtsZUdlbywgc3BhcmtsZU1hdCk7XG4gICAgICAgICAgICBzcGFya2xlLnBvc2l0aW9uLmNvcHkob2JqLm1lc2gucG9zaXRpb24pO1xuICAgICAgICAgICAgLy8gU3BlY3RhY3VsYXI6IGh1Z2UsIGZhc3QsIHJhbmRvbSBkaXJlY3Rpb25zOyBub3JtYWw6IG1vZGVyYXRlXG4gICAgICAgICAgICBjb25zdCBzcGQgPSBzcGVjdGFjdWxhciA/ICg0ICsgTWF0aC5yYW5kb20oKSo4KSA6ICgyICsgTWF0aC5yYW5kb20oKSoyKTtcbiAgICAgICAgICAgIGNvbnN0IHNwYXJrbGVWZWwgPSBuZXcgVEhSRUUuVmVjdG9yMyhNYXRoLnJhbmRvbSgpLTAuNSwgTWF0aC5yYW5kb20oKS0wLjUsIE1hdGgucmFuZG9tKCktMC41KS5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhcihzcGQpO1xuICAgICAgICAgICAgc3BhcmtsZS51c2VyRGF0YSA9IHsgdmVsb2NpdHk6IHNwYXJrbGVWZWwsIGFnZTogMCwgc3BlY3RhY3VsYXIsIG1heEFnZTogc3BlY3RhY3VsYXIgPyA4MCArIE1hdGgucmFuZG9tKCkqNDAgOiA0MCArIE1hdGgucmFuZG9tKCkqMjAgfTsgLy8gPC0tIExPTkdFUiBMSUZFXG4gICAgICAgICAgICBzY2VuZS5hZGQoc3BhcmtsZSk7XG4gICAgICAgICAgICBpZiAoIXdpbmRvdy5fc3BhcmtsZXMpIHdpbmRvdy5fc3BhcmtsZXMgPSBbXTtcbiAgICAgICAgICAgIHdpbmRvdy5fc3BhcmtsZXMucHVzaChzcGFya2xlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNwZWN0YWN1bGFyKSB7XG4gICAgICAgICAgICAvLyBBZGQgYSBiaWcgZmxhc2hcbiAgICAgICAgICAgIGNvbnN0IGZsYXNoR2VvID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDYsIDI0LCAyNCk7XG4gICAgICAgICAgICBjb25zdCBmbGFzaE1hdCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7IGNvbG9yOiAweGZmZmZmZiwgdHJhbnNwYXJlbnQ6IHRydWUsIG9wYWNpdHk6IDAuOCwgYmxlbmRpbmc6IFRIUkVFLkFkZGl0aXZlQmxlbmRpbmcgfSk7XG4gICAgICAgICAgICBjb25zdCBmbGFzaCA9IG5ldyBUSFJFRS5NZXNoKGZsYXNoR2VvLCBmbGFzaE1hdCk7XG4gICAgICAgICAgICBmbGFzaC5wb3NpdGlvbi5jb3B5KG9iai5tZXNoLnBvc2l0aW9uKTtcbiAgICAgICAgICAgIHNjZW5lLmFkZChmbGFzaCk7XG4gICAgICAgICAgICBpZiAoIXdpbmRvdy5fc3RhckZsYXNoZXMpIHdpbmRvdy5fc3RhckZsYXNoZXMgPSBbXTtcbiAgICAgICAgICAgIHdpbmRvdy5fc3RhckZsYXNoZXMucHVzaCh7IG1lc2g6IGZsYXNoLCBhZ2U6IDAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEZyYWdtZW50ZWQgdHJhaWwgbG9naWMgKGtlZXAgYXMgYmVmb3JlKVxuICAgICAgICAgIGNvbnN0IGZyYWdWZWwgPSBvYmoudmVsb2NpdHkuY2xvbmUoKS5hcHBseUF4aXNBbmdsZShuZXcgVEhSRUUuVmVjdG9yMygwLDEsMCksIChNYXRoLnJhbmRvbSgpLTAuNSkqMC4zKTtcbiAgICAgICAgICBjb25zdCBmcmFnU3RhciA9IG9iai5tZXNoLmNsb25lKCk7XG4gICAgICAgICAgZnJhZ1N0YXIucG9zaXRpb24uY29weShvYmoubWVzaC5wb3NpdGlvbik7XG4gICAgICAgICAgZnJhZ1N0YXIudmVsb2NpdHkgPSBmcmFnVmVsO1xuICAgICAgICAgIGZyYWdTdGFyLm5vcm1hbGl6ZWRMaWZlID0gbm9ybWFsaXplZExpZmU7XG4gICAgICAgICAgZnJhZ1N0YXIubm9ybWFsaXplZExpZmV0aW1lID0gb2JqLm5vcm1hbGl6ZWRMaWZldGltZSAqICgwLjUgKyBNYXRoLnJhbmRvbSgpKjAuNSk7XG4gICAgICAgICAgZnJhZ1N0YXIuYWdlID0gb2JqLmFnZTtcbiAgICAgICAgICBmcmFnU3Rhci5tYXRlcmlhbCA9IG9iai5tZXNoLm1hdGVyaWFsLmNsb25lKCk7XG4gICAgICAgICAgY29uc3QgZnJhZ1RyYWlsUG9pbnRzID0gb2JqLnRyYWlsUG9pbnRzLnNsaWNlKCk7XG4gICAgICAgICAgY29uc3QgZnJhZ1RhaWxHZW8gPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKS5zZXRGcm9tUG9pbnRzKGZyYWdUcmFpbFBvaW50cyk7XG4gICAgICAgICAgZnJhZ1RhaWxHZW8uc2V0QXR0cmlidXRlKCdjb2xvcicsIG9iai50YWlsLmdlb21ldHJ5LmdldEF0dHJpYnV0ZSgnY29sb3InKS5jbG9uZSgpKTtcbiAgICAgICAgICBjb25zdCBmcmFnVGFpbE1hdCA9IG9iai50YWlsLm1hdGVyaWFsLmNsb25lKCk7XG4gICAgICAgICAgY29uc3QgZnJhZ1RhaWwgPSBuZXcgVEhSRUUuTGluZShmcmFnVGFpbEdlbywgZnJhZ1RhaWxNYXQpO1xuICAgICAgICAgIGZyYWdUYWlsLnBvc2l0aW9uLmNvcHkoZnJhZ1N0YXIucG9zaXRpb24pO1xuICAgICAgICAgIHNjZW5lLmFkZChmcmFnU3Rhcik7XG4gICAgICAgICAgc2NlbmUuYWRkKGZyYWdUYWlsKTtcbiAgICAgICAgICBzaG9vdGluZ1N0YXJzLnB1c2goeyBtZXNoOiBmcmFnU3RhciwgdGFpbDogZnJhZ1RhaWwsIHZlbG9jaXR5OiBmcmFnU3Rhci52ZWxvY2l0eSwgZGlyOiBvYmouZGlyLCBhZ2U6IGZyYWdTdGFyLmFnZSwgbm9ybWFsaXplZExpZmV0aW1lOiBmcmFnU3Rhci5ub3JtYWxpemVkTGlmZXRpbWUsIHRyYWlsUG9pbnRzOiBmcmFnVHJhaWxQb2ludHMsIGNvbG9yOiBvYmouY29sb3IsIGJyaWdodG5lc3M6IG9iai5icmlnaHRuZXNzLCBoYXNGcmFnbWVudGVkOiB0cnVlIH0pO1xuICAgICAgICAgIG9iai5oYXNGcmFnbWVudGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTcGFyayBidXJzdFxuICAgICAgICBpZiAoIW9iai5oYXNTcGFya2VkICYmIG5vcm1hbGl6ZWRMaWZlID4gMC45NSAmJiBNYXRoLnJhbmRvbSgpIDwgMC4xKSB7XG4gICAgICAgICAgZm9yIChsZXQgcyA9IDA7IHMgPCA4ICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjgpOyBzKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHNwYXJrR2VvID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDAuNSArIE1hdGgucmFuZG9tKCkqMC41LCA4LCA4KTtcbiAgICAgICAgICAgIGNvbnN0IHNwYXJrTWF0ID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHsgY29sb3I6IDB4ZmZmNmMwLCB0cmFuc3BhcmVudDogdHJ1ZSwgb3BhY2l0eTogMSwgYmxlbmRpbmc6IFRIUkVFLkFkZGl0aXZlQmxlbmRpbmcgfSk7XG4gICAgICAgICAgICBjb25zdCBzcGFyayA9IG5ldyBUSFJFRS5NZXNoKHNwYXJrR2VvLCBzcGFya01hdCk7XG4gICAgICAgICAgICBzcGFyay5wb3NpdGlvbi5jb3B5KG9iai5tZXNoLnBvc2l0aW9uKTtcbiAgICAgICAgICAgIHNwYXJrLnNwYXJrVmVsID0gbmV3IFRIUkVFLlZlY3RvcjMoTWF0aC5yYW5kb20oKS0wLjUsIE1hdGgucmFuZG9tKCktMC41LCBNYXRoLnJhbmRvbSgpLTAuNSkubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoMC41ICsgTWF0aC5yYW5kb20oKSoxLjIpO1xuICAgICAgICAgICAgc3Bhcmsuc3BhcmtMaWZlID0gMTIgKyBNYXRoLnJhbmRvbSgpKjEwO1xuICAgICAgICAgICAgc3Bhcmsuc3BhcmtBZ2UgPSAwO1xuICAgICAgICAgICAgc2NlbmUuYWRkKHNwYXJrKTtcbiAgICAgICAgICAgIGlmICghd2luZG93Ll9zdGFyU3BhcmtzKSB3aW5kb3cuX3N0YXJTcGFya3MgPSBbXTtcbiAgICAgICAgICAgIHdpbmRvdy5fc3RhclNwYXJrcy5wdXNoKHNwYXJrKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2JqLmhhc1NwYXJrZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZsYXNoXG4gICAgICAgIGlmICghb2JqLmhhc0ZsYXNoZWQgJiYgbm9ybWFsaXplZExpZmUgPiAwLjk4ICYmIE1hdGgucmFuZG9tKCkgPCAwLjIpIHtcbiAgICAgICAgICBjb25zdCBmbGFzaEdlbyA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSgxLCAxNiwgMTYpO1xuICAgICAgICAgIGNvbnN0IGZsYXNoTWF0ID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHsgY29sb3I6IDB4ZmZmZmVlLCB0cmFuc3BhcmVudDogdHJ1ZSwgb3BhY2l0eTogMC44LCBibGVuZGluZzogVEhSRUUuQWRkaXRpdmVCbGVuZGluZyB9KTtcbiAgICAgICAgICBjb25zdCBmbGFzaCA9IG5ldyBUSFJFRS5NZXNoKGZsYXNoR2VvLCBmbGFzaE1hdCk7XG4gICAgICAgICAgZmxhc2gucG9zaXRpb24uY29weShvYmoubWVzaC5wb3NpdGlvbik7XG4gICAgICAgICAgc2NlbmUuYWRkKGZsYXNoKTtcbiAgICAgICAgICBpZiAoIXdpbmRvdy5fc3RhckZsYXNoZXMpIHdpbmRvdy5fc3RhckZsYXNoZXMgPSBbXTtcbiAgICAgICAgICB3aW5kb3cuX3N0YXJGbGFzaGVzLnB1c2goeyBtZXNoOiBmbGFzaCwgYWdlOiAwIH0pO1xuICAgICAgICAgIG9iai5oYXNGbGFzaGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBGYWRlIG91dCBhcyBpdCBnZXRzIGZhciBhd2F5XG4gICAgICAgIGNvbnN0IGRpc3QgPSBvYmoubWVzaC5wb3NpdGlvbi5kaXN0YW5jZVRvKGNhbWVyYS5wb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IGZhZGVTdGFydCA9IHN0YXJNYXhEaXN0YW5jZSAqIDAuNTtcbiAgICAgICAgaWYgKGRpc3QgPiBmYWRlU3RhcnQpIHtcbiAgICAgICAgICBjb25zdCBmYWRlID0gMSAtIChkaXN0IC0gZmFkZVN0YXJ0KSAvIChzdGFyTWF4RGlzdGFuY2UgLSBmYWRlU3RhcnQpO1xuICAgICAgICAgIG9iai5tZXNoLm1hdGVyaWFsLm9wYWNpdHkgPSBNYXRoLm1heCgwLCBmYWRlKTtcbiAgICAgICAgICBvYmoubWVzaC5tYXRlcmlhbC50cmFuc3BhcmVudCA9IHRydWU7XG4gICAgICAgICAgb2JqLnRhaWwubWF0ZXJpYWwub3BhY2l0eSA9IE1hdGgubWF4KDAsIGZhZGUgKiAwLjgpO1xuICAgICAgICAgIG9iai50YWlsLm1hdGVyaWFsLnRyYW5zcGFyZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZW1vdmUgd2hlbiBvdXQgb2YgYm91bmRzIG9yIGZ1bGx5IGZhZGVkIG9yIGxpZmUgZW5kZWRcbiAgICAgICAgLy8gRmFkZSB0YWlsIGFmdGVyIGV4cGxvc2lvblxuICAgICAgICBpZiAoKG5vcm1hbGl6ZWRMaWZlID49IDEuMCB8fCBkaXN0ID4gc3Rhck1heERpc3RhbmNlIHx8IG9iai5tZXNoLm1hdGVyaWFsLm9wYWNpdHkgPD0gMC4wMSkgJiYgIW9iai50YWlsRmFkaW5nKSB7XG4gICAgICAgICAgc2NlbmUucmVtb3ZlKG9iai5tZXNoKTtcbiAgICAgICAgICAvLyBTdGFydCB0YWlsIGZhZGUtb3V0IGdob3N0XG4gICAgICAgICAgb2JqLnRhaWxGYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIG9iai50YWlsRmFkZUFnZSA9IDA7XG4gICAgICAgICAgaWYgKCF3aW5kb3cuX2ZhZGluZ1RhaWxzKSB3aW5kb3cuX2ZhZGluZ1RhaWxzID0gW107XG4gICAgICAgICAgd2luZG93Ll9mYWRpbmdUYWlscy5wdXNoKHsgdGFpbDogb2JqLnRhaWwsIHRhaWxCbG9vbTogb2JqLnRhaWxCbG9vbSwgYWdlOiAwIH0pO1xuICAgICAgICAgIHNob290aW5nU3RhcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBBbmltYXRlIHNwYXJrc1xuICAgICAgaWYgKHdpbmRvdy5fc3RhclNwYXJrcykge1xuICAgICAgICBmb3IgKGxldCBpID0gd2luZG93Ll9zdGFyU3BhcmtzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgY29uc3Qgc3BhcmsgPSB3aW5kb3cuX3N0YXJTcGFya3NbaV07XG4gICAgICAgICAgc3BhcmsucG9zaXRpb24uYWRkKHNwYXJrLnNwYXJrVmVsKTtcbiAgICAgICAgICBzcGFyay5zcGFya0FnZSsrO1xuICAgICAgICAgIHNwYXJrLm1hdGVyaWFsLm9wYWNpdHkgKj0gMC45MjtcbiAgICAgICAgICBpZiAoc3Bhcmsuc3BhcmtBZ2UgPiBzcGFyay5zcGFya0xpZmUpIHtcbiAgICAgICAgICAgIHNjZW5lLnJlbW92ZShzcGFyayk7XG4gICAgICAgICAgICB3aW5kb3cuX3N0YXJTcGFya3Muc3BsaWNlKGksIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQW5pbWF0ZSBleHBsb3Npb24gcGFydGljbGVzIChzcGFya2xlcylcbiAgICAgIGlmICh3aW5kb3cuX3NwYXJrbGVzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSB3aW5kb3cuX3NwYXJrbGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgY29uc3Qgc3BhcmtsZSA9IHdpbmRvdy5fc3BhcmtsZXNbaV07XG4gICAgICAgICAgc3BhcmtsZS5wb3NpdGlvbi5hZGQoc3BhcmtsZS51c2VyRGF0YS52ZWxvY2l0eSk7XG4gICAgICAgICAgc3BhcmtsZS51c2VyRGF0YS5hZ2UrKztcbiAgICAgICAgICBzcGFya2xlLm1hdGVyaWFsLm9wYWNpdHkgKj0gMC45NztcbiAgICAgICAgICBpZiAoc3BhcmtsZS51c2VyRGF0YS5hZ2UgPiAoc3BhcmtsZS51c2VyRGF0YS5tYXhBZ2UgfHwgNDApKSB7XG4gICAgICAgICAgICBzY2VuZS5yZW1vdmUoc3BhcmtsZSk7XG4gICAgICAgICAgICB3aW5kb3cuX3NwYXJrbGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEFuaW1hdGUgZmFkaW5nIHRhaWxzIChnaG9zdHMpXG4gICAgICBpZiAod2luZG93Ll9mYWRpbmdUYWlscykge1xuICAgICAgICBmb3IgKGxldCBpID0gd2luZG93Ll9mYWRpbmdUYWlscy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGNvbnN0IGdob3N0ID0gd2luZG93Ll9mYWRpbmdUYWlsc1tpXTtcbiAgICAgICAgICBpZiAoZ2hvc3QudGFpbCkge1xuICAgICAgICAgICAgZ2hvc3QudGFpbC5tYXRlcmlhbC5vcGFjaXR5ICo9IDAuOTI7XG4gICAgICAgICAgICBpZiAoZ2hvc3QudGFpbC5tYXRlcmlhbC5vcGFjaXR5IDwgMC4wMSkge1xuICAgICAgICAgICAgICBzY2VuZS5yZW1vdmUoZ2hvc3QudGFpbCk7XG4gICAgICAgICAgICAgIHdpbmRvdy5fZmFkaW5nVGFpbHMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGdob3N0LnRhaWxCbG9vbSkge1xuICAgICAgICAgICAgZ2hvc3QudGFpbEJsb29tLm1hdGVyaWFsLm9wYWNpdHkgKj0gMC45MjtcbiAgICAgICAgICAgIGlmIChnaG9zdC50YWlsQmxvb20ubWF0ZXJpYWwub3BhY2l0eSA8IDAuMDEpIHtcbiAgICAgICAgICAgICAgc2hvb3RpbmdTdGFyU2NlbmUucmVtb3ZlKGdob3N0LnRhaWxCbG9vbSk7XG4gICAgICAgICAgICAgIGdob3N0LnRhaWxCbG9vbSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGdob3N0LmFnZSsrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEFuaW1hdGUgZmxhc2hlc1xuICAgICAgaWYgKHdpbmRvdy5fc3RhckZsYXNoZXMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHdpbmRvdy5fc3RhckZsYXNoZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBjb25zdCBmbGFzaCA9IHdpbmRvdy5fc3RhckZsYXNoZXNbaV07XG4gICAgICAgICAgZmxhc2gubWVzaC5zY2FsZS5tdWx0aXBseVNjYWxhcigxLjE1KTtcbiAgICAgICAgICBmbGFzaC5tZXNoLm1hdGVyaWFsLm9wYWNpdHkgKj0gMC44NTtcbiAgICAgICAgICBmbGFzaC5hZ2UrKztcbiAgICAgICAgICBpZiAoZmxhc2guYWdlID4gMTApIHtcbiAgICAgICAgICAgIHNjZW5lLnJlbW92ZShmbGFzaC5tZXNoKTtcbiAgICAgICAgICAgIHdpbmRvdy5fc3RhckZsYXNoZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyAtLS0gU3RhcmZpZWxkIGxvZ2ljIC0tLVxuICAgICAgY29uc3Qgc3FEaXN0ID0gc3Rhck1heERpc3RhbmNlICogc3Rhck1heERpc3RhbmNlO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgY29uc3QgZHggPSBwb3NpdGlvbnNbaV0gLSB2aXJ0dWFsQ2FtZXJhUG9zLng7XG4gICAgICAgIGNvbnN0IGR5ID0gcG9zaXRpb25zW2kgKyAxXSAtIHZpcnR1YWxDYW1lcmFQb3MueTtcbiAgICAgICAgY29uc3QgZHogPSBwb3NpdGlvbnNbaSArIDJdIC0gdmlydHVhbENhbWVyYVBvcy56O1xuICAgICAgICBpZiAoZHgqZHggKyBkeSpkeSArIGR6KmR6ID4gc3FEaXN0KSB7XG4gICAgICAgICAgLy8gUGxhY2UgaW4gYSB0aGljayBzcGhlcmljYWwgc2hlbGwgYXJvdW5kIHRoZSB2aXJ0dWFsIGNhbWVyYSwgbmV2ZXIgdG9vIGNsb3NlXG4gICAgICAgICAgY29uc3QgbWluUmFkaXVzID0gc3Rhck1heERpc3RhbmNlICogMC44O1xuICAgICAgICAgIGNvbnN0IG1heFJhZGl1cyA9IHN0YXJNYXhEaXN0YW5jZTtcbiAgICAgICAgICBjb25zdCByID0gbWluUmFkaXVzICsgTWF0aC5yYW5kb20oKSAqIChtYXhSYWRpdXMgLSBtaW5SYWRpdXMpO1xuICAgICAgICAgIGNvbnN0IHRoZXRhID0gTWF0aC5yYW5kb20oKSAqIDIgKiBNYXRoLlBJO1xuICAgICAgICAgIGNvbnN0IHBoaSA9IE1hdGguYWNvcygyICogTWF0aC5yYW5kb20oKSAtIDEpO1xuICAgICAgICAgIHBvc2l0aW9uc1tpXSA9IHZpcnR1YWxDYW1lcmFQb3MueCArIHIgKiBNYXRoLnNpbihwaGkpICogTWF0aC5jb3ModGhldGEpO1xuICAgICAgICAgIHBvc2l0aW9uc1tpKzFdID0gdmlydHVhbENhbWVyYVBvcy55ICsgciAqIE1hdGguc2luKHBoaSkgKiBNYXRoLnNpbih0aGV0YSk7XG4gICAgICAgICAgcG9zaXRpb25zW2krMl0gPSB2aXJ0dWFsQ2FtZXJhUG9zLnogKyByICogTWF0aC5jb3MocGhpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5uZWVkc1VwZGF0ZSA9IHRydWU7IC8vIEFscmVhZHkgc2V0IGFib3ZlXG4gIFxuICAgICAgLy8gUm9idXN0IHN0YXJmaWVsZCBjb2xvciB1cGRhdGUgdG8gcHJldmVudCBzdHVjayB3aGl0ZSBkb3RzXG4gICAgICAvLyBUaGlzIHdvcmtzIE5PIFRPVUNIWVxuICAgICAgY29uc3QgY29sQXJyID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5jb2xvci5hcnJheTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IGkgLyAzO1xuICAgICAgICBjb25zdCBkeCA9IHBvc2l0aW9uc1tpXSAtIHZpcnR1YWxDYW1lcmFQb3MueDtcbiAgICAgICAgY29uc3QgZHkgPSBwb3NpdGlvbnNbaSArIDFdIC0gdmlydHVhbENhbWVyYVBvcy55O1xuICAgICAgICBjb25zdCBkeiA9IHBvc2l0aW9uc1tpICsgMl0gLSB2aXJ0dWFsQ2FtZXJhUG9zLno7XG4gICAgICAgIGNvbnN0IGRpc3QgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkgKyBkeiAqIGR6KTtcbiAgICAgICAgaWYgKHRpbWVyc1tpZHhdID4gMCkge1xuICAgICAgICAgIHRpbWVyc1tpZHhdLS07XG4gICAgICAgICAgaWYgKHRpbWVyc1tpZHhdID09PSAwKSB7XG4gICAgICAgICAgICAvLyBUaW1lciBleHBpcmVkLCByZXN0b3JlIGNvbG9yXG4gICAgICAgICAgICBzcGFya0NvbG9yc1tpXSA9IG9yaWdpbmFsQ29sb3JzW2ldO1xuICAgICAgICAgICAgc3BhcmtDb2xvcnNbaSsxXSA9IG9yaWdpbmFsQ29sb3JzW2krMV07XG4gICAgICAgICAgICBzcGFya0NvbG9yc1tpKzJdID0gb3JpZ2luYWxDb2xvcnNbaSsyXTtcbiAgICAgICAgICAgIGNvbEFycltpXSA9IG9yaWdpbmFsQ29sb3JzW2ldO1xuICAgICAgICAgICAgY29sQXJyW2krMV0gPSBvcmlnaW5hbENvbG9yc1tpKzFdO1xuICAgICAgICAgICAgY29sQXJyW2krMl0gPSBvcmlnaW5hbENvbG9yc1tpKzJdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb2xBcnJbaV0gPSBzcGFya0NvbG9yc1tpXTtcbiAgICAgICAgICAgIGNvbEFycltpKzFdID0gc3BhcmtDb2xvcnNbaSsxXTtcbiAgICAgICAgICAgIGNvbEFycltpKzJdID0gc3BhcmtDb2xvcnNbaSsyXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGlzdCA+IHN0YXJNYXhEaXN0YW5jZSAqIDAuMyAmJiBNYXRoLnJhbmRvbSgpIDwgMC4wNSkge1xuICAgICAgICAgIHRpbWVyc1tpZHhdID0gc3BhcmtsZUR1cmF0aW9uO1xuICAgICAgICAgIGNvbnN0IGMgPSBwYWxldHRlW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBhbGV0dGUubGVuZ3RoKV07XG4gICAgICAgICAgc3BhcmtDb2xvcnNbaV0gPSBjWzBdO1xuICAgICAgICAgIHNwYXJrQ29sb3JzW2krMV0gPSBjWzFdO1xuICAgICAgICAgIHNwYXJrQ29sb3JzW2krMl0gPSBjWzJdO1xuICAgICAgICAgIGNvbEFycltpXSA9IHNwYXJrQ29sb3JzW2ldO1xuICAgICAgICAgIGNvbEFycltpKzFdID0gc3BhcmtDb2xvcnNbaSsxXTtcbiAgICAgICAgICBjb2xBcnJbaSsyXSA9IHNwYXJrQ29sb3JzW2krMl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3BhcmtDb2xvcnNbaV0gPSBvcmlnaW5hbENvbG9yc1tpXTtcbiAgICAgICAgICBzcGFya0NvbG9yc1tpKzFdID0gb3JpZ2luYWxDb2xvcnNbaSsxXTtcbiAgICAgICAgICBzcGFya0NvbG9yc1tpKzJdID0gb3JpZ2luYWxDb2xvcnNbaSsyXTtcbiAgICAgICAgICBjb2xBcnJbaV0gPSBvcmlnaW5hbENvbG9yc1tpXTtcbiAgICAgICAgICBjb2xBcnJbaSsxXSA9IG9yaWdpbmFsQ29sb3JzW2krMV07XG4gICAgICAgICAgY29sQXJyW2krMl0gPSBvcmlnaW5hbENvbG9yc1tpKzJdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB9O1xuICAgIFxuICAgIC8vIFN0YXJ0IHRoZSBhbmltYXRpb24gbG9vcFxuICAgIGFuaW1hdGUoKTtcbiAgICBcbiAgICAvLyBIYW5kbGUgd2luZG93IHJlc2l6ZVxuICAgIGNvbnN0IG9uUmVzaXplID0gKCkgPT4ge1xuICAgICAgY2FtZXJhLmFzcGVjdCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgICBzaG9vdGluZ1N0YXJDb21wb3Nlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICAgICAgY2FDb21wb3Nlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICAgIH07XG4gICAgXG4gICAgLy8gQWRkIGV2ZW50IGxpc3RlbmVyIGZvciByZXNpemVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25SZXNpemUpO1xuICAgIFxuICAgIC8vIENsZWFuIHVwIGZ1bmN0aW9uXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvblJlc2l6ZSk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplQWxsKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdmdWxsc2NyZWVuY2hhbmdlJywgcmVzaXplQWxsKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvblNjcm9sbCk7XG4gICAgICAvLyBDYW5jZWwgdGhlIGFuaW1hdGlvbiBmcmFtZSB1c2luZyB0aGUgc3RvcmVkIElEXG4gICAgICBpZiAoYW5pbWF0aW9uSWQpIHtcbiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uSWQpO1xuICAgICAgfVxuICAgICAgLy8gRGlzcG9zZSBjb21wb3NlcnNcbiAgICAgIGlmIChjb21wb3NlcikgY29tcG9zZXIuZGlzcG9zZSgpO1xuICAgICAgaWYgKHNob290aW5nU3RhckNvbXBvc2VyKSBzaG9vdGluZ1N0YXJDb21wb3Nlci5kaXNwb3NlKCk7XG4gICAgICBpZiAoY2FDb21wb3NlcikgY2FDb21wb3Nlci5kaXNwb3NlKCk7XG4gICAgICAvLyBDbGVhbiB1cCBUaHJlZS5qcyByZXNvdXJjZXNcbiAgICAgIGlmIChyZW5kZXJlcikge1xuICAgICAgICByZW5kZXJlci5kaXNwb3NlKCk7XG4gICAgICAgIGlmIChtb3VudCAmJiBtb3VudC5jb250YWlucyhyZW5kZXJlci5kb21FbGVtZW50KSkge1xuICAgICAgICAgIG1vdW50LnJlbW92ZUNoaWxkKHJlbmRlcmVyLmRvbUVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW10pXG5cbiAgcmV0dXJuIDxkaXYgcmVmPXttb3VudFJlZn0gLz47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdGFyZmllbGQ7XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJUSFJFRSIsIkVmZmVjdENvbXBvc2VyIiwiVW5yZWFsQmxvb21QYXNzIiwiUmVuZGVyUGFzcyIsIlNoYWRlclBhc3MiLCJGWEFBU2hhZGVyIiwiRmlsbVBhc3MiLCJDaHJvbWF0aWNBYmVycmF0aW9uUGFzcyIsIlN0YXJmaWVsZCIsIm1vdW50UmVmIiwiY3VycmVudCIsIm1vdW50Iiwic3R5bGUiLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJ3aWR0aCIsImhlaWdodCIsInpJbmRleCIsInNjZW5lIiwiU2NlbmUiLCJjYW1lcmEiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInNldCIsInZpcnR1YWxDYW1lcmFQb3MiLCJWZWN0b3IzIiwicmVuZGVyZXIiLCJXZWJHTFJlbmRlcmVyIiwiYW50aWFsaWFzIiwic2V0UGl4ZWxSYXRpbyIsImRldmljZVBpeGVsUmF0aW8iLCJzZXRTaXplIiwic2V0Q2xlYXJDb2xvciIsIm91dHB1dENvbG9yU3BhY2UiLCJTUkdCQ29sb3JTcGFjZSIsInJlbmRlclRhcmdldCIsIldlYkdMUmVuZGVyVGFyZ2V0IiwiY29sb3JTcGFjZSIsInR5cGUiLCJVbnNpZ25lZEJ5dGVUeXBlIiwidG9uZU1hcHBpbmciLCJOb1RvbmVNYXBwaW5nIiwiYXV0b0NsZWFyIiwiYXBwZW5kQ2hpbGQiLCJkb21FbGVtZW50IiwiY29tcG9zZXIiLCJyZW5kZXJQYXNzIiwiY2xlYXIiLCJhZGRQYXNzIiwiYmxvb21QYXNzIiwiVmVjdG9yMiIsImZ4YWFQYXNzIiwibWF0ZXJpYWwiLCJ1bmlmb3JtcyIsInZhbHVlIiwieCIsInkiLCJmaWxtUGFzcyIsInNob290aW5nU3RhclNjZW5lIiwic2hvb3RpbmdTdGFyQ29tcG9zZXIiLCJzaG9vdGluZ1N0YXJSZW5kZXJQYXNzIiwic2hvb3RpbmdTdGFyQmxvb21QYXNzIiwiY2xvc2VTdGFyc1NjZW5lIiwiY2FQYXNzIiwiY2FDb21wb3NlciIsImNhUmVuZGVyUGFzcyIsInJlc2l6ZUFsbCIsImFzcGVjdCIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJhZGRFdmVudExpc3RlbmVyIiwic3RhckNvdW50Iiwic3Rhck1heERpc3RhbmNlIiwic3RhclNwZWVkIiwiZ2VvbWV0cnkiLCJCdWZmZXJHZW9tZXRyeSIsImNsb3NlR2VvbWV0cnkiLCJwb3NpdGlvbnMiLCJjbG9zZVBvc2l0aW9ucyIsInN0YXJzUGxhY2VkIiwiTWF0aCIsInJhbmRvbSIsImNsdXN0ZXJUaGV0YSIsIlBJIiwiY2x1c3RlclBoaSIsImFjb3MiLCJjbHVzdGVyUiIsImNsdXN0ZXJDZW50ZXIiLCJzaW4iLCJjb3MiLCJjbHVzdGVyU2l6ZSIsImZsb29yIiwiYyIsIm9mZnNldFRoZXRhIiwib2Zmc2V0UGhpIiwib2Zmc2V0UiIsInB1c2giLCJ0aGV0YSIsInBoaSIsInIiLCJ6Iiwic2V0QXR0cmlidXRlIiwiRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSIsImxlbmd0aCIsInBhbGV0dGUiLCJjb2xvcnMiLCJpIiwib3JpZ2luYWxDb2xvcnMiLCJhdHRyaWJ1dGVzIiwiY29sb3IiLCJhcnJheSIsInNsaWNlIiwidGltZXJzIiwiRmxvYXQzMkFycmF5Iiwic3BhcmtDb2xvcnMiLCJzcGFya2xlRHVyYXRpb24iLCJQb2ludHNNYXRlcmlhbCIsInNpemUiLCJzaXplQXR0ZW51YXRpb24iLCJ2ZXJ0ZXhDb2xvcnMiLCJzdGFycyIsIlBvaW50cyIsImFkZCIsImdsb3dNYXAiLCJUZXh0dXJlTG9hZGVyIiwibG9hZCIsImdsb3dTcHJpdGVzIiwiZ2xvd01hdGVyaWFsIiwiU3ByaXRlTWF0ZXJpYWwiLCJtYXAiLCJvcGFjaXR5IiwiYmxlbmRpbmciLCJBZGRpdGl2ZUJsZW5kaW5nIiwiZGVwdGhXcml0ZSIsInRyYW5zcGFyZW50IiwiZ2xvdyIsIlNwcml0ZSIsImNsb25lIiwic2NhbGUiLCJjbG9zZVN0YXJzIiwidGFyZ2V0WSIsImRhbXBpbmciLCJvblNjcm9sbCIsInBjdCIsInNjcm9sbFkiLCJkb2N1bWVudCIsImJvZHkiLCJzY3JvbGxIZWlnaHQiLCJ0YWlsTGVuZ3RoIiwic2hvb3RpbmdTdGFycyIsInNob290aW5nU3RhckNvb2xkb3duIiwic3Bhd25TaG9vdGluZ1N0YXIiLCJkaXIiLCJub3JtYWxpemUiLCJtaW5EaXN0IiwibWF4RGlzdCIsImRpc3QiLCJzcGF3blBvcyIsIm11bHRpcGx5U2NhbGFyIiwidGFuZ2VudCIsInN1YiIsInByb2plY3RPblZlY3RvciIsInRhbmdlbnRpYWxTcGVlZCIsInJhZGlhbFNwZWVkIiwidmVsb2NpdHkiLCJ2aWJyYW50Q29sb3JzIiwiYnJpZ2h0bmVzcyIsImdlbyIsIlNwaGVyZUdlb21ldHJ5IiwibWF0IiwiTWVzaFBoeXNpY2FsTWF0ZXJpYWwiLCJlbWlzc2l2ZSIsImVtaXNzaXZlSW50ZW5zaXR5IiwibWV0YWxuZXNzIiwicm91Z2huZXNzIiwidHJhbnNtaXNzaW9uIiwiY2xlYXJjb2F0IiwiY2xlYXJjb2F0Um91Z2huZXNzIiwic3RhciIsIk1lc2giLCJzcHJpdGVNYXAiLCJzcHJpdGVNYXRlcmlhbCIsInNwcml0ZSIsImNvcHkiLCJjb2xvclNwcml0ZU1hdGVyaWFsIiwiY29sb3JTcHJpdGUiLCJzcGFya0NvdW50Iiwic3BhcmtHcm91cCIsIkdyb3VwIiwic3BhcmtNYXQiLCJNZXNoQmFzaWNNYXRlcmlhbCIsInNwYXJrR2VvIiwic3BhcmsiLCJhbmdsZSIsIm5hbWUiLCJub3JtYWxpemVkTGlmZSIsIm5vcm1hbGl6ZWRMaWZldGltZSIsImFnZSIsInRyYWlsU2VnbWVudHMiLCJ0cmFpbFBvaW50cyIsInNwaXJhbCIsImN1cnZlIiwicHQiLCJ0YWlsR2VvIiwic2V0RnJvbVBvaW50cyIsInRhaWxDb2xvcnMiLCJhbHBoYSIsInJhaW5ib3ciLCJncmFkQ29sb3IiLCJ0YWlsTWF0IiwiTGluZUJhc2ljTWF0ZXJpYWwiLCJ0YWlsTWF0TWFpbiIsIk5vcm1hbEJsZW5kaW5nIiwidGFpbE1haW4iLCJMaW5lIiwidGFpbE1hdEJsb29tIiwidGFpbEJsb29tIiwidGFpbEdsb3dNYXAiLCJ0YWlsR2xvd01hdCIsInRhaWxHbG93IiwibWVzaCIsInRhaWwiLCJoYXNGcmFnbWVudGVkIiwiYW5pbWF0aW9uSWQiLCJhbmltYXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibmVlZHNVcGRhdGUiLCJpZHgiLCJyZW5kZXIiLCJyb3RhdGlvbiIsImZvcndhcmQiLCJnZXRXb3JsZERpcmVjdGlvbiIsImNvbG9yQXR0ciIsIm9yaWdSIiwib3JpZ0ciLCJvcmlnQiIsInNxcnQiLCJwb3ciLCJpbnRlbnNlUiIsIm1pbiIsImludGVuc2VHIiwiaW50ZW5zZUIiLCJmYWRlVCIsIm1heCIsInNoYWtlU3RyZW5ndGgiLCJvYmoiLCJjaGlsZHJlbiIsInNwYXJrcyIsImZpbmQiLCJjaGlsZCIsImoiLCJ0aW1lIiwicGVyZm9ybWFuY2UiLCJub3ciLCJnZXRBdHRyaWJ1dGUiLCJrIiwiY291bnQiLCJnZXRYIiwiZyIsImdldFkiLCJiIiwiZ2V0WiIsImgiLCJzIiwibCIsImQiLCJxIiwicCIsInRyIiwidGciLCJ0YiIsImh1ZTJyZ2IiLCJ0Iiwic2V0WCIsInNldFkiLCJzZXRaIiwic2V0VyIsImdldFciLCJ1bnNoaWZ0IiwicG9wIiwidGFpbEdyb3ciLCJhY3RpdmVTZWdtZW50cyIsInZpc2libGVUcmFpbCIsInRhaWxDb2xvcnNCbG9vbSIsIkRhdGUiLCJzZXRYWVpXIiwiaGVhZENvbG9yIiwiQ29sb3IiLCJsZXJwIiwiZmxpY2tlciIsImRpc3RUb0NhbSIsImRvZkJsdXIiLCJzcGVjdGFjdWxhciIsImJ1cnN0Q291bnQiLCJzcGFya2xlR2VvIiwic3BhcmtsZU1hdCIsInNwYXJrbGUiLCJzcGQiLCJzcGFya2xlVmVsIiwidXNlckRhdGEiLCJtYXhBZ2UiLCJfc3BhcmtsZXMiLCJmbGFzaEdlbyIsImZsYXNoTWF0IiwiZmxhc2giLCJfc3RhckZsYXNoZXMiLCJmcmFnVmVsIiwiYXBwbHlBeGlzQW5nbGUiLCJmcmFnU3RhciIsImZyYWdUcmFpbFBvaW50cyIsImZyYWdUYWlsR2VvIiwiZnJhZ1RhaWxNYXQiLCJmcmFnVGFpbCIsImhhc1NwYXJrZWQiLCJzcGFya1ZlbCIsInNwYXJrTGlmZSIsInNwYXJrQWdlIiwiX3N0YXJTcGFya3MiLCJoYXNGbGFzaGVkIiwiZGlzdGFuY2VUbyIsImZhZGVTdGFydCIsImZhZGUiLCJ0YWlsRmFkaW5nIiwicmVtb3ZlIiwidGFpbEZhZGVBZ2UiLCJfZmFkaW5nVGFpbHMiLCJzcGxpY2UiLCJnaG9zdCIsInNxRGlzdCIsImR4IiwiZHkiLCJkeiIsIm1pblJhZGl1cyIsIm1heFJhZGl1cyIsImNvbEFyciIsIm9uUmVzaXplIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiZGlzcG9zZSIsImNvbnRhaW5zIiwicmVtb3ZlQ2hpbGQiLCJkaXYiLCJyZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/Starfield.jsx\n"));

/***/ })

});