"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./components/Starfield.jsx":
/*!**********************************!*\
  !*** ./components/Starfield.jsx ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nvar _s = $RefreshSig$();\n\n\nconst Starfield = ()=>{\n    _s();\n    const mountRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const mount = mountRef.current;\n        mount.style.position = \"fixed\";\n        mount.style.top = \"0\";\n        mount.style.left = \"0\";\n        mount.style.width = \"100%\";\n        mount.style.height = \"100%\";\n        mount.style.zIndex = \"-1\";\n        // Scene & Renderer\n        const scene = new three__WEBPACK_IMPORTED_MODULE_2__.Scene();\n        const camera = new three__WEBPACK_IMPORTED_MODULE_2__.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 5000);\n        const renderer = new three__WEBPACK_IMPORTED_MODULE_2__.WebGLRenderer({\n            antialias: true\n        });\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        mount.appendChild(renderer.domElement);\n        // Starfield\n        const starCount = 10000;\n        const starMaxDistance = 1000;\n        const starSpeed = 1;\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry();\n        const positions = [];\n        for(let i = 0; i < starCount; i++){\n            const theta = Math.random() * 2 * Math.PI;\n            const phi = Math.acos(2 * Math.random() - 1);\n            const r = Math.random() * starMaxDistance;\n            positions.push(r * Math.sin(phi) * Math.cos(theta), r * Math.sin(phi) * Math.sin(theta), r * Math.cos(phi));\n        }\n        geometry.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_2__.Float32BufferAttribute(positions, 3));\n        const palette = [\n            [\n                1.0,\n                0.5,\n                0.5\n            ],\n            [\n                1.0,\n                0.75,\n                0.4\n            ],\n            [\n                1.0,\n                1.0,\n                0.9\n            ],\n            [\n                1.0,\n                1.0,\n                1.0\n            ],\n            [\n                0.4,\n                0.5,\n                1.0\n            ]\n        ];\n        const colors = [];\n        for(let i = 0; i < starCount; i++){\n            const c = palette[Math.floor(Math.random() * palette.length)];\n            colors.push(...c);\n        }\n        geometry.setAttribute(\"color\", new three__WEBPACK_IMPORTED_MODULE_2__.Float32BufferAttribute(colors, 3));\n        const originalColors = geometry.attributes.color.array.slice();\n        const timers = new Float32Array(starCount);\n        const sparkColors = new Float32Array(starCount * 3);\n        const sparkleDuration = 180;\n        const material = new three__WEBPACK_IMPORTED_MODULE_2__.PointsMaterial({\n            size: 1,\n            sizeAttenuation: true,\n            vertexColors: true\n        });\n        const stars = new three__WEBPACK_IMPORTED_MODULE_2__.Points(geometry, material);\n        scene.add(stars);\n        let targetY = 0;\n        const damping = 0.05;\n        const onScroll = ()=>{\n            const pct = window.scrollY / (document.body.scrollHeight - window.innerHeight);\n            targetY = pct * Math.PI * 2;\n        };\n        window.addEventListener(\"scroll\", onScroll);\n        const tailLength = 50;\n        const shootingStars = [];\n        let shootingStarCooldown = 0; // Prevent too many at once\n        // Enhanced shooting star effect\n        function spawnShootingStar() {\n            const dir = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1).normalize();\n            const speed = starSpeed * (300 + Math.random() * 200); // Faster, random speed\n            const geo = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(2, 16, 16); // Slightly larger\n            const mat = new three__WEBPACK_IMPORTED_MODULE_2__.MeshBasicMaterial({\n                color: 0xffffee,\n                emissive: 0xffffee,\n                emissiveIntensity: 2\n            });\n            const star = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(geo, mat);\n            star.position.copy(camera.position);\n            star.velocity = dir.clone().multiplyScalar(speed);\n            star.life = 1.0; // For fading\n            // Long, glowing tail\n            const tailLen = tailLength * 3 + Math.random() * 50;\n            const points = [\n                new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0),\n                dir.clone().negate().multiplyScalar(tailLen)\n            ];\n            const tailGeo = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry().setFromPoints(points);\n            const tailMat = new three__WEBPACK_IMPORTED_MODULE_2__.LineBasicMaterial({\n                color: 0xffffee,\n                transparent: true,\n                opacity: 0.9\n            });\n            const tail = new three__WEBPACK_IMPORTED_MODULE_2__.Line(tailGeo, tailMat);\n            tail.position.copy(star.position);\n            tail.life = 1.0;\n            scene.add(star);\n            scene.add(tail);\n            shootingStars.push({\n                mesh: star,\n                tail,\n                velocity: star.velocity,\n                dir,\n                fade: false\n            });\n        }\n        const animate = ()=>{\n            requestAnimationFrame(animate);\n            camera.rotation.y += (targetY - camera.rotation.y) * damping;\n            camera.translateZ(-starSpeed);\n            // Spawn shooting star occasionally, but not too frequently\n            // DEBUG: Greatly increase shooting star frequency\n            if (shootingStarCooldown <= 0 && Math.random() < 0.8) {\n                spawnShootingStar();\n                shootingStarCooldown = 1 + Math.random() * 2; // 1-3 frames\n            } else if (shootingStarCooldown > 0) {\n                shootingStarCooldown--;\n            }\n            const posArr = geometry.attributes.position.array;\n            const sqDist = starMaxDistance * starMaxDistance;\n            for(let i = 0; i < posArr.length; i += 3){\n                const dx = posArr[i] - camera.position.x;\n                const dy = posArr[i + 1] - camera.position.y;\n                const dz = posArr[i + 2] - camera.position.z;\n                if (dx * dx + dy * dy + dz * dz > sqDist) {\n                    const theta = Math.random() * 2 * Math.PI;\n                    const phi = Math.acos(2 * Math.random() - 1);\n                    posArr[i] = camera.position.x + starMaxDistance * Math.sin(phi) * Math.cos(theta);\n                    posArr[i + 1] = camera.position.y + starMaxDistance * Math.sin(phi) * Math.sin(theta);\n                    posArr[i + 2] = camera.position.z + starMaxDistance * Math.cos(phi);\n                }\n            }\n            geometry.attributes.position.needsUpdate = true;\n            const colArr = geometry.attributes.color.array;\n            for(let i = 0; i < posArr.length; i += 3){\n                const idx = i / 3;\n                const dist = Math.sqrt(posArr[i] * posArr[i] + posArr[i + 1] * posArr[i + 1] + posArr[i + 2] * posArr[i + 2]);\n                if (timers[idx] > 0) timers[idx]--;\n                else if (dist > starMaxDistance * 0.3 && Math.random() < 0.05) {\n                    timers[idx] = sparkleDuration;\n                    const c = palette[Math.floor(Math.random() * palette.length)];\n                    sparkColors[i] = c[0];\n                    sparkColors[i + 1] = c[1];\n                    sparkColors[i + 2] = c[2];\n                }\n                if (timers[idx] > 0) {\n                    colArr[i] = sparkColors[i];\n                    colArr[i + 1] = sparkColors[i + 1];\n                    colArr[i + 2] = sparkColors[i + 2];\n                } else {\n                    colArr[i] = originalColors[i];\n                    colArr[i + 1] = originalColors[i + 1];\n                    colArr[i + 2] = originalColors[i + 2];\n                }\n            }\n            geometry.attributes.color.needsUpdate = true;\n            stars.rotation.x += 0.0001;\n            stars.rotation.y += 0.00015;\n            // DEBUG: Greatly increase random shooting star spawn rate\n            if (Math.random() < 0.5) spawnShootingStar();\n            for(let i = shootingStars.length - 1; i >= 0; i--){\n                const obj = shootingStars[i];\n                obj.mesh.position.add(obj.velocity);\n                obj.tail.position.copy(obj.mesh.position);\n                // Update tail to always point opposite of velocity\n                const tailLen = tailLength * 3;\n                obj.tail.geometry.setFromPoints([\n                    new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0),\n                    obj.velocity.clone().normalize().multiplyScalar(-tailLen)\n                ]);\n                // Fade out as it gets far away\n                const dist = obj.mesh.position.distanceTo(camera.position);\n                const fadeStart = starMaxDistance * 0.5;\n                if (dist > fadeStart) {\n                    const fade = 1 - (dist - fadeStart) / (starMaxDistance - fadeStart);\n                    obj.mesh.material.opacity = Math.max(0, fade);\n                    obj.mesh.material.transparent = true;\n                    obj.tail.material.opacity = Math.max(0, fade * 0.8);\n                    obj.tail.material.transparent = true;\n                }\n                // Remove when out of bounds or fully faded\n                if (dist > starMaxDistance || obj.mesh.material.opacity <= 0.01) {\n                    scene.remove(obj.mesh);\n                    scene.remove(obj.tail);\n                    shootingStars.splice(i, 1);\n                }\n            }\n            const cam = camera.position.clone();\n            for(let i = 0; i < posArr.length; i += 3){\n                posArr[i] -= cam.x;\n                posArr[i + 1] -= cam.y;\n                posArr[i + 2] -= cam.z;\n            }\n            geometry.attributes.position.needsUpdate = true;\n            shootingStars.forEach((obj)=>{\n                obj.mesh.position.sub(cam);\n                obj.tail.position.sub(cam);\n            });\n            camera.position.set(0, 0, 0);\n            renderer.render(scene, camera);\n        };\n        animate();\n        const onResize = ()=>{\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        };\n        window.addEventListener(\"resize\", onResize);\n        return ()=>{\n            window.removeEventListener(\"scroll\", onScroll);\n            window.removeEventListener(\"resize\", onResize);\n            mount.removeChild(renderer.domElement);\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: mountRef\n    }, void 0, false, {\n        fileName: \"/home/kayosdev/Websites/Portfolio/components/Starfield.jsx\",\n        lineNumber: 209,\n        columnNumber: 10\n    }, undefined);\n};\n_s(Starfield, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = Starfield;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Starfield);\nvar _c;\n$RefreshReg$(_c, \"Starfield\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/Starfield.jsx\n"));

/***/ })

});