"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./components/Starfield.jsx":
/*!**********************************!*\
  !*** ./components/Starfield.jsx ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nvar _s = $RefreshSig$();\n\n\nconst Starfield = ()=>{\n    _s();\n    const mountRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Defensive: always use .current for refs\n        if (!mountRef.current) return;\n        const mount = mountRef.current;\n        mount.style.position = \"fixed\";\n        mount.style.top = \"0\";\n        mount.style.left = \"0\";\n        mount.style.width = \"100%\";\n        mount.style.height = \"100%\";\n        mount.style.zIndex = \"0\";\n        // Scene & Renderer\n        const scene = new three__WEBPACK_IMPORTED_MODULE_2__.Scene();\n        const camera = new three__WEBPACK_IMPORTED_MODULE_2__.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 5000);\n        camera.position.set(0, 0, 0);\n        // Virtual position to simulate infinite travel\n        let virtualCameraPos = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0);\n        const renderer = new three__WEBPACK_IMPORTED_MODULE_2__.WebGLRenderer({\n            antialias: true\n        });\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setClearColor(0x000000, 1);\n        mount.appendChild(renderer.domElement);\n        // Starfield\n        const starCount = 5000;\n        const starMaxDistance = 1000;\n        const starSpeed = 1;\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry();\n        const positions = [];\n        let starsPlaced = 0;\n        while(starsPlaced < starCount){\n            // With 1% chance, spawn a star cluster (10-30 stars)\n            if (Math.random() < 0.01 && starsPlaced < starCount - 10) {\n                const clusterTheta = Math.random() * 2 * Math.PI;\n                const clusterPhi = Math.acos(2 * Math.random() - 1);\n                const clusterR = Math.random() * starMaxDistance;\n                const clusterCenter = [\n                    clusterR * Math.sin(clusterPhi) * Math.cos(clusterTheta),\n                    clusterR * Math.sin(clusterPhi) * Math.sin(clusterTheta),\n                    clusterR * Math.cos(clusterPhi)\n                ];\n                const clusterSize = 10 + Math.floor(Math.random() * 20); // 10-30 stars\n                for(let c = 0; c < clusterSize && starsPlaced < starCount; c++){\n                    // Each star in cluster is within 30 units of center\n                    const offsetTheta = Math.random() * 2 * Math.PI;\n                    const offsetPhi = Math.acos(2 * Math.random() - 1);\n                    const offsetR = Math.random() * 30; // cluster radius\n                    positions.push(clusterCenter[0] + offsetR * Math.sin(offsetPhi) * Math.cos(offsetTheta), clusterCenter[1] + offsetR * Math.sin(offsetPhi) * Math.sin(offsetTheta), clusterCenter[2] + offsetR * Math.cos(offsetPhi));\n                    starsPlaced++;\n                }\n            } else {\n                // Normal single star\n                const theta = Math.random() * 2 * Math.PI;\n                const phi = Math.acos(2 * Math.random() - 1);\n                const r = Math.random() * starMaxDistance;\n                positions.push(r * Math.sin(phi) * Math.cos(theta), r * Math.sin(phi) * Math.sin(theta), r * Math.cos(phi));\n                starsPlaced++;\n            }\n        }\n        geometry.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_2__.Float32BufferAttribute(positions, 3));\n        const palette = [\n            [\n                1.0,\n                0.5,\n                0.5\n            ],\n            [\n                1.0,\n                0.75,\n                0.4\n            ],\n            [\n                1.0,\n                1.0,\n                0.9\n            ],\n            [\n                1.0,\n                1.0,\n                1.0\n            ],\n            [\n                0.4,\n                0.5,\n                1.0\n            ]\n        ];\n        const colors = [];\n        for(let i = 0; i < starCount; i++){\n            const c = palette[Math.floor(Math.random() * palette.length)];\n            colors.push(...c);\n        }\n        geometry.setAttribute(\"color\", new three__WEBPACK_IMPORTED_MODULE_2__.Float32BufferAttribute(colors, 3));\n        const originalColors = geometry.attributes.color.array.slice();\n        const timers = new Float32Array(starCount);\n        const sparkColors = new Float32Array(starCount * 3);\n        const sparkleDuration = 180;\n        const material = new three__WEBPACK_IMPORTED_MODULE_2__.PointsMaterial({\n            size: 3.5,\n            sizeAttenuation: true,\n            vertexColors: true\n        });\n        const stars = new three__WEBPACK_IMPORTED_MODULE_2__.Points(geometry, material);\n        scene.add(stars);\n        let targetY = 0;\n        const damping = 0.05;\n        const onScroll = ()=>{\n            const pct = window.scrollY / (document.body.scrollHeight - window.innerHeight);\n            targetY = pct * Math.PI * 2;\n        };\n        window.addEventListener(\"scroll\", onScroll);\n        // --- Shooting Stars ---\n        const tailLength = 32; // Increase for longer tails\n        const shootingStars = [];\n        let shootingStarCooldown = 0;\n        // Spawn a shooting star with a stunning glowing tail\n        function spawnShootingStar() {\n            // Pick a random direction on the sphere for the spawn location\n            const dir = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1).normalize();\n            // Ensure shooting stars never spawn close to the camera (at least 70% of max distance)\n            const minDist = starMaxDistance * 0.7;\n            const maxDist = starMaxDistance * 1.0;\n            const dist = minDist + Math.random() * (maxDist - minDist);\n            const spawnPos = dir.clone().multiplyScalar(dist);\n            // Tangential velocity: perpendicular to dir\n            let tangent = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1);\n            tangent = tangent.sub(tangent.clone().projectOnVector(dir)).normalize();\n            // Mix in a small radial component (inward or outward)\n            const tangentialSpeed = starSpeed * (2.5 + Math.random() * 2.5); // much faster\n            const radialSpeed = starSpeed * (Math.random() - 0.5) * 0.3; // more dramatic\n            const velocity = tangent.multiplyScalar(tangentialSpeed).add(dir.clone().multiplyScalar(radialSpeed));\n            // Stunning color gradient for the head\n            const vibrantColors = [\n                0xffe066,\n                0xff66cc,\n                0x66ccff,\n                0xffffff,\n                0x80ffea,\n                0xfff2cc,\n                0xffc080,\n                0x80c0ff,\n                0xff80b3\n            ];\n            const color = vibrantColors[Math.floor(Math.random() * vibrantColors.length)];\n            // Star brightness and size (make even larger and brighter)\n            const brightness = 3.5 + Math.random() * 3.5;\n            const geo = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(5 + Math.random() * 3, 48, 48); // Even larger, more segments\n            const mat = new three__WEBPACK_IMPORTED_MODULE_2__.MeshPhysicalMaterial({\n                color: color,\n                emissive: color,\n                emissiveIntensity: 2.5,\n                metalness: 0.8,\n                roughness: 0.2,\n                transmission: 0.9,\n                opacity: 0.98,\n                transparent: true,\n                clearcoat: 1.0,\n                clearcoatRoughness: 0.1\n            });\n            const star = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(geo, mat);\n            // Add a glowing sprite for extra glow\n            const spriteMap = new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader().load(\"https://raw.githubusercontent.com/mrdoob/three.js/master/examples/textures/sprites/glow.png\");\n            const spriteMaterial = new three__WEBPACK_IMPORTED_MODULE_2__.SpriteMaterial({\n                map: spriteMap,\n                color: color,\n                opacity: 0.8,\n                blending: three__WEBPACK_IMPORTED_MODULE_2__.AdditiveBlending\n            });\n            const sprite = new three__WEBPACK_IMPORTED_MODULE_2__.Sprite(spriteMaterial);\n            sprite.scale.set(30, 30, 1);\n            sprite.position.copy(star.position);\n            star.add(sprite);\n            star.position.copy(spawnPos);\n            star.velocity = velocity;\n            star.normalizedLife = 0.0;\n            star.normalizedLifetime = 80 + Math.random() * 80; // Longer, more dramatic\n            star.age = 0;\n            // --- Stunning Meteor Tail (very long, multi-color, glowing, fading, and 3D curve) ---\n            const trailSegments = tailLength * 3; // Even longer tail\n            const trailPoints = [];\n            for(let i = 0; i < trailSegments; i++){\n                // Add a 3D spiral/curve for more depth\n                const spiral = Math.sin(i * 0.25) * 8;\n                const curve = Math.cos(i * 0.15) * 4;\n                const pt = star.position.clone().add(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(spiral, curve, -i * 3));\n                trailPoints.push(pt);\n            }\n            const tailGeo = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry().setFromPoints(trailPoints);\n            // Per-vertex color (multi-color rainbow gradient)\n            const tailColors = [];\n            for(let i = 0; i < trailSegments; i++){\n                // Alpha fades out along the tail\n                const alpha = (1 - i / (trailSegments - 1)) * 0.99;\n                // Rainbow gradient\n                const rainbow = [\n                    0xffe066,\n                    0xff66cc,\n                    0x66ccff,\n                    0xffffff,\n                    0x80ffea,\n                    0xfff2cc,\n                    0xffc080,\n                    0x80c0ff,\n                    0xff80b3\n                ];\n                const gradColor = rainbow[Math.floor(i / trailSegments * rainbow.length)];\n                tailColors.push((gradColor >> 16 & 255) / 255, (gradColor >> 8 & 255) / 255, (gradColor & 255) / 255, alpha);\n            }\n            tailGeo.setAttribute(\"color\", new three__WEBPACK_IMPORTED_MODULE_2__.Float32BufferAttribute(tailColors, 4));\n            // Additive blending for glow\n            const tailMat = new three__WEBPACK_IMPORTED_MODULE_2__.LineBasicMaterial({\n                vertexColors: true,\n                transparent: true,\n                opacity: 1.0,\n                blending: three__WEBPACK_IMPORTED_MODULE_2__.AdditiveBlending\n            });\n            const tail = new three__WEBPACK_IMPORTED_MODULE_2__.Line(tailGeo, tailMat);\n            tail.position.copy(star.position);\n            // Add to scene\n            scene.add(star);\n            scene.add(tail);\n            shootingStars.push({\n                mesh: star,\n                tail,\n                velocity: star.velocity,\n                dir,\n                age: 0,\n                normalizedLifetime: star.normalizedLifetime,\n                trailPoints,\n                color,\n                brightness,\n                hasFragmented: false\n            });\n        }\n        const animate = ()=>{\n            try {\n                requestAnimationFrame(animate);\n                camera.rotation.y += (targetY - camera.rotation.y) * damping;\n                // Move the virtual camera position in the direction the camera is facing\n                const forward = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n                camera.getWorldDirection(forward);\n                virtualCameraPos.add(forward.multiplyScalar(starSpeed));\n                // Offset all stars by -virtualCameraPos (floating origin)\n                for(let i = 0; i < positions.length; i += 3){\n                    geometry.attributes.position.array[i] = positions[i] - virtualCameraPos.x;\n                    geometry.attributes.position.array[i + 1] = positions[i + 1] - virtualCameraPos.y;\n                    geometry.attributes.position.array[i + 2] = positions[i + 2] - virtualCameraPos.z;\n                }\n                geometry.attributes.position.needsUpdate = true;\n                // --- Shooting star spawning ---\n                // DEV: Make shooting stars super common (spawn every frame if cooldown allows)\n                if (shootingStarCooldown <= 0 && Math.random() < 0.1) {\n                    spawnShootingStar();\n                    shootingStarCooldown = 10 + Math.random() * 10; // Longer cooldown for perf\n                } else if (shootingStarCooldown > 0) {\n                    shootingStarCooldown--;\n                }\n                // Animate and clean up shooting stars\n                for(let i = shootingStars.length - 1; i >= 0; i--){\n                    const obj = shootingStars[i];\n                    // Curved trajectory\n                    let perp = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5);\n                    perp = perp.sub(perp.clone().projectOnVector(obj.velocity)).normalize().multiplyScalar(0.002 + Math.random() * 0.001);\n                    obj.velocity.add(perp);\n                    obj.velocity.normalize().multiplyScalar(obj.velocity.length());\n                    obj.mesh.position.add(obj.velocity);\n                    obj.tail.position.copy(obj.mesh.position);\n                    // Animate tail\n                    obj.age++;\n                    const normalizedLife = obj.age / obj.normalizedLifetime;\n                    for(let t = obj.trailPoints.length - 1; t > 0; t--){\n                        obj.trailPoints[t].lerp(obj.trailPoints[t - 1], 0.45);\n                    }\n                    obj.trailPoints[0].copy(obj.mesh.position);\n                    let tailGrow = Math.min(1, normalizedLife / 0.3);\n                    let activeSegments = Math.floor(obj.trailPoints.length * tailGrow);\n                    if (activeSegments < 2) activeSegments = 2;\n                    const visibleTrail = obj.trailPoints.slice(0, activeSegments);\n                    obj.tail.geometry.setFromPoints(visibleTrail);\n                    const tailColors = obj.tail.geometry.getAttribute(\"color\");\n                    for(let j = 0; j < visibleTrail.length; j++){\n                        let alpha = (1 - j / (visibleTrail.length - 1)) * 0.95;\n                        alpha *= 0.92 + 0.08 * Math.sin(Date.now() * 0.015 + j * 0.5);\n                        let rainbow = [\n                            0xffc080,\n                            0xffe080,\n                            0xffff80,\n                            0x80ffe6,\n                            0x80c0ff,\n                            0xc080ff\n                        ];\n                        let gradColor = rainbow[j % rainbow.length];\n                        if (normalizedLife > 0.7) alpha *= Math.max(0, 1 - (normalizedLife - 0.7 - 0.2) / 0.3);\n                        tailColors.setXYZW(j, (gradColor >> 16 & 255) / 255, (gradColor >> 8 & 255) / 255, (gradColor & 255) / 255, alpha);\n                    }\n                    tailColors.needsUpdate = true;\n                    // Animate head\n                    let headColor;\n                    if (normalizedLife < 0.5) {\n                        headColor = new three__WEBPACK_IMPORTED_MODULE_2__.Color(obj.color).lerp(new three__WEBPACK_IMPORTED_MODULE_2__.Color(0xffc080), normalizedLife * 2);\n                    } else {\n                        headColor = new three__WEBPACK_IMPORTED_MODULE_2__.Color(0xffc080).lerp(new three__WEBPACK_IMPORTED_MODULE_2__.Color(0xff4000), (normalizedLife - 0.5) * 2);\n                    }\n                    let flicker = 0.95 + 0.13 * Math.sin(Date.now() * 0.07 + Math.random() * 10);\n                    headColor.multiplyScalar(flicker);\n                    obj.mesh.material.color.copy(headColor);\n                    let scale = 1 + 2.2 * Math.sin(Math.PI * normalizedLife);\n                    let distToCam = obj.mesh.position.length();\n                    let dofBlur = distToCam < starMaxDistance * 0.7 ? 0.7 : 1.0;\n                    obj.mesh.scale.set(scale * dofBlur, scale * dofBlur, scale * dofBlur);\n                    // Sparkle burst\n                    if (normalizedLife >= 1 && !obj.hasFragmented) {\n                        for(let s = 0; s < 9; s++){\n                            const sparkleGeo = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(0.7 + Math.random() * 0.8, 8, 8);\n                            const sparkleMat = new three__WEBPACK_IMPORTED_MODULE_2__.MeshBasicMaterial({\n                                color: 0xffffff,\n                                transparent: true,\n                                opacity: 0.7,\n                                blending: three__WEBPACK_IMPORTED_MODULE_2__.AdditiveBlending\n                            });\n                            const sparkle = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(sparkleGeo, sparkleMat);\n                            sparkle.position.copy(obj.mesh.position);\n                            const sparkleVel = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5).normalize().multiplyScalar(2 + Math.random() * 2);\n                            sparkle.userData = {\n                                velocity: sparkleVel,\n                                age: 0\n                            };\n                            scene.add(sparkle);\n                            if (!window._sparkles) window._sparkles = [];\n                            window._sparkles.push(sparkle);\n                        }\n                        const fragVel = obj.velocity.clone().applyAxisAngle(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 1, 0), (Math.random() - 0.5) * 0.3);\n                        const fragStar = obj.mesh.clone();\n                        fragStar.position.copy(obj.mesh.position);\n                        fragStar.velocity = fragVel;\n                        fragStar.normalizedLife = normalizedLife;\n                        fragStar.normalizedLifetime = obj.normalizedLifetime * (0.5 + Math.random() * 0.5);\n                        fragStar.age = obj.age;\n                        fragStar.material = obj.mesh.material.clone();\n                        const fragTrailPoints = obj.trailPoints.slice();\n                        const fragTailGeo = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry().setFromPoints(fragTrailPoints);\n                        fragTailGeo.setAttribute(\"color\", obj.tail.geometry.getAttribute(\"color\").clone());\n                        const fragTailMat = obj.tail.material.clone();\n                        const fragTail = new three__WEBPACK_IMPORTED_MODULE_2__.Line(fragTailGeo, fragTailMat);\n                        fragTail.position.copy(fragStar.position);\n                        scene.add(fragStar);\n                        scene.add(fragTail);\n                        shootingStars.push({\n                            mesh: fragStar,\n                            tail: fragTail,\n                            velocity: fragStar.velocity,\n                            dir: obj.dir,\n                            age: fragStar.age,\n                            normalizedLifetime: fragStar.normalizedLifetime,\n                            trailPoints: fragTrailPoints,\n                            color: obj.color,\n                            brightness: obj.brightness,\n                            hasFragmented: true\n                        });\n                        obj.hasFragmented = true;\n                    }\n                    // Spark burst\n                    if (!obj.hasSparked && normalizedLife > 0.95 && Math.random() < 0.1) {\n                        for(let s = 0; s < 8 + Math.floor(Math.random() * 8); s++){\n                            const sparkGeo = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(0.5 + Math.random() * 0.5, 8, 8);\n                            const sparkMat = new three__WEBPACK_IMPORTED_MODULE_2__.MeshBasicMaterial({\n                                color: 0xfff6c0,\n                                transparent: true,\n                                opacity: 1,\n                                blending: three__WEBPACK_IMPORTED_MODULE_2__.AdditiveBlending\n                            });\n                            const spark = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(sparkGeo, sparkMat);\n                            spark.position.copy(obj.mesh.position);\n                            spark.sparkVel = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5).normalize().multiplyScalar(0.5 + Math.random() * 1.2);\n                            spark.sparkLife = 12 + Math.random() * 10;\n                            spark.sparkAge = 0;\n                            scene.add(spark);\n                            if (!window._starSparks) window._starSparks = [];\n                            window._starSparks.push(spark);\n                        }\n                        obj.hasSparked = true;\n                    }\n                    // Flash\n                    if (!obj.hasFlashed && normalizedLife > 0.98 && Math.random() < 0.2) {\n                        const flashGeo = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(1, 16, 16);\n                        const flashMat = new three__WEBPACK_IMPORTED_MODULE_2__.MeshBasicMaterial({\n                            color: 0xffffee,\n                            transparent: true,\n                            opacity: 0.8,\n                            blending: three__WEBPACK_IMPORTED_MODULE_2__.AdditiveBlending\n                        });\n                        const flash = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(flashGeo, flashMat);\n                        flash.position.copy(obj.mesh.position);\n                        scene.add(flash);\n                        if (!window._starFlashes) window._starFlashes = [];\n                        window._starFlashes.push({\n                            mesh: flash,\n                            age: 0\n                        });\n                        obj.hasFlashed = true;\n                    }\n                    // Fade out as it gets far away\n                    const dist = obj.mesh.position.distanceTo(camera.position);\n                    const fadeStart = starMaxDistance * 0.5;\n                    if (dist > fadeStart) {\n                        const fade = 1 - (dist - fadeStart) / (starMaxDistance - fadeStart);\n                        obj.mesh.material.opacity = Math.max(0, fade);\n                        obj.mesh.material.transparent = true;\n                        obj.tail.material.opacity = Math.max(0, fade * 0.8);\n                        obj.tail.material.transparent = true;\n                    }\n                    // Remove when out of bounds or fully faded or life ended\n                    if (normalizedLife >= 1.0 || dist > starMaxDistance || obj.mesh.material.opacity <= 0.01) {\n                        scene.remove(obj.mesh);\n                        scene.remove(obj.tail);\n                        shootingStars.splice(i, 1);\n                    }\n                }\n                // Animate sparks\n                if (window._starSparks) {\n                    for(let i = window._starSparks.length - 1; i >= 0; i--){\n                        const spark = window._starSparks[i];\n                        spark.position.add(spark.sparkVel);\n                        spark.sparkAge++;\n                        spark.material.opacity *= 0.85;\n                        if (spark.sparkAge > spark.sparkLife) {\n                            scene.remove(spark);\n                            window._starSparks.splice(i, 1);\n                        }\n                    }\n                }\n                // Animate flashes\n                if (window._starFlashes) {\n                    for(let i = window._starFlashes.length - 1; i >= 0; i--){\n                        const flash = window._starFlashes[i];\n                        flash.mesh.scale.multiplyScalar(1.15);\n                        flash.mesh.material.opacity *= 0.85;\n                        flash.age++;\n                        if (flash.age > 10) {\n                            scene.remove(flash.mesh);\n                            window._starFlashes.splice(i, 1);\n                        }\n                    }\n                }\n                // --- Starfield logic ---\n                const sqDist = starMaxDistance * starMaxDistance;\n                for(let i = 0; i < positions.length; i += 3){\n                    const dx = positions[i] - virtualCameraPos.x;\n                    const dy = positions[i + 1] - virtualCameraPos.y;\n                    const dz = positions[i + 2] - virtualCameraPos.z;\n                    if (dx * dx + dy * dy + dz * dz > sqDist) {\n                        // Place in a thick spherical shell around the virtual camera, never too close\n                        const minRadius = starMaxDistance * 0.8;\n                        const maxRadius = starMaxDistance;\n                        const r = minRadius + Math.random() * (maxRadius - minRadius);\n                        const theta = Math.random() * 2 * Math.PI;\n                        const phi = Math.acos(2 * Math.random() - 1);\n                        positions[i] = virtualCameraPos.x + r * Math.sin(phi) * Math.cos(theta);\n                        positions[i + 1] = virtualCameraPos.y + r * Math.sin(phi) * Math.sin(theta);\n                        positions[i + 2] = virtualCameraPos.z + r * Math.cos(phi);\n                    }\n                }\n                // geometry.attributes.position.needsUpdate = true; // Already set above\n                // Robust starfield color update to prevent stuck white dots\n                const colArr = geometry.attributes.color.array;\n                for(let i = 0; i < positions.length; i += 3){\n                    const idx = i / 3;\n                    const dx = positions[i] - virtualCameraPos.x;\n                    const dy = positions[i + 1] - virtualCameraPos.y;\n                    const dz = positions[i + 2] - virtualCameraPos.z;\n                    const dist = Math.sqrt(dx * dx + dy * dy + dz * dz);\n                    if (timers[idx] > 0) {\n                        timers[idx]--;\n                        if (timers[idx] === 0) {\n                            // Timer expired, restore color\n                            sparkColors[i] = originalColors[i];\n                            sparkColors[i + 1] = originalColors[i + 1];\n                            sparkColors[i + 2] = originalColors[i + 2];\n                            colArr[i] = originalColors[i];\n                            colArr[i + 1] = originalColors[i + 1];\n                            colArr[i + 2] = originalColors[i + 2];\n                        } else {\n                            colArr[i] = sparkColors[i];\n                            colArr[i + 1] = sparkColors[i + 1];\n                            colArr[i + 2] = sparkColors[i + 2];\n                        }\n                    } else if (dist > starMaxDistance * 0.3 && Math.random() < 0.05) {\n                        timers[idx] = sparkleDuration;\n                        const c = palette[Math.floor(Math.random() * palette.length)];\n                        sparkColors[i] = c[0];\n                        sparkColors[i + 1] = c[1];\n                        sparkColors[i + 2] = c[2];\n                        colArr[i] = sparkColors[i];\n                        colArr[i + 1] = sparkColors[i + 1];\n                        colArr[i + 2] = sparkColors[i + 2];\n                    } else {\n                        sparkColors[i] = originalColors[i];\n                        sparkColors[i + 1] = originalColors[i + 1];\n                        sparkColors[i + 2] = originalColors[i + 2];\n                        colArr[i] = originalColors[i];\n                        colArr[i + 1] = originalColors[i + 1];\n                        colArr[i + 2] = originalColors[i + 2];\n                    }\n                }\n                geometry.attributes.color.needsUpdate = true;\n                renderer.render(scene, camera);\n            } catch (err) {\n                // Defensive: log error with context\n                console.error(\"Starfield animation error:\", err);\n            }\n        };\n        animate(); // Start the render loop\n        const onResize = ()=>{\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        };\n        window.addEventListener(\"resize\", onResize);\n        return ()=>{\n            window.removeEventListener(\"scroll\", onScroll);\n            window.removeEventListener(\"resize\", onResize);\n            mount.removeChild(renderer.domElement);\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: mountRef\n    }, void 0, false, {\n        fileName: \"/home/kayosdev/Websites/Portfolio/components/Starfield.jsx\",\n        lineNumber: 449,\n        columnNumber: 10\n    }, undefined);\n};\n_s(Starfield, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = Starfield;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Starfield);\nvar _c;\n$RefreshReg$(_c, \"Starfield\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL1N0YXJmaWVsZC5qc3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBaUQ7QUFDbEI7QUFFL0IsTUFBTUksWUFBWTs7SUFDaEIsTUFBTUMsV0FBV0gsNkNBQU1BLENBQUM7SUFFeEJELGdEQUFTQSxDQUFDO1FBQ1IsMENBQTBDO1FBQzFDLElBQUksQ0FBQ0ksU0FBU0MsT0FBTyxFQUFFO1FBQ3ZCLE1BQU1DLFFBQVFGLFNBQVNDLE9BQU87UUFDOUJDLE1BQU1DLEtBQUssQ0FBQ0MsUUFBUSxHQUFHO1FBQ3ZCRixNQUFNQyxLQUFLLENBQUNFLEdBQUcsR0FBRztRQUNsQkgsTUFBTUMsS0FBSyxDQUFDRyxJQUFJLEdBQUc7UUFDbkJKLE1BQU1DLEtBQUssQ0FBQ0ksS0FBSyxHQUFHO1FBQ3BCTCxNQUFNQyxLQUFLLENBQUNLLE1BQU0sR0FBRztRQUNyQk4sTUFBTUMsS0FBSyxDQUFDTSxNQUFNLEdBQUc7UUFFckIsbUJBQW1CO1FBQ25CLE1BQU1DLFFBQVEsSUFBSVosd0NBQVc7UUFDN0IsTUFBTWMsU0FBUyxJQUFJZCxvREFBdUIsQ0FBQyxJQUFJZ0IsT0FBT0MsVUFBVSxHQUFHRCxPQUFPRSxXQUFXLEVBQUUsS0FBSztRQUM1RkosT0FBT1IsUUFBUSxDQUFDYSxHQUFHLENBQUMsR0FBRyxHQUFHO1FBQzFCLCtDQUErQztRQUMvQyxJQUFJQyxtQkFBbUIsSUFBSXBCLDBDQUFhLENBQUMsR0FBRyxHQUFHO1FBQy9DLE1BQU1zQixXQUFXLElBQUl0QixnREFBbUIsQ0FBQztZQUFFd0IsV0FBVztRQUFLO1FBQzNERixTQUFTRyxhQUFhLENBQUNULE9BQU9VLGdCQUFnQjtRQUM5Q0osU0FBU0ssT0FBTyxDQUFDWCxPQUFPQyxVQUFVLEVBQUVELE9BQU9FLFdBQVc7UUFDdERJLFNBQVNNLGFBQWEsQ0FBQyxVQUFVO1FBQ2pDeEIsTUFBTXlCLFdBQVcsQ0FBQ1AsU0FBU1EsVUFBVTtRQUVyQyxZQUFZO1FBQ1osTUFBTUMsWUFBWTtRQUNsQixNQUFNQyxrQkFBa0I7UUFDeEIsTUFBTUMsWUFBWTtRQUNsQixNQUFNQyxXQUFXLElBQUlsQyxpREFBb0I7UUFDekMsTUFBTW9DLFlBQVksRUFBRTtRQUNwQixJQUFJQyxjQUFjO1FBQ2xCLE1BQU9BLGNBQWNOLFVBQVc7WUFDOUIscURBQXFEO1lBQ3JELElBQUlPLEtBQUtDLE1BQU0sS0FBSyxRQUFRRixjQUFjTixZQUFZLElBQUk7Z0JBQ3hELE1BQU1TLGVBQWVGLEtBQUtDLE1BQU0sS0FBSyxJQUFJRCxLQUFLRyxFQUFFO2dCQUNoRCxNQUFNQyxhQUFhSixLQUFLSyxJQUFJLENBQUMsSUFBSUwsS0FBS0MsTUFBTSxLQUFLO2dCQUNqRCxNQUFNSyxXQUFXTixLQUFLQyxNQUFNLEtBQUtQO2dCQUNqQyxNQUFNYSxnQkFBZ0I7b0JBQ3BCRCxXQUFXTixLQUFLUSxHQUFHLENBQUNKLGNBQWNKLEtBQUtTLEdBQUcsQ0FBQ1A7b0JBQzNDSSxXQUFXTixLQUFLUSxHQUFHLENBQUNKLGNBQWNKLEtBQUtRLEdBQUcsQ0FBQ047b0JBQzNDSSxXQUFXTixLQUFLUyxHQUFHLENBQUNMO2lCQUNyQjtnQkFDRCxNQUFNTSxjQUFjLEtBQUtWLEtBQUtXLEtBQUssQ0FBQ1gsS0FBS0MsTUFBTSxLQUFLLEtBQUssY0FBYztnQkFDdkUsSUFBSyxJQUFJVyxJQUFJLEdBQUdBLElBQUlGLGVBQWVYLGNBQWNOLFdBQVdtQixJQUFLO29CQUMvRCxvREFBb0Q7b0JBQ3BELE1BQU1DLGNBQWNiLEtBQUtDLE1BQU0sS0FBSyxJQUFJRCxLQUFLRyxFQUFFO29CQUMvQyxNQUFNVyxZQUFZZCxLQUFLSyxJQUFJLENBQUMsSUFBSUwsS0FBS0MsTUFBTSxLQUFLO29CQUNoRCxNQUFNYyxVQUFVZixLQUFLQyxNQUFNLEtBQUssSUFBSSxpQkFBaUI7b0JBQ3JESCxVQUFVa0IsSUFBSSxDQUNaVCxhQUFhLENBQUMsRUFBRSxHQUFHUSxVQUFVZixLQUFLUSxHQUFHLENBQUNNLGFBQWFkLEtBQUtTLEdBQUcsQ0FBQ0ksY0FDNUROLGFBQWEsQ0FBQyxFQUFFLEdBQUdRLFVBQVVmLEtBQUtRLEdBQUcsQ0FBQ00sYUFBYWQsS0FBS1EsR0FBRyxDQUFDSyxjQUM1RE4sYUFBYSxDQUFDLEVBQUUsR0FBR1EsVUFBVWYsS0FBS1MsR0FBRyxDQUFDSztvQkFFeENmO2dCQUNGO1lBQ0YsT0FBTztnQkFDTCxxQkFBcUI7Z0JBQ3JCLE1BQU1rQixRQUFRakIsS0FBS0MsTUFBTSxLQUFLLElBQUlELEtBQUtHLEVBQUU7Z0JBQ3pDLE1BQU1lLE1BQU1sQixLQUFLSyxJQUFJLENBQUMsSUFBSUwsS0FBS0MsTUFBTSxLQUFLO2dCQUMxQyxNQUFNa0IsSUFBSW5CLEtBQUtDLE1BQU0sS0FBS1A7Z0JBQzFCSSxVQUFVa0IsSUFBSSxDQUNaRyxJQUFJbkIsS0FBS1EsR0FBRyxDQUFDVSxPQUFPbEIsS0FBS1MsR0FBRyxDQUFDUSxRQUM3QkUsSUFBSW5CLEtBQUtRLEdBQUcsQ0FBQ1UsT0FBT2xCLEtBQUtRLEdBQUcsQ0FBQ1MsUUFDN0JFLElBQUluQixLQUFLUyxHQUFHLENBQUNTO2dCQUVmbkI7WUFDRjtRQUNGO1FBQ0FILFNBQVN3QixZQUFZLENBQUMsWUFBWSxJQUFJMUQseURBQTRCLENBQUNvQyxXQUFXO1FBRTlFLE1BQU13QixVQUFVO1lBQ2Q7Z0JBQUM7Z0JBQUs7Z0JBQUs7YUFBSTtZQUNmO2dCQUFDO2dCQUFLO2dCQUFNO2FBQUk7WUFDaEI7Z0JBQUM7Z0JBQUs7Z0JBQUs7YUFBSTtZQUNmO2dCQUFDO2dCQUFLO2dCQUFLO2FBQUk7WUFDZjtnQkFBQztnQkFBSztnQkFBSzthQUFJO1NBQ2hCO1FBQ0QsTUFBTUMsU0FBUyxFQUFFO1FBQ2pCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJL0IsV0FBVytCLElBQUs7WUFDbEMsTUFBTVosSUFBSVUsT0FBTyxDQUFDdEIsS0FBS1csS0FBSyxDQUFDWCxLQUFLQyxNQUFNLEtBQUtxQixRQUFRRyxNQUFNLEVBQUU7WUFDN0RGLE9BQU9QLElBQUksSUFBSUo7UUFDakI7UUFDQWhCLFNBQVN3QixZQUFZLENBQUMsU0FBUyxJQUFJMUQseURBQTRCLENBQUM2RCxRQUFRO1FBRXhFLE1BQU1HLGlCQUFpQjlCLFNBQVMrQixVQUFVLENBQUNDLEtBQUssQ0FBQ0MsS0FBSyxDQUFDQyxLQUFLO1FBQzVELE1BQU1DLFNBQVMsSUFBSUMsYUFBYXZDO1FBQ2hDLE1BQU13QyxjQUFjLElBQUlELGFBQWF2QyxZQUFZO1FBQ2pELE1BQU15QyxrQkFBa0I7UUFFeEIsTUFBTUMsV0FBVyxJQUFJekUsaURBQW9CLENBQUM7WUFBRTJFLE1BQU07WUFBS0MsaUJBQWlCO1lBQU1DLGNBQWM7UUFBSztRQUNqRyxNQUFNQyxRQUFRLElBQUk5RSx5Q0FBWSxDQUFDa0MsVUFBVXVDO1FBQ3pDN0QsTUFBTW9FLEdBQUcsQ0FBQ0Y7UUFFVixJQUFJRyxVQUFVO1FBQ2QsTUFBTUMsVUFBVTtRQUNoQixNQUFNQyxXQUFXO1lBQ2YsTUFBTUMsTUFBTXBFLE9BQU9xRSxPQUFPLEdBQUlDLENBQUFBLFNBQVNDLElBQUksQ0FBQ0MsWUFBWSxHQUFHeEUsT0FBT0UsV0FBVztZQUM3RStELFVBQVVHLE1BQU05QyxLQUFLRyxFQUFFLEdBQUc7UUFDNUI7UUFDQXpCLE9BQU95RSxnQkFBZ0IsQ0FBQyxVQUFVTjtRQUVsQyx5QkFBeUI7UUFDekIsTUFBTU8sYUFBYSxJQUFJLDRCQUE0QjtRQUNuRCxNQUFNQyxnQkFBZ0IsRUFBRTtRQUN4QixJQUFJQyx1QkFBdUI7UUFDM0IscURBQXFEO1FBQ3JELFNBQVNDO1lBQ1AsK0RBQStEO1lBQy9ELE1BQU1DLE1BQU0sSUFBSTlGLDBDQUFhLENBQUNzQyxLQUFLQyxNQUFNLEtBQUcsSUFBRSxHQUFHRCxLQUFLQyxNQUFNLEtBQUcsSUFBRSxHQUFHRCxLQUFLQyxNQUFNLEtBQUcsSUFBRSxHQUFHd0QsU0FBUztZQUNoRyx1RkFBdUY7WUFDdkYsTUFBTUMsVUFBVWhFLGtCQUFrQjtZQUNsQyxNQUFNaUUsVUFBVWpFLGtCQUFrQjtZQUNsQyxNQUFNa0UsT0FBT0YsVUFBVTFELEtBQUtDLE1BQU0sS0FBTTBELENBQUFBLFVBQVVELE9BQU07WUFDeEQsTUFBTUcsV0FBV0wsSUFBSU0sS0FBSyxHQUFHQyxjQUFjLENBQUNIO1lBQzVDLDRDQUE0QztZQUM1QyxJQUFJSSxVQUFVLElBQUl0RywwQ0FBYSxDQUFDc0MsS0FBS0MsTUFBTSxLQUFHLElBQUUsR0FBR0QsS0FBS0MsTUFBTSxLQUFHLElBQUUsR0FBR0QsS0FBS0MsTUFBTSxLQUFHLElBQUU7WUFDdEYrRCxVQUFVQSxRQUFRQyxHQUFHLENBQUNELFFBQVFGLEtBQUssR0FBR0ksZUFBZSxDQUFDVixNQUFNQyxTQUFTO1lBQ3JFLHNEQUFzRDtZQUN0RCxNQUFNVSxrQkFBa0J4RSxZQUFhLE9BQU1LLEtBQUtDLE1BQU0sS0FBSyxHQUFFLEdBQUksY0FBYztZQUMvRSxNQUFNbUUsY0FBY3pFLFlBQWFLLENBQUFBLEtBQUtDLE1BQU0sS0FBSyxHQUFFLElBQUssS0FBSyxnQkFBZ0I7WUFDN0UsTUFBTW9FLFdBQVdMLFFBQVFELGNBQWMsQ0FBQ0ksaUJBQWlCekIsR0FBRyxDQUFDYyxJQUFJTSxLQUFLLEdBQUdDLGNBQWMsQ0FBQ0s7WUFFeEYsdUNBQXVDO1lBQ3ZDLE1BQU1FLGdCQUFnQjtnQkFBQztnQkFBVTtnQkFBVTtnQkFBVTtnQkFBVTtnQkFBVTtnQkFBVTtnQkFBVTtnQkFBVTthQUFTO1lBQ2hILE1BQU0xQyxRQUFRMEMsYUFBYSxDQUFDdEUsS0FBS1csS0FBSyxDQUFDWCxLQUFLQyxNQUFNLEtBQUdxRSxjQUFjN0MsTUFBTSxFQUFFO1lBQzNFLDJEQUEyRDtZQUMzRCxNQUFNOEMsYUFBYSxNQUFNdkUsS0FBS0MsTUFBTSxLQUFHO1lBQ3ZDLE1BQU11RSxNQUFNLElBQUk5RyxpREFBb0IsQ0FBQyxJQUFJc0MsS0FBS0MsTUFBTSxLQUFHLEdBQUcsSUFBSSxLQUFLLDZCQUE2QjtZQUNoRyxNQUFNeUUsTUFBTSxJQUFJaEgsdURBQTBCLENBQUM7Z0JBQ3pDa0UsT0FBT0E7Z0JBQ1BnRCxVQUFVaEQ7Z0JBQ1ZpRCxtQkFBbUI7Z0JBQ25CQyxXQUFXO2dCQUNYQyxXQUFXO2dCQUNYQyxjQUFjO2dCQUNkQyxTQUFTO2dCQUNUQyxhQUFhO2dCQUNiQyxXQUFXO2dCQUNYQyxvQkFBb0I7WUFDdEI7WUFDQSxNQUFNQyxPQUFPLElBQUkzSCx1Q0FBVSxDQUFDOEcsS0FBS0U7WUFDakMsc0NBQXNDO1lBQ3RDLE1BQU1hLFlBQVksSUFBSTdILGdEQUFtQixHQUFHK0gsSUFBSSxDQUFDO1lBQ2pELE1BQU1DLGlCQUFpQixJQUFJaEksaURBQW9CLENBQUM7Z0JBQUVrSSxLQUFLTDtnQkFBVzNELE9BQU9BO2dCQUFPcUQsU0FBUztnQkFBS1ksVUFBVW5JLG1EQUFzQjtZQUFDO1lBQy9ILE1BQU1xSSxTQUFTLElBQUlySSx5Q0FBWSxDQUFDZ0k7WUFDaENLLE9BQU9FLEtBQUssQ0FBQ3BILEdBQUcsQ0FBQyxJQUFJLElBQUk7WUFDekJrSCxPQUFPL0gsUUFBUSxDQUFDa0ksSUFBSSxDQUFDYixLQUFLckgsUUFBUTtZQUNsQ3FILEtBQUszQyxHQUFHLENBQUNxRDtZQUNUVixLQUFLckgsUUFBUSxDQUFDa0ksSUFBSSxDQUFDckM7WUFDbkJ3QixLQUFLaEIsUUFBUSxHQUFHQTtZQUNoQmdCLEtBQUtjLGNBQWMsR0FBRztZQUN0QmQsS0FBS2Usa0JBQWtCLEdBQUcsS0FBS3BHLEtBQUtDLE1BQU0sS0FBSyxJQUFJLHdCQUF3QjtZQUMzRW9GLEtBQUtnQixHQUFHLEdBQUc7WUFDWCx1RkFBdUY7WUFDdkYsTUFBTUMsZ0JBQWdCbEQsYUFBYSxHQUFHLG1CQUFtQjtZQUN6RCxNQUFNbUQsY0FBYyxFQUFFO1lBQ3RCLElBQUssSUFBSS9FLElBQUksR0FBR0EsSUFBSThFLGVBQWU5RSxJQUFLO2dCQUN0Qyx1Q0FBdUM7Z0JBQ3ZDLE1BQU1nRixTQUFTeEcsS0FBS1EsR0FBRyxDQUFDZ0IsSUFBSSxRQUFRO2dCQUNwQyxNQUFNaUYsUUFBUXpHLEtBQUtTLEdBQUcsQ0FBQ2UsSUFBSSxRQUFRO2dCQUNuQyxNQUFNa0YsS0FBS3JCLEtBQUtySCxRQUFRLENBQUM4RixLQUFLLEdBQUdwQixHQUFHLENBQUMsSUFBSWhGLDBDQUFhLENBQUM4SSxRQUFRQyxPQUFPLENBQUNqRixJQUFJO2dCQUMzRStFLFlBQVl2RixJQUFJLENBQUMwRjtZQUNuQjtZQUNBLE1BQU1DLFVBQVUsSUFBSWpKLGlEQUFvQixHQUFHa0osYUFBYSxDQUFDTDtZQUN6RCxrREFBa0Q7WUFDbEQsTUFBTU0sYUFBYSxFQUFFO1lBQ3JCLElBQUssSUFBSXJGLElBQUksR0FBR0EsSUFBSThFLGVBQWU5RSxJQUFLO2dCQUN0QyxpQ0FBaUM7Z0JBQ2pDLE1BQU1zRixRQUFRLENBQUMsSUFBSXRGLElBQUs4RSxDQUFBQSxnQkFBZ0IsRUFBQyxJQUFLO2dCQUM5QyxtQkFBbUI7Z0JBQ25CLE1BQU1TLFVBQVU7b0JBQUM7b0JBQVU7b0JBQVU7b0JBQVU7b0JBQVU7b0JBQVU7b0JBQVU7b0JBQVU7b0JBQVU7aUJBQVM7Z0JBQzFHLE1BQU1DLFlBQVlELE9BQU8sQ0FBQy9HLEtBQUtXLEtBQUssQ0FBQyxJQUFLMkYsZ0JBQWlCUyxRQUFRdEYsTUFBTSxFQUFFO2dCQUMzRW9GLFdBQVc3RixJQUFJLENBQUMsQ0FBQ2dHLGFBQWEsS0FBSyxHQUFFLElBQUssS0FBSyxDQUFDQSxhQUFhLElBQUksR0FBRSxJQUFLLEtBQUssQ0FBQ0EsWUFBWSxHQUFFLElBQUssS0FBS0Y7WUFDeEc7WUFDQUgsUUFBUXZGLFlBQVksQ0FBQyxTQUFTLElBQUkxRCx5REFBNEIsQ0FBQ21KLFlBQVk7WUFDM0UsNkJBQTZCO1lBQzdCLE1BQU1JLFVBQVUsSUFBSXZKLG9EQUF1QixDQUFDO2dCQUFFNkUsY0FBYztnQkFBTTJDLGFBQWE7Z0JBQU1ELFNBQVM7Z0JBQUtZLFVBQVVuSSxtREFBc0I7WUFBQztZQUNwSSxNQUFNeUosT0FBTyxJQUFJekosdUNBQVUsQ0FBQ2lKLFNBQVNNO1lBQ3JDRSxLQUFLbkosUUFBUSxDQUFDa0ksSUFBSSxDQUFDYixLQUFLckgsUUFBUTtZQUNoQyxlQUFlO1lBQ2ZNLE1BQU1vRSxHQUFHLENBQUMyQztZQUNWL0csTUFBTW9FLEdBQUcsQ0FBQ3lFO1lBQ1Y5RCxjQUFjckMsSUFBSSxDQUFDO2dCQUFFcUcsTUFBTWhDO2dCQUFNOEI7Z0JBQU05QyxVQUFVZ0IsS0FBS2hCLFFBQVE7Z0JBQUViO2dCQUFLNkMsS0FBSztnQkFBR0Qsb0JBQW9CZixLQUFLZSxrQkFBa0I7Z0JBQUVHO2dCQUFhM0U7Z0JBQU8yQztnQkFBWStDLGVBQWU7WUFBTTtRQUNqTDtRQUVBLE1BQU1DLFVBQVU7WUFDZCxJQUFJO2dCQUNKQyxzQkFBc0JEO2dCQUN0Qi9JLE9BQU9pSixRQUFRLENBQUNDLENBQUMsSUFBSSxDQUFDL0UsVUFBVW5FLE9BQU9pSixRQUFRLENBQUNDLENBQUMsSUFBSTlFO2dCQUNyRCx5RUFBeUU7Z0JBQ3pFLE1BQU0rRSxVQUFVLElBQUlqSywwQ0FBYTtnQkFDakNjLE9BQU9vSixpQkFBaUIsQ0FBQ0Q7Z0JBQ3pCN0ksaUJBQWlCNEQsR0FBRyxDQUFDaUYsUUFBUTVELGNBQWMsQ0FBQ3BFO2dCQUM1QywwREFBMEQ7Z0JBQzFELElBQUssSUFBSTZCLElBQUksR0FBR0EsSUFBSTFCLFVBQVUyQixNQUFNLEVBQUVELEtBQUssRUFBRztvQkFDNUM1QixTQUFTK0IsVUFBVSxDQUFDM0QsUUFBUSxDQUFDNkQsS0FBSyxDQUFDTCxFQUFFLEdBQUcxQixTQUFTLENBQUMwQixFQUFFLEdBQUcxQyxpQkFBaUIrSSxDQUFDO29CQUN6RWpJLFNBQVMrQixVQUFVLENBQUMzRCxRQUFRLENBQUM2RCxLQUFLLENBQUNMLElBQUUsRUFBRSxHQUFHMUIsU0FBUyxDQUFDMEIsSUFBRSxFQUFFLEdBQUcxQyxpQkFBaUI0SSxDQUFDO29CQUM3RTlILFNBQVMrQixVQUFVLENBQUMzRCxRQUFRLENBQUM2RCxLQUFLLENBQUNMLElBQUUsRUFBRSxHQUFHMUIsU0FBUyxDQUFDMEIsSUFBRSxFQUFFLEdBQUcxQyxpQkFBaUJnSixDQUFDO2dCQUMvRTtnQkFDQWxJLFNBQVMrQixVQUFVLENBQUMzRCxRQUFRLENBQUMrSixXQUFXLEdBQUc7Z0JBRTNDLGlDQUFpQztnQkFDakMsK0VBQStFO2dCQUMvRSxJQUFJekUsd0JBQXdCLEtBQUt0RCxLQUFLQyxNQUFNLEtBQUssS0FBSztvQkFDcERzRDtvQkFDQUQsdUJBQXVCLEtBQUt0RCxLQUFLQyxNQUFNLEtBQUssSUFBSSwyQkFBMkI7Z0JBQzdFLE9BQU8sSUFBSXFELHVCQUF1QixHQUFHO29CQUNuQ0E7Z0JBQ0Y7Z0JBQ0Esc0NBQXNDO2dCQUN0QyxJQUFLLElBQUk5QixJQUFJNkIsY0FBYzVCLE1BQU0sR0FBRyxHQUFHRCxLQUFLLEdBQUdBLElBQUs7b0JBQ2xELE1BQU13RyxNQUFNM0UsYUFBYSxDQUFDN0IsRUFBRTtvQkFDNUIsb0JBQW9CO29CQUNwQixJQUFJeUcsT0FBTyxJQUFJdkssMENBQWEsQ0FBQ3NDLEtBQUtDLE1BQU0sS0FBRyxLQUFLRCxLQUFLQyxNQUFNLEtBQUcsS0FBS0QsS0FBS0MsTUFBTSxLQUFHO29CQUNqRmdJLE9BQU9BLEtBQUtoRSxHQUFHLENBQUNnRSxLQUFLbkUsS0FBSyxHQUFHSSxlQUFlLENBQUM4RCxJQUFJM0QsUUFBUSxHQUFHWixTQUFTLEdBQUdNLGNBQWMsQ0FBQyxRQUFRL0QsS0FBS0MsTUFBTSxLQUFHO29CQUM3RytILElBQUkzRCxRQUFRLENBQUMzQixHQUFHLENBQUN1RjtvQkFDakJELElBQUkzRCxRQUFRLENBQUNaLFNBQVMsR0FBR00sY0FBYyxDQUFDaUUsSUFBSTNELFFBQVEsQ0FBQzVDLE1BQU07b0JBQzNEdUcsSUFBSVgsSUFBSSxDQUFDckosUUFBUSxDQUFDMEUsR0FBRyxDQUFDc0YsSUFBSTNELFFBQVE7b0JBQ2xDMkQsSUFBSWIsSUFBSSxDQUFDbkosUUFBUSxDQUFDa0ksSUFBSSxDQUFDOEIsSUFBSVgsSUFBSSxDQUFDckosUUFBUTtvQkFDeEMsZUFBZTtvQkFDZmdLLElBQUkzQixHQUFHO29CQUNQLE1BQU1GLGlCQUFpQjZCLElBQUkzQixHQUFHLEdBQUcyQixJQUFJNUIsa0JBQWtCO29CQUN2RCxJQUFLLElBQUk4QixJQUFJRixJQUFJekIsV0FBVyxDQUFDOUUsTUFBTSxHQUFHLEdBQUd5RyxJQUFJLEdBQUdBLElBQUs7d0JBQ25ERixJQUFJekIsV0FBVyxDQUFDMkIsRUFBRSxDQUFDQyxJQUFJLENBQUNILElBQUl6QixXQUFXLENBQUMyQixJQUFFLEVBQUUsRUFBRTtvQkFDaEQ7b0JBQ0FGLElBQUl6QixXQUFXLENBQUMsRUFBRSxDQUFDTCxJQUFJLENBQUM4QixJQUFJWCxJQUFJLENBQUNySixRQUFRO29CQUN6QyxJQUFJb0ssV0FBV3BJLEtBQUtxSSxHQUFHLENBQUMsR0FBR2xDLGlCQUFpQjtvQkFDNUMsSUFBSW1DLGlCQUFpQnRJLEtBQUtXLEtBQUssQ0FBQ3FILElBQUl6QixXQUFXLENBQUM5RSxNQUFNLEdBQUcyRztvQkFDekQsSUFBSUUsaUJBQWlCLEdBQUdBLGlCQUFpQjtvQkFDekMsTUFBTUMsZUFBZVAsSUFBSXpCLFdBQVcsQ0FBQ3pFLEtBQUssQ0FBQyxHQUFHd0c7b0JBQzlDTixJQUFJYixJQUFJLENBQUN2SCxRQUFRLENBQUNnSCxhQUFhLENBQUMyQjtvQkFDaEMsTUFBTTFCLGFBQWFtQixJQUFJYixJQUFJLENBQUN2SCxRQUFRLENBQUM0SSxZQUFZLENBQUM7b0JBQ2xELElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRixhQUFhOUcsTUFBTSxFQUFFZ0gsSUFBSzt3QkFDNUMsSUFBSTNCLFFBQVEsQ0FBQyxJQUFJMkIsSUFBS0YsQ0FBQUEsYUFBYTlHLE1BQU0sR0FBRyxFQUFDLElBQUs7d0JBQ2xEcUYsU0FBUyxPQUFPLE9BQU85RyxLQUFLUSxHQUFHLENBQUNrSSxLQUFLQyxHQUFHLEtBQUcsUUFBUUYsSUFBRTt3QkFDckQsSUFBSTFCLFVBQVU7NEJBQUM7NEJBQVU7NEJBQVU7NEJBQVU7NEJBQVU7NEJBQVU7eUJBQVM7d0JBQzFFLElBQUlDLFlBQVlELE9BQU8sQ0FBQzBCLElBQUkxQixRQUFRdEYsTUFBTSxDQUFDO3dCQUMzQyxJQUFJMEUsaUJBQWlCLEtBQUtXLFNBQVM5RyxLQUFLNEksR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDekMsaUJBQWlCLE1BQU0sR0FBRSxJQUFLO3dCQUNsRlUsV0FBV2dDLE9BQU8sQ0FBQ0osR0FBRyxDQUFDekIsYUFBYSxLQUFLLEdBQUUsSUFBSyxLQUFLLENBQUNBLGFBQWEsSUFBSSxHQUFFLElBQUssS0FBSyxDQUFDQSxZQUFZLEdBQUUsSUFBSyxLQUFLRjtvQkFDOUc7b0JBQ0FELFdBQVdrQixXQUFXLEdBQUc7b0JBQ3pCLGVBQWU7b0JBQ2YsSUFBSWU7b0JBQ0osSUFBSTNDLGlCQUFpQixLQUFLO3dCQUN4QjJDLFlBQVksSUFBSXBMLHdDQUFXLENBQUNzSyxJQUFJcEcsS0FBSyxFQUFFdUcsSUFBSSxDQUFDLElBQUl6Syx3Q0FBVyxDQUFDLFdBQVd5SSxpQkFBZTtvQkFDeEYsT0FBTzt3QkFDTDJDLFlBQVksSUFBSXBMLHdDQUFXLENBQUMsVUFBVXlLLElBQUksQ0FBQyxJQUFJekssd0NBQVcsQ0FBQyxXQUFXLENBQUN5SSxpQkFBZSxHQUFFLElBQUc7b0JBQzdGO29CQUNBLElBQUk2QyxVQUFVLE9BQU8sT0FBT2hKLEtBQUtRLEdBQUcsQ0FBQ2tJLEtBQUtDLEdBQUcsS0FBRyxPQUFPM0ksS0FBS0MsTUFBTSxLQUFHO29CQUNyRTZJLFVBQVUvRSxjQUFjLENBQUNpRjtvQkFDekJoQixJQUFJWCxJQUFJLENBQUNsRixRQUFRLENBQUNQLEtBQUssQ0FBQ3NFLElBQUksQ0FBQzRDO29CQUM3QixJQUFJN0MsUUFBUSxJQUFJLE1BQU1qRyxLQUFLUSxHQUFHLENBQUNSLEtBQUtHLEVBQUUsR0FBR2dHO29CQUN6QyxJQUFJOEMsWUFBWWpCLElBQUlYLElBQUksQ0FBQ3JKLFFBQVEsQ0FBQ3lELE1BQU07b0JBQ3hDLElBQUl5SCxVQUFVRCxZQUFZdkosa0JBQWtCLE1BQU0sTUFBTTtvQkFDeERzSSxJQUFJWCxJQUFJLENBQUNwQixLQUFLLENBQUNwSCxHQUFHLENBQUNvSCxRQUFRaUQsU0FBU2pELFFBQVFpRCxTQUFTakQsUUFBUWlEO29CQUM3RCxnQkFBZ0I7b0JBQ2hCLElBQUkvQyxrQkFBa0IsS0FBSyxDQUFDNkIsSUFBSVYsYUFBYSxFQUFFO3dCQUM3QyxJQUFLLElBQUk2QixJQUFJLEdBQUdBLElBQUksR0FBR0EsSUFBSzs0QkFDMUIsTUFBTUMsYUFBYSxJQUFJMUwsaURBQW9CLENBQUMsTUFBTXNDLEtBQUtDLE1BQU0sS0FBRyxLQUFLLEdBQUc7NEJBQ3hFLE1BQU1vSixhQUFhLElBQUkzTCxvREFBdUIsQ0FBQztnQ0FBRWtFLE9BQU87Z0NBQVVzRCxhQUFhO2dDQUFNRCxTQUFTO2dDQUFLWSxVQUFVbkksbURBQXNCOzRCQUFDOzRCQUNwSSxNQUFNNkwsVUFBVSxJQUFJN0wsdUNBQVUsQ0FBQzBMLFlBQVlDOzRCQUMzQ0UsUUFBUXZMLFFBQVEsQ0FBQ2tJLElBQUksQ0FBQzhCLElBQUlYLElBQUksQ0FBQ3JKLFFBQVE7NEJBQ3ZDLE1BQU13TCxhQUFhLElBQUk5TCwwQ0FBYSxDQUFDc0MsS0FBS0MsTUFBTSxLQUFHLEtBQUtELEtBQUtDLE1BQU0sS0FBRyxLQUFLRCxLQUFLQyxNQUFNLEtBQUcsS0FBS3dELFNBQVMsR0FBR00sY0FBYyxDQUFDLElBQUUvRCxLQUFLQyxNQUFNLEtBQUc7NEJBQ3pJc0osUUFBUUUsUUFBUSxHQUFHO2dDQUFFcEYsVUFBVW1GO2dDQUFZbkQsS0FBSzs0QkFBRTs0QkFDbEQvSCxNQUFNb0UsR0FBRyxDQUFDNkc7NEJBQ1YsSUFBSSxDQUFDN0ssT0FBT2dMLFNBQVMsRUFBRWhMLE9BQU9nTCxTQUFTLEdBQUcsRUFBRTs0QkFDNUNoTCxPQUFPZ0wsU0FBUyxDQUFDMUksSUFBSSxDQUFDdUk7d0JBQ3hCO3dCQUNBLE1BQU1JLFVBQVUzQixJQUFJM0QsUUFBUSxDQUFDUCxLQUFLLEdBQUc4RixjQUFjLENBQUMsSUFBSWxNLDBDQUFhLENBQUMsR0FBRSxHQUFFLElBQUksQ0FBQ3NDLEtBQUtDLE1BQU0sS0FBRyxHQUFFLElBQUc7d0JBQ2xHLE1BQU00SixXQUFXN0IsSUFBSVgsSUFBSSxDQUFDdkQsS0FBSzt3QkFDL0IrRixTQUFTN0wsUUFBUSxDQUFDa0ksSUFBSSxDQUFDOEIsSUFBSVgsSUFBSSxDQUFDckosUUFBUTt3QkFDeEM2TCxTQUFTeEYsUUFBUSxHQUFHc0Y7d0JBQ3BCRSxTQUFTMUQsY0FBYyxHQUFHQTt3QkFDMUIwRCxTQUFTekQsa0JBQWtCLEdBQUc0QixJQUFJNUIsa0JBQWtCLEdBQUksT0FBTXBHLEtBQUtDLE1BQU0sS0FBRyxHQUFFO3dCQUM5RTRKLFNBQVN4RCxHQUFHLEdBQUcyQixJQUFJM0IsR0FBRzt3QkFDdEJ3RCxTQUFTMUgsUUFBUSxHQUFHNkYsSUFBSVgsSUFBSSxDQUFDbEYsUUFBUSxDQUFDMkIsS0FBSzt3QkFDM0MsTUFBTWdHLGtCQUFrQjlCLElBQUl6QixXQUFXLENBQUN6RSxLQUFLO3dCQUM3QyxNQUFNaUksY0FBYyxJQUFJck0saURBQW9CLEdBQUdrSixhQUFhLENBQUNrRDt3QkFDN0RDLFlBQVkzSSxZQUFZLENBQUMsU0FBUzRHLElBQUliLElBQUksQ0FBQ3ZILFFBQVEsQ0FBQzRJLFlBQVksQ0FBQyxTQUFTMUUsS0FBSzt3QkFDL0UsTUFBTWtHLGNBQWNoQyxJQUFJYixJQUFJLENBQUNoRixRQUFRLENBQUMyQixLQUFLO3dCQUMzQyxNQUFNbUcsV0FBVyxJQUFJdk0sdUNBQVUsQ0FBQ3FNLGFBQWFDO3dCQUM3Q0MsU0FBU2pNLFFBQVEsQ0FBQ2tJLElBQUksQ0FBQzJELFNBQVM3TCxRQUFRO3dCQUN4Q00sTUFBTW9FLEdBQUcsQ0FBQ21IO3dCQUNWdkwsTUFBTW9FLEdBQUcsQ0FBQ3VIO3dCQUNWNUcsY0FBY3JDLElBQUksQ0FBQzs0QkFBRXFHLE1BQU13Qzs0QkFBVTFDLE1BQU04Qzs0QkFBVTVGLFVBQVV3RixTQUFTeEYsUUFBUTs0QkFBRWIsS0FBS3dFLElBQUl4RSxHQUFHOzRCQUFFNkMsS0FBS3dELFNBQVN4RCxHQUFHOzRCQUFFRCxvQkFBb0J5RCxTQUFTekQsa0JBQWtCOzRCQUFFRyxhQUFhdUQ7NEJBQWlCbEksT0FBT29HLElBQUlwRyxLQUFLOzRCQUFFMkMsWUFBWXlELElBQUl6RCxVQUFVOzRCQUFFK0MsZUFBZTt3QkFBSzt3QkFDcFFVLElBQUlWLGFBQWEsR0FBRztvQkFDdEI7b0JBQ0EsY0FBYztvQkFDZCxJQUFJLENBQUNVLElBQUlrQyxVQUFVLElBQUkvRCxpQkFBaUIsUUFBUW5HLEtBQUtDLE1BQU0sS0FBSyxLQUFLO3dCQUNuRSxJQUFLLElBQUlrSixJQUFJLEdBQUdBLElBQUksSUFBSW5KLEtBQUtXLEtBQUssQ0FBQ1gsS0FBS0MsTUFBTSxLQUFHLElBQUlrSixJQUFLOzRCQUN4RCxNQUFNZ0IsV0FBVyxJQUFJek0saURBQW9CLENBQUMsTUFBTXNDLEtBQUtDLE1BQU0sS0FBRyxLQUFLLEdBQUc7NEJBQ3RFLE1BQU1tSyxXQUFXLElBQUkxTSxvREFBdUIsQ0FBQztnQ0FBRWtFLE9BQU87Z0NBQVVzRCxhQUFhO2dDQUFNRCxTQUFTO2dDQUFHWSxVQUFVbkksbURBQXNCOzRCQUFDOzRCQUNoSSxNQUFNMk0sUUFBUSxJQUFJM00sdUNBQVUsQ0FBQ3lNLFVBQVVDOzRCQUN2Q0MsTUFBTXJNLFFBQVEsQ0FBQ2tJLElBQUksQ0FBQzhCLElBQUlYLElBQUksQ0FBQ3JKLFFBQVE7NEJBQ3JDcU0sTUFBTUMsUUFBUSxHQUFHLElBQUk1TSwwQ0FBYSxDQUFDc0MsS0FBS0MsTUFBTSxLQUFHLEtBQUtELEtBQUtDLE1BQU0sS0FBRyxLQUFLRCxLQUFLQyxNQUFNLEtBQUcsS0FBS3dELFNBQVMsR0FBR00sY0FBYyxDQUFDLE1BQU0vRCxLQUFLQyxNQUFNLEtBQUc7NEJBQzNJb0ssTUFBTUUsU0FBUyxHQUFHLEtBQUt2SyxLQUFLQyxNQUFNLEtBQUc7NEJBQ3JDb0ssTUFBTUcsUUFBUSxHQUFHOzRCQUNqQmxNLE1BQU1vRSxHQUFHLENBQUMySDs0QkFDVixJQUFJLENBQUMzTCxPQUFPK0wsV0FBVyxFQUFFL0wsT0FBTytMLFdBQVcsR0FBRyxFQUFFOzRCQUNoRC9MLE9BQU8rTCxXQUFXLENBQUN6SixJQUFJLENBQUNxSjt3QkFDMUI7d0JBQ0FyQyxJQUFJa0MsVUFBVSxHQUFHO29CQUNuQjtvQkFDQSxRQUFRO29CQUNSLElBQUksQ0FBQ2xDLElBQUkwQyxVQUFVLElBQUl2RSxpQkFBaUIsUUFBUW5HLEtBQUtDLE1BQU0sS0FBSyxLQUFLO3dCQUNuRSxNQUFNMEssV0FBVyxJQUFJak4saURBQW9CLENBQUMsR0FBRyxJQUFJO3dCQUNqRCxNQUFNa04sV0FBVyxJQUFJbE4sb0RBQXVCLENBQUM7NEJBQUVrRSxPQUFPOzRCQUFVc0QsYUFBYTs0QkFBTUQsU0FBUzs0QkFBS1ksVUFBVW5JLG1EQUFzQjt3QkFBQzt3QkFDbEksTUFBTW1OLFFBQVEsSUFBSW5OLHVDQUFVLENBQUNpTixVQUFVQzt3QkFDdkNDLE1BQU03TSxRQUFRLENBQUNrSSxJQUFJLENBQUM4QixJQUFJWCxJQUFJLENBQUNySixRQUFRO3dCQUNyQ00sTUFBTW9FLEdBQUcsQ0FBQ21JO3dCQUNWLElBQUksQ0FBQ25NLE9BQU9vTSxZQUFZLEVBQUVwTSxPQUFPb00sWUFBWSxHQUFHLEVBQUU7d0JBQ2xEcE0sT0FBT29NLFlBQVksQ0FBQzlKLElBQUksQ0FBQzs0QkFBRXFHLE1BQU13RDs0QkFBT3hFLEtBQUs7d0JBQUU7d0JBQy9DMkIsSUFBSTBDLFVBQVUsR0FBRztvQkFDbkI7b0JBQ0EsK0JBQStCO29CQUMvQixNQUFNOUcsT0FBT29FLElBQUlYLElBQUksQ0FBQ3JKLFFBQVEsQ0FBQytNLFVBQVUsQ0FBQ3ZNLE9BQU9SLFFBQVE7b0JBQ3pELE1BQU1nTixZQUFZdEwsa0JBQWtCO29CQUNwQyxJQUFJa0UsT0FBT29ILFdBQVc7d0JBQ3BCLE1BQU1DLE9BQU8sSUFBSSxDQUFDckgsT0FBT29ILFNBQVEsSUFBTXRMLENBQUFBLGtCQUFrQnNMLFNBQVE7d0JBQ2pFaEQsSUFBSVgsSUFBSSxDQUFDbEYsUUFBUSxDQUFDOEMsT0FBTyxHQUFHakYsS0FBSzRJLEdBQUcsQ0FBQyxHQUFHcUM7d0JBQ3hDakQsSUFBSVgsSUFBSSxDQUFDbEYsUUFBUSxDQUFDK0MsV0FBVyxHQUFHO3dCQUNoQzhDLElBQUliLElBQUksQ0FBQ2hGLFFBQVEsQ0FBQzhDLE9BQU8sR0FBR2pGLEtBQUs0SSxHQUFHLENBQUMsR0FBR3FDLE9BQU87d0JBQy9DakQsSUFBSWIsSUFBSSxDQUFDaEYsUUFBUSxDQUFDK0MsV0FBVyxHQUFHO29CQUNsQztvQkFDQSx5REFBeUQ7b0JBQ3pELElBQUlpQixrQkFBa0IsT0FBT3ZDLE9BQU9sRSxtQkFBbUJzSSxJQUFJWCxJQUFJLENBQUNsRixRQUFRLENBQUM4QyxPQUFPLElBQUksTUFBTTt3QkFDeEYzRyxNQUFNNE0sTUFBTSxDQUFDbEQsSUFBSVgsSUFBSTt3QkFDckIvSSxNQUFNNE0sTUFBTSxDQUFDbEQsSUFBSWIsSUFBSTt3QkFDckI5RCxjQUFjOEgsTUFBTSxDQUFDM0osR0FBRztvQkFDMUI7Z0JBQ0Y7Z0JBQ0EsaUJBQWlCO2dCQUNqQixJQUFJOUMsT0FBTytMLFdBQVcsRUFBRTtvQkFDdEIsSUFBSyxJQUFJakosSUFBSTlDLE9BQU8rTCxXQUFXLENBQUNoSixNQUFNLEdBQUcsR0FBR0QsS0FBSyxHQUFHQSxJQUFLO3dCQUN2RCxNQUFNNkksUUFBUTNMLE9BQU8rTCxXQUFXLENBQUNqSixFQUFFO3dCQUNuQzZJLE1BQU1yTSxRQUFRLENBQUMwRSxHQUFHLENBQUMySCxNQUFNQyxRQUFRO3dCQUNqQ0QsTUFBTUcsUUFBUTt3QkFDZEgsTUFBTWxJLFFBQVEsQ0FBQzhDLE9BQU8sSUFBSTt3QkFDMUIsSUFBSW9GLE1BQU1HLFFBQVEsR0FBR0gsTUFBTUUsU0FBUyxFQUFFOzRCQUNwQ2pNLE1BQU00TSxNQUFNLENBQUNiOzRCQUNiM0wsT0FBTytMLFdBQVcsQ0FBQ1UsTUFBTSxDQUFDM0osR0FBRzt3QkFDL0I7b0JBQ0Y7Z0JBQ0Y7Z0JBQ0Esa0JBQWtCO2dCQUNsQixJQUFJOUMsT0FBT29NLFlBQVksRUFBRTtvQkFDdkIsSUFBSyxJQUFJdEosSUFBSTlDLE9BQU9vTSxZQUFZLENBQUNySixNQUFNLEdBQUcsR0FBR0QsS0FBSyxHQUFHQSxJQUFLO3dCQUN4RCxNQUFNcUosUUFBUW5NLE9BQU9vTSxZQUFZLENBQUN0SixFQUFFO3dCQUNwQ3FKLE1BQU14RCxJQUFJLENBQUNwQixLQUFLLENBQUNsQyxjQUFjLENBQUM7d0JBQ2hDOEcsTUFBTXhELElBQUksQ0FBQ2xGLFFBQVEsQ0FBQzhDLE9BQU8sSUFBSTt3QkFDL0I0RixNQUFNeEUsR0FBRzt3QkFDVCxJQUFJd0UsTUFBTXhFLEdBQUcsR0FBRyxJQUFJOzRCQUNsQi9ILE1BQU00TSxNQUFNLENBQUNMLE1BQU14RCxJQUFJOzRCQUN2QjNJLE9BQU9vTSxZQUFZLENBQUNLLE1BQU0sQ0FBQzNKLEdBQUc7d0JBQ2hDO29CQUNGO2dCQUNGO2dCQUVBLDBCQUEwQjtnQkFDMUIsTUFBTTRKLFNBQVMxTCxrQkFBa0JBO2dCQUNqQyxJQUFLLElBQUk4QixJQUFJLEdBQUdBLElBQUkxQixVQUFVMkIsTUFBTSxFQUFFRCxLQUFLLEVBQUc7b0JBQzVDLE1BQU02SixLQUFLdkwsU0FBUyxDQUFDMEIsRUFBRSxHQUFHMUMsaUJBQWlCK0ksQ0FBQztvQkFDNUMsTUFBTXlELEtBQUt4TCxTQUFTLENBQUMwQixJQUFJLEVBQUUsR0FBRzFDLGlCQUFpQjRJLENBQUM7b0JBQ2hELE1BQU02RCxLQUFLekwsU0FBUyxDQUFDMEIsSUFBSSxFQUFFLEdBQUcxQyxpQkFBaUJnSixDQUFDO29CQUNoRCxJQUFJdUQsS0FBR0EsS0FBS0MsS0FBR0EsS0FBS0MsS0FBR0EsS0FBS0gsUUFBUTt3QkFDbEMsOEVBQThFO3dCQUM5RSxNQUFNSSxZQUFZOUwsa0JBQWtCO3dCQUNwQyxNQUFNK0wsWUFBWS9MO3dCQUNsQixNQUFNeUIsSUFBSXFLLFlBQVl4TCxLQUFLQyxNQUFNLEtBQU13TCxDQUFBQSxZQUFZRCxTQUFRO3dCQUMzRCxNQUFNdkssUUFBUWpCLEtBQUtDLE1BQU0sS0FBSyxJQUFJRCxLQUFLRyxFQUFFO3dCQUN6QyxNQUFNZSxNQUFNbEIsS0FBS0ssSUFBSSxDQUFDLElBQUlMLEtBQUtDLE1BQU0sS0FBSzt3QkFDMUNILFNBQVMsQ0FBQzBCLEVBQUUsR0FBRzFDLGlCQUFpQitJLENBQUMsR0FBRzFHLElBQUluQixLQUFLUSxHQUFHLENBQUNVLE9BQU9sQixLQUFLUyxHQUFHLENBQUNRO3dCQUNqRW5CLFNBQVMsQ0FBQzBCLElBQUUsRUFBRSxHQUFHMUMsaUJBQWlCNEksQ0FBQyxHQUFHdkcsSUFBSW5CLEtBQUtRLEdBQUcsQ0FBQ1UsT0FBT2xCLEtBQUtRLEdBQUcsQ0FBQ1M7d0JBQ25FbkIsU0FBUyxDQUFDMEIsSUFBRSxFQUFFLEdBQUcxQyxpQkFBaUJnSixDQUFDLEdBQUczRyxJQUFJbkIsS0FBS1MsR0FBRyxDQUFDUztvQkFDckQ7Z0JBQ0Y7Z0JBQ0Esd0VBQXdFO2dCQUV4RSw0REFBNEQ7Z0JBQzVELE1BQU13SyxTQUFTOUwsU0FBUytCLFVBQVUsQ0FBQ0MsS0FBSyxDQUFDQyxLQUFLO2dCQUM5QyxJQUFLLElBQUlMLElBQUksR0FBR0EsSUFBSTFCLFVBQVUyQixNQUFNLEVBQUVELEtBQUssRUFBRztvQkFDNUMsTUFBTW1LLE1BQU1uSyxJQUFJO29CQUNoQixNQUFNNkosS0FBS3ZMLFNBQVMsQ0FBQzBCLEVBQUUsR0FBRzFDLGlCQUFpQitJLENBQUM7b0JBQzVDLE1BQU15RCxLQUFLeEwsU0FBUyxDQUFDMEIsSUFBSSxFQUFFLEdBQUcxQyxpQkFBaUI0SSxDQUFDO29CQUNoRCxNQUFNNkQsS0FBS3pMLFNBQVMsQ0FBQzBCLElBQUksRUFBRSxHQUFHMUMsaUJBQWlCZ0osQ0FBQztvQkFDaEQsTUFBTWxFLE9BQU81RCxLQUFLNEwsSUFBSSxDQUFDUCxLQUFLQSxLQUFLQyxLQUFLQSxLQUFLQyxLQUFLQTtvQkFDaEQsSUFBSXhKLE1BQU0sQ0FBQzRKLElBQUksR0FBRyxHQUFHO3dCQUNuQjVKLE1BQU0sQ0FBQzRKLElBQUk7d0JBQ1gsSUFBSTVKLE1BQU0sQ0FBQzRKLElBQUksS0FBSyxHQUFHOzRCQUNyQiwrQkFBK0I7NEJBQy9CMUosV0FBVyxDQUFDVCxFQUFFLEdBQUdFLGNBQWMsQ0FBQ0YsRUFBRTs0QkFDbENTLFdBQVcsQ0FBQ1QsSUFBRSxFQUFFLEdBQUdFLGNBQWMsQ0FBQ0YsSUFBRSxFQUFFOzRCQUN0Q1MsV0FBVyxDQUFDVCxJQUFFLEVBQUUsR0FBR0UsY0FBYyxDQUFDRixJQUFFLEVBQUU7NEJBQ3RDa0ssTUFBTSxDQUFDbEssRUFBRSxHQUFHRSxjQUFjLENBQUNGLEVBQUU7NEJBQzdCa0ssTUFBTSxDQUFDbEssSUFBRSxFQUFFLEdBQUdFLGNBQWMsQ0FBQ0YsSUFBRSxFQUFFOzRCQUNqQ2tLLE1BQU0sQ0FBQ2xLLElBQUUsRUFBRSxHQUFHRSxjQUFjLENBQUNGLElBQUUsRUFBRTt3QkFDbkMsT0FBTzs0QkFDTGtLLE1BQU0sQ0FBQ2xLLEVBQUUsR0FBR1MsV0FBVyxDQUFDVCxFQUFFOzRCQUMxQmtLLE1BQU0sQ0FBQ2xLLElBQUUsRUFBRSxHQUFHUyxXQUFXLENBQUNULElBQUUsRUFBRTs0QkFDOUJrSyxNQUFNLENBQUNsSyxJQUFFLEVBQUUsR0FBR1MsV0FBVyxDQUFDVCxJQUFFLEVBQUU7d0JBQ2hDO29CQUNGLE9BQU8sSUFBSW9DLE9BQU9sRSxrQkFBa0IsT0FBT00sS0FBS0MsTUFBTSxLQUFLLE1BQU07d0JBQy9EOEIsTUFBTSxDQUFDNEosSUFBSSxHQUFHeko7d0JBQ2QsTUFBTXRCLElBQUlVLE9BQU8sQ0FBQ3RCLEtBQUtXLEtBQUssQ0FBQ1gsS0FBS0MsTUFBTSxLQUFLcUIsUUFBUUcsTUFBTSxFQUFFO3dCQUM3RFEsV0FBVyxDQUFDVCxFQUFFLEdBQUdaLENBQUMsQ0FBQyxFQUFFO3dCQUNyQnFCLFdBQVcsQ0FBQ1QsSUFBRSxFQUFFLEdBQUdaLENBQUMsQ0FBQyxFQUFFO3dCQUN2QnFCLFdBQVcsQ0FBQ1QsSUFBRSxFQUFFLEdBQUdaLENBQUMsQ0FBQyxFQUFFO3dCQUN2QjhLLE1BQU0sQ0FBQ2xLLEVBQUUsR0FBR1MsV0FBVyxDQUFDVCxFQUFFO3dCQUMxQmtLLE1BQU0sQ0FBQ2xLLElBQUUsRUFBRSxHQUFHUyxXQUFXLENBQUNULElBQUUsRUFBRTt3QkFDOUJrSyxNQUFNLENBQUNsSyxJQUFFLEVBQUUsR0FBR1MsV0FBVyxDQUFDVCxJQUFFLEVBQUU7b0JBQ2hDLE9BQU87d0JBQ0xTLFdBQVcsQ0FBQ1QsRUFBRSxHQUFHRSxjQUFjLENBQUNGLEVBQUU7d0JBQ2xDUyxXQUFXLENBQUNULElBQUUsRUFBRSxHQUFHRSxjQUFjLENBQUNGLElBQUUsRUFBRTt3QkFDdENTLFdBQVcsQ0FBQ1QsSUFBRSxFQUFFLEdBQUdFLGNBQWMsQ0FBQ0YsSUFBRSxFQUFFO3dCQUN0Q2tLLE1BQU0sQ0FBQ2xLLEVBQUUsR0FBR0UsY0FBYyxDQUFDRixFQUFFO3dCQUM3QmtLLE1BQU0sQ0FBQ2xLLElBQUUsRUFBRSxHQUFHRSxjQUFjLENBQUNGLElBQUUsRUFBRTt3QkFDakNrSyxNQUFNLENBQUNsSyxJQUFFLEVBQUUsR0FBR0UsY0FBYyxDQUFDRixJQUFFLEVBQUU7b0JBQ25DO2dCQUNGO2dCQUNBNUIsU0FBUytCLFVBQVUsQ0FBQ0MsS0FBSyxDQUFDbUcsV0FBVyxHQUFHO2dCQUN0Qy9JLFNBQVM2TSxNQUFNLENBQUN2TixPQUFPRTtZQUN6QixFQUFFLE9BQU9zTixLQUFLO2dCQUNaLG9DQUFvQztnQkFDcENDLFFBQVFDLEtBQUssQ0FBQyw4QkFBOEJGO1lBQzlDO1FBQ0Y7UUFFQXZFLFdBQVcsd0JBQXdCO1FBRW5DLE1BQU0wRSxXQUFXO1lBQ2Z6TixPQUFPME4sTUFBTSxHQUFHeE4sT0FBT0MsVUFBVSxHQUFHRCxPQUFPRSxXQUFXO1lBQ3RESixPQUFPMk4sc0JBQXNCO1lBQzdCbk4sU0FBU0ssT0FBTyxDQUFDWCxPQUFPQyxVQUFVLEVBQUVELE9BQU9FLFdBQVc7UUFDeEQ7UUFDQUYsT0FBT3lFLGdCQUFnQixDQUFDLFVBQVU4STtRQUVsQyxPQUFPO1lBQ0x2TixPQUFPME4sbUJBQW1CLENBQUMsVUFBVXZKO1lBQ3JDbkUsT0FBTzBOLG1CQUFtQixDQUFDLFVBQVVIO1lBQ3JDbk8sTUFBTXVPLFdBQVcsQ0FBQ3JOLFNBQVNRLFVBQVU7UUFDdkM7SUFDRixHQUFHLEVBQUU7SUFFTCxxQkFBTyw4REFBQzhNO1FBQUlDLEtBQUszTzs7Ozs7O0FBQ25CO0dBOWJNRDtLQUFBQTtBQWdjTiwrREFBZUEsU0FBU0EsRUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9jb21wb25lbnRzL1N0YXJmaWVsZC5qc3g/ZjFhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbmNvbnN0IFN0YXJmaWVsZCA9ICgpID0+IHtcbiAgY29uc3QgbW91bnRSZWYgPSB1c2VSZWYobnVsbClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIERlZmVuc2l2ZTogYWx3YXlzIHVzZSAuY3VycmVudCBmb3IgcmVmc1xuICAgIGlmICghbW91bnRSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgIGNvbnN0IG1vdW50ID0gbW91bnRSZWYuY3VycmVudFxuICAgIG1vdW50LnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJ1xuICAgIG1vdW50LnN0eWxlLnRvcCA9ICcwJ1xuICAgIG1vdW50LnN0eWxlLmxlZnQgPSAnMCdcbiAgICBtb3VudC5zdHlsZS53aWR0aCA9ICcxMDAlJ1xuICAgIG1vdW50LnN0eWxlLmhlaWdodCA9ICcxMDAlJ1xuICAgIG1vdW50LnN0eWxlLnpJbmRleCA9ICcwJ1xuXG4gICAgLy8gU2NlbmUgJiBSZW5kZXJlclxuICAgIGNvbnN0IHNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKClcbiAgICBjb25zdCBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoNzUsIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LCAwLjEsIDUwMDApXG4gICAgY2FtZXJhLnBvc2l0aW9uLnNldCgwLCAwLCAwKTtcbiAgICAvLyBWaXJ0dWFsIHBvc2l0aW9uIHRvIHNpbXVsYXRlIGluZmluaXRlIHRyYXZlbFxuICAgIGxldCB2aXJ0dWFsQ2FtZXJhUG9zID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgMCk7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcih7IGFudGlhbGlhczogdHJ1ZSB9KVxuICAgIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pXG4gICAgcmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KVxuICAgIHJlbmRlcmVyLnNldENsZWFyQ29sb3IoMHgwMDAwMDAsIDEpO1xuICAgIG1vdW50LmFwcGVuZENoaWxkKHJlbmRlcmVyLmRvbUVsZW1lbnQpXG5cbiAgICAvLyBTdGFyZmllbGRcbiAgICBjb25zdCBzdGFyQ291bnQgPSA1MDAwXG4gICAgY29uc3Qgc3Rhck1heERpc3RhbmNlID0gMTAwMFxuICAgIGNvbnN0IHN0YXJTcGVlZCA9IDFcbiAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpXG4gICAgY29uc3QgcG9zaXRpb25zID0gW107XG4gICAgbGV0IHN0YXJzUGxhY2VkID0gMDtcbiAgICB3aGlsZSAoc3RhcnNQbGFjZWQgPCBzdGFyQ291bnQpIHtcbiAgICAgIC8vIFdpdGggMSUgY2hhbmNlLCBzcGF3biBhIHN0YXIgY2x1c3RlciAoMTAtMzAgc3RhcnMpXG4gICAgICBpZiAoTWF0aC5yYW5kb20oKSA8IDAuMDEgJiYgc3RhcnNQbGFjZWQgPCBzdGFyQ291bnQgLSAxMCkge1xuICAgICAgICBjb25zdCBjbHVzdGVyVGhldGEgPSBNYXRoLnJhbmRvbSgpICogMiAqIE1hdGguUEk7XG4gICAgICAgIGNvbnN0IGNsdXN0ZXJQaGkgPSBNYXRoLmFjb3MoMiAqIE1hdGgucmFuZG9tKCkgLSAxKTtcbiAgICAgICAgY29uc3QgY2x1c3RlclIgPSBNYXRoLnJhbmRvbSgpICogc3Rhck1heERpc3RhbmNlO1xuICAgICAgICBjb25zdCBjbHVzdGVyQ2VudGVyID0gW1xuICAgICAgICAgIGNsdXN0ZXJSICogTWF0aC5zaW4oY2x1c3RlclBoaSkgKiBNYXRoLmNvcyhjbHVzdGVyVGhldGEpLFxuICAgICAgICAgIGNsdXN0ZXJSICogTWF0aC5zaW4oY2x1c3RlclBoaSkgKiBNYXRoLnNpbihjbHVzdGVyVGhldGEpLFxuICAgICAgICAgIGNsdXN0ZXJSICogTWF0aC5jb3MoY2x1c3RlclBoaSlcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgY2x1c3RlclNpemUgPSAxMCArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIwKTsgLy8gMTAtMzAgc3RhcnNcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBjbHVzdGVyU2l6ZSAmJiBzdGFyc1BsYWNlZCA8IHN0YXJDb3VudDsgYysrKSB7XG4gICAgICAgICAgLy8gRWFjaCBzdGFyIGluIGNsdXN0ZXIgaXMgd2l0aGluIDMwIHVuaXRzIG9mIGNlbnRlclxuICAgICAgICAgIGNvbnN0IG9mZnNldFRoZXRhID0gTWF0aC5yYW5kb20oKSAqIDIgKiBNYXRoLlBJO1xuICAgICAgICAgIGNvbnN0IG9mZnNldFBoaSA9IE1hdGguYWNvcygyICogTWF0aC5yYW5kb20oKSAtIDEpO1xuICAgICAgICAgIGNvbnN0IG9mZnNldFIgPSBNYXRoLnJhbmRvbSgpICogMzA7IC8vIGNsdXN0ZXIgcmFkaXVzXG4gICAgICAgICAgcG9zaXRpb25zLnB1c2goXG4gICAgICAgICAgICBjbHVzdGVyQ2VudGVyWzBdICsgb2Zmc2V0UiAqIE1hdGguc2luKG9mZnNldFBoaSkgKiBNYXRoLmNvcyhvZmZzZXRUaGV0YSksXG4gICAgICAgICAgICBjbHVzdGVyQ2VudGVyWzFdICsgb2Zmc2V0UiAqIE1hdGguc2luKG9mZnNldFBoaSkgKiBNYXRoLnNpbihvZmZzZXRUaGV0YSksXG4gICAgICAgICAgICBjbHVzdGVyQ2VudGVyWzJdICsgb2Zmc2V0UiAqIE1hdGguY29zKG9mZnNldFBoaSlcbiAgICAgICAgICApO1xuICAgICAgICAgIHN0YXJzUGxhY2VkKys7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vcm1hbCBzaW5nbGUgc3RhclxuICAgICAgICBjb25zdCB0aGV0YSA9IE1hdGgucmFuZG9tKCkgKiAyICogTWF0aC5QSTtcbiAgICAgICAgY29uc3QgcGhpID0gTWF0aC5hY29zKDIgKiBNYXRoLnJhbmRvbSgpIC0gMSk7XG4gICAgICAgIGNvbnN0IHIgPSBNYXRoLnJhbmRvbSgpICogc3Rhck1heERpc3RhbmNlO1xuICAgICAgICBwb3NpdGlvbnMucHVzaChcbiAgICAgICAgICByICogTWF0aC5zaW4ocGhpKSAqIE1hdGguY29zKHRoZXRhKSxcbiAgICAgICAgICByICogTWF0aC5zaW4ocGhpKSAqIE1hdGguc2luKHRoZXRhKSxcbiAgICAgICAgICByICogTWF0aC5jb3MocGhpKVxuICAgICAgICApO1xuICAgICAgICBzdGFyc1BsYWNlZCsrO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUocG9zaXRpb25zLCAzKSlcblxuICAgIGNvbnN0IHBhbGV0dGUgPSBbXG4gICAgICBbMS4wLCAwLjUsIDAuNV0sXG4gICAgICBbMS4wLCAwLjc1LCAwLjRdLFxuICAgICAgWzEuMCwgMS4wLCAwLjldLFxuICAgICAgWzEuMCwgMS4wLCAxLjBdLFxuICAgICAgWzAuNCwgMC41LCAxLjBdLFxuICAgIF1cbiAgICBjb25zdCBjb2xvcnMgPSBbXVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhckNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IGMgPSBwYWxldHRlW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBhbGV0dGUubGVuZ3RoKV1cbiAgICAgIGNvbG9ycy5wdXNoKC4uLmMpXG4gICAgfVxuICAgIGdlb21ldHJ5LnNldEF0dHJpYnV0ZSgnY29sb3InLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZShjb2xvcnMsIDMpKVxuXG4gICAgY29uc3Qgb3JpZ2luYWxDb2xvcnMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yLmFycmF5LnNsaWNlKClcbiAgICBjb25zdCB0aW1lcnMgPSBuZXcgRmxvYXQzMkFycmF5KHN0YXJDb3VudClcbiAgICBjb25zdCBzcGFya0NvbG9ycyA9IG5ldyBGbG9hdDMyQXJyYXkoc3RhckNvdW50ICogMylcbiAgICBjb25zdCBzcGFya2xlRHVyYXRpb24gPSAxODBcblxuICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLlBvaW50c01hdGVyaWFsKHsgc2l6ZTogMy41LCBzaXplQXR0ZW51YXRpb246IHRydWUsIHZlcnRleENvbG9yczogdHJ1ZSB9KVxuICAgIGNvbnN0IHN0YXJzID0gbmV3IFRIUkVFLlBvaW50cyhnZW9tZXRyeSwgbWF0ZXJpYWwpXG4gICAgc2NlbmUuYWRkKHN0YXJzKVxuXG4gICAgbGV0IHRhcmdldFkgPSAwXG4gICAgY29uc3QgZGFtcGluZyA9IDAuMDVcbiAgICBjb25zdCBvblNjcm9sbCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHBjdCA9IHdpbmRvdy5zY3JvbGxZIC8gKGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0KVxuICAgICAgdGFyZ2V0WSA9IHBjdCAqIE1hdGguUEkgKiAyXG4gICAgfVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvblNjcm9sbClcblxuICAgIC8vIC0tLSBTaG9vdGluZyBTdGFycyAtLS1cbiAgICBjb25zdCB0YWlsTGVuZ3RoID0gMzI7IC8vIEluY3JlYXNlIGZvciBsb25nZXIgdGFpbHNcbiAgICBjb25zdCBzaG9vdGluZ1N0YXJzID0gW107XG4gICAgbGV0IHNob290aW5nU3RhckNvb2xkb3duID0gMDtcbiAgICAvLyBTcGF3biBhIHNob290aW5nIHN0YXIgd2l0aCBhIHN0dW5uaW5nIGdsb3dpbmcgdGFpbFxuICAgIGZ1bmN0aW9uIHNwYXduU2hvb3RpbmdTdGFyKCkge1xuICAgICAgLy8gUGljayBhIHJhbmRvbSBkaXJlY3Rpb24gb24gdGhlIHNwaGVyZSBmb3IgdGhlIHNwYXduIGxvY2F0aW9uXG4gICAgICBjb25zdCBkaXIgPSBuZXcgVEhSRUUuVmVjdG9yMyhNYXRoLnJhbmRvbSgpKjItMSwgTWF0aC5yYW5kb20oKSoyLTEsIE1hdGgucmFuZG9tKCkqMi0xKS5ub3JtYWxpemUoKTtcbiAgICAgIC8vIEVuc3VyZSBzaG9vdGluZyBzdGFycyBuZXZlciBzcGF3biBjbG9zZSB0byB0aGUgY2FtZXJhIChhdCBsZWFzdCA3MCUgb2YgbWF4IGRpc3RhbmNlKVxuICAgICAgY29uc3QgbWluRGlzdCA9IHN0YXJNYXhEaXN0YW5jZSAqIDAuNztcbiAgICAgIGNvbnN0IG1heERpc3QgPSBzdGFyTWF4RGlzdGFuY2UgKiAxLjA7XG4gICAgICBjb25zdCBkaXN0ID0gbWluRGlzdCArIE1hdGgucmFuZG9tKCkgKiAobWF4RGlzdCAtIG1pbkRpc3QpO1xuICAgICAgY29uc3Qgc3Bhd25Qb3MgPSBkaXIuY2xvbmUoKS5tdWx0aXBseVNjYWxhcihkaXN0KTtcbiAgICAgIC8vIFRhbmdlbnRpYWwgdmVsb2NpdHk6IHBlcnBlbmRpY3VsYXIgdG8gZGlyXG4gICAgICBsZXQgdGFuZ2VudCA9IG5ldyBUSFJFRS5WZWN0b3IzKE1hdGgucmFuZG9tKCkqMi0xLCBNYXRoLnJhbmRvbSgpKjItMSwgTWF0aC5yYW5kb20oKSoyLTEpO1xuICAgICAgdGFuZ2VudCA9IHRhbmdlbnQuc3ViKHRhbmdlbnQuY2xvbmUoKS5wcm9qZWN0T25WZWN0b3IoZGlyKSkubm9ybWFsaXplKCk7XG4gICAgICAvLyBNaXggaW4gYSBzbWFsbCByYWRpYWwgY29tcG9uZW50IChpbndhcmQgb3Igb3V0d2FyZClcbiAgICAgIGNvbnN0IHRhbmdlbnRpYWxTcGVlZCA9IHN0YXJTcGVlZCAqICgyLjUgKyBNYXRoLnJhbmRvbSgpICogMi41KTsgLy8gbXVjaCBmYXN0ZXJcbiAgICAgIGNvbnN0IHJhZGlhbFNwZWVkID0gc3RhclNwZWVkICogKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMC4zOyAvLyBtb3JlIGRyYW1hdGljXG4gICAgICBjb25zdCB2ZWxvY2l0eSA9IHRhbmdlbnQubXVsdGlwbHlTY2FsYXIodGFuZ2VudGlhbFNwZWVkKS5hZGQoZGlyLmNsb25lKCkubXVsdGlwbHlTY2FsYXIocmFkaWFsU3BlZWQpKTtcblxuICAgICAgLy8gU3R1bm5pbmcgY29sb3IgZ3JhZGllbnQgZm9yIHRoZSBoZWFkXG4gICAgICBjb25zdCB2aWJyYW50Q29sb3JzID0gWzB4ZmZlMDY2LCAweGZmNjZjYywgMHg2NmNjZmYsIDB4ZmZmZmZmLCAweDgwZmZlYSwgMHhmZmYyY2MsIDB4ZmZjMDgwLCAweDgwYzBmZiwgMHhmZjgwYjNdO1xuICAgICAgY29uc3QgY29sb3IgPSB2aWJyYW50Q29sb3JzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSp2aWJyYW50Q29sb3JzLmxlbmd0aCldO1xuICAgICAgLy8gU3RhciBicmlnaHRuZXNzIGFuZCBzaXplIChtYWtlIGV2ZW4gbGFyZ2VyIGFuZCBicmlnaHRlcilcbiAgICAgIGNvbnN0IGJyaWdodG5lc3MgPSAzLjUgKyBNYXRoLnJhbmRvbSgpKjMuNTtcbiAgICAgIGNvbnN0IGdlbyA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSg1ICsgTWF0aC5yYW5kb20oKSozLCA0OCwgNDgpOyAvLyBFdmVuIGxhcmdlciwgbW9yZSBzZWdtZW50c1xuICAgICAgY29uc3QgbWF0ID0gbmV3IFRIUkVFLk1lc2hQaHlzaWNhbE1hdGVyaWFsKHtcbiAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICBlbWlzc2l2ZTogY29sb3IsXG4gICAgICAgIGVtaXNzaXZlSW50ZW5zaXR5OiAyLjUsXG4gICAgICAgIG1ldGFsbmVzczogMC44LFxuICAgICAgICByb3VnaG5lc3M6IDAuMixcbiAgICAgICAgdHJhbnNtaXNzaW9uOiAwLjksXG4gICAgICAgIG9wYWNpdHk6IDAuOTgsXG4gICAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgICAgICBjbGVhcmNvYXQ6IDEuMCxcbiAgICAgICAgY2xlYXJjb2F0Um91Z2huZXNzOiAwLjEsXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHN0YXIgPSBuZXcgVEhSRUUuTWVzaChnZW8sIG1hdCk7XG4gICAgICAvLyBBZGQgYSBnbG93aW5nIHNwcml0ZSBmb3IgZXh0cmEgZ2xvd1xuICAgICAgY29uc3Qgc3ByaXRlTWFwID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKS5sb2FkKCdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vbXJkb29iL3RocmVlLmpzL21hc3Rlci9leGFtcGxlcy90ZXh0dXJlcy9zcHJpdGVzL2dsb3cucG5nJyk7XG4gICAgICBjb25zdCBzcHJpdGVNYXRlcmlhbCA9IG5ldyBUSFJFRS5TcHJpdGVNYXRlcmlhbCh7IG1hcDogc3ByaXRlTWFwLCBjb2xvcjogY29sb3IsIG9wYWNpdHk6IDAuOCwgYmxlbmRpbmc6IFRIUkVFLkFkZGl0aXZlQmxlbmRpbmcgfSk7XG4gICAgICBjb25zdCBzcHJpdGUgPSBuZXcgVEhSRUUuU3ByaXRlKHNwcml0ZU1hdGVyaWFsKTtcbiAgICAgIHNwcml0ZS5zY2FsZS5zZXQoMzAsIDMwLCAxKTtcbiAgICAgIHNwcml0ZS5wb3NpdGlvbi5jb3B5KHN0YXIucG9zaXRpb24pO1xuICAgICAgc3Rhci5hZGQoc3ByaXRlKTtcbiAgICAgIHN0YXIucG9zaXRpb24uY29weShzcGF3blBvcyk7XG4gICAgICBzdGFyLnZlbG9jaXR5ID0gdmVsb2NpdHk7XG4gICAgICBzdGFyLm5vcm1hbGl6ZWRMaWZlID0gMC4wO1xuICAgICAgc3Rhci5ub3JtYWxpemVkTGlmZXRpbWUgPSA4MCArIE1hdGgucmFuZG9tKCkgKiA4MDsgLy8gTG9uZ2VyLCBtb3JlIGRyYW1hdGljXG4gICAgICBzdGFyLmFnZSA9IDA7XG4gICAgICAvLyAtLS0gU3R1bm5pbmcgTWV0ZW9yIFRhaWwgKHZlcnkgbG9uZywgbXVsdGktY29sb3IsIGdsb3dpbmcsIGZhZGluZywgYW5kIDNEIGN1cnZlKSAtLS1cbiAgICAgIGNvbnN0IHRyYWlsU2VnbWVudHMgPSB0YWlsTGVuZ3RoICogMzsgLy8gRXZlbiBsb25nZXIgdGFpbFxuICAgICAgY29uc3QgdHJhaWxQb2ludHMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhaWxTZWdtZW50czsgaSsrKSB7XG4gICAgICAgIC8vIEFkZCBhIDNEIHNwaXJhbC9jdXJ2ZSBmb3IgbW9yZSBkZXB0aFxuICAgICAgICBjb25zdCBzcGlyYWwgPSBNYXRoLnNpbihpICogMC4yNSkgKiA4O1xuICAgICAgICBjb25zdCBjdXJ2ZSA9IE1hdGguY29zKGkgKiAwLjE1KSAqIDQ7XG4gICAgICAgIGNvbnN0IHB0ID0gc3Rhci5wb3NpdGlvbi5jbG9uZSgpLmFkZChuZXcgVEhSRUUuVmVjdG9yMyhzcGlyYWwsIGN1cnZlLCAtaSAqIDMpKTtcbiAgICAgICAgdHJhaWxQb2ludHMucHVzaChwdCk7XG4gICAgICB9XG4gICAgICBjb25zdCB0YWlsR2VvID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCkuc2V0RnJvbVBvaW50cyh0cmFpbFBvaW50cyk7XG4gICAgICAvLyBQZXItdmVydGV4IGNvbG9yIChtdWx0aS1jb2xvciByYWluYm93IGdyYWRpZW50KVxuICAgICAgY29uc3QgdGFpbENvbG9ycyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmFpbFNlZ21lbnRzOyBpKyspIHtcbiAgICAgICAgLy8gQWxwaGEgZmFkZXMgb3V0IGFsb25nIHRoZSB0YWlsXG4gICAgICAgIGNvbnN0IGFscGhhID0gKDEgLSBpIC8gKHRyYWlsU2VnbWVudHMgLSAxKSkgKiAwLjk5O1xuICAgICAgICAvLyBSYWluYm93IGdyYWRpZW50XG4gICAgICAgIGNvbnN0IHJhaW5ib3cgPSBbMHhmZmUwNjYsIDB4ZmY2NmNjLCAweDY2Y2NmZiwgMHhmZmZmZmYsIDB4ODBmZmVhLCAweGZmZjJjYywgMHhmZmMwODAsIDB4ODBjMGZmLCAweGZmODBiM107XG4gICAgICAgIGNvbnN0IGdyYWRDb2xvciA9IHJhaW5ib3dbTWF0aC5mbG9vcigoaSAvIHRyYWlsU2VnbWVudHMpICogcmFpbmJvdy5sZW5ndGgpXTtcbiAgICAgICAgdGFpbENvbG9ycy5wdXNoKChncmFkQ29sb3IgPj4gMTYgJiAyNTUpIC8gMjU1LCAoZ3JhZENvbG9yID4+IDggJiAyNTUpIC8gMjU1LCAoZ3JhZENvbG9yICYgMjU1KSAvIDI1NSwgYWxwaGEpO1xuICAgICAgfVxuICAgICAgdGFpbEdlby5zZXRBdHRyaWJ1dGUoJ2NvbG9yJywgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodGFpbENvbG9ycywgNCkpO1xuICAgICAgLy8gQWRkaXRpdmUgYmxlbmRpbmcgZm9yIGdsb3dcbiAgICAgIGNvbnN0IHRhaWxNYXQgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoeyB2ZXJ0ZXhDb2xvcnM6IHRydWUsIHRyYW5zcGFyZW50OiB0cnVlLCBvcGFjaXR5OiAxLjAsIGJsZW5kaW5nOiBUSFJFRS5BZGRpdGl2ZUJsZW5kaW5nIH0pO1xuICAgICAgY29uc3QgdGFpbCA9IG5ldyBUSFJFRS5MaW5lKHRhaWxHZW8sIHRhaWxNYXQpO1xuICAgICAgdGFpbC5wb3NpdGlvbi5jb3B5KHN0YXIucG9zaXRpb24pO1xuICAgICAgLy8gQWRkIHRvIHNjZW5lXG4gICAgICBzY2VuZS5hZGQoc3Rhcik7XG4gICAgICBzY2VuZS5hZGQodGFpbCk7XG4gICAgICBzaG9vdGluZ1N0YXJzLnB1c2goeyBtZXNoOiBzdGFyLCB0YWlsLCB2ZWxvY2l0eTogc3Rhci52ZWxvY2l0eSwgZGlyLCBhZ2U6IDAsIG5vcm1hbGl6ZWRMaWZldGltZTogc3Rhci5ub3JtYWxpemVkTGlmZXRpbWUsIHRyYWlsUG9pbnRzLCBjb2xvciwgYnJpZ2h0bmVzcywgaGFzRnJhZ21lbnRlZDogZmFsc2UgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgYW5pbWF0ZSA9ICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG4gICAgICBjYW1lcmEucm90YXRpb24ueSArPSAodGFyZ2V0WSAtIGNhbWVyYS5yb3RhdGlvbi55KSAqIGRhbXBpbmc7XG4gICAgICAvLyBNb3ZlIHRoZSB2aXJ0dWFsIGNhbWVyYSBwb3NpdGlvbiBpbiB0aGUgZGlyZWN0aW9uIHRoZSBjYW1lcmEgaXMgZmFjaW5nXG4gICAgICBjb25zdCBmb3J3YXJkID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICAgIGNhbWVyYS5nZXRXb3JsZERpcmVjdGlvbihmb3J3YXJkKTtcbiAgICAgIHZpcnR1YWxDYW1lcmFQb3MuYWRkKGZvcndhcmQubXVsdGlwbHlTY2FsYXIoc3RhclNwZWVkKSk7XG4gICAgICAvLyBPZmZzZXQgYWxsIHN0YXJzIGJ5IC12aXJ0dWFsQ2FtZXJhUG9zIChmbG9hdGluZyBvcmlnaW4pXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc2l0aW9ucy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5W2ldID0gcG9zaXRpb25zW2ldIC0gdmlydHVhbENhbWVyYVBvcy54O1xuICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5W2krMV0gPSBwb3NpdGlvbnNbaSsxXSAtIHZpcnR1YWxDYW1lcmFQb3MueTtcbiAgICAgICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheVtpKzJdID0gcG9zaXRpb25zW2krMl0gLSB2aXJ0dWFsQ2FtZXJhUG9zLno7XG4gICAgICB9XG4gICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuICAgICAgLy8gLS0tIFNob290aW5nIHN0YXIgc3Bhd25pbmcgLS0tXG4gICAgICAvLyBERVY6IE1ha2Ugc2hvb3Rpbmcgc3RhcnMgc3VwZXIgY29tbW9uIChzcGF3biBldmVyeSBmcmFtZSBpZiBjb29sZG93biBhbGxvd3MpXG4gICAgICBpZiAoc2hvb3RpbmdTdGFyQ29vbGRvd24gPD0gMCAmJiBNYXRoLnJhbmRvbSgpIDwgMC4xKSB7IC8vIFNob290aW5nIFN0YXIgU3Bhd24gUmF0ZSAodGhyb3R0bGVkKVxuICAgICAgICBzcGF3blNob290aW5nU3RhcigpO1xuICAgICAgICBzaG9vdGluZ1N0YXJDb29sZG93biA9IDEwICsgTWF0aC5yYW5kb20oKSAqIDEwOyAvLyBMb25nZXIgY29vbGRvd24gZm9yIHBlcmZcbiAgICAgIH0gZWxzZSBpZiAoc2hvb3RpbmdTdGFyQ29vbGRvd24gPiAwKSB7XG4gICAgICAgIHNob290aW5nU3RhckNvb2xkb3duLS07XG4gICAgICB9XG4gICAgICAvLyBBbmltYXRlIGFuZCBjbGVhbiB1cCBzaG9vdGluZyBzdGFyc1xuICAgICAgZm9yIChsZXQgaSA9IHNob290aW5nU3RhcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3Qgb2JqID0gc2hvb3RpbmdTdGFyc1tpXTtcbiAgICAgICAgLy8gQ3VydmVkIHRyYWplY3RvcnlcbiAgICAgICAgbGV0IHBlcnAgPSBuZXcgVEhSRUUuVmVjdG9yMyhNYXRoLnJhbmRvbSgpLTAuNSwgTWF0aC5yYW5kb20oKS0wLjUsIE1hdGgucmFuZG9tKCktMC41KTtcbiAgICAgICAgcGVycCA9IHBlcnAuc3ViKHBlcnAuY2xvbmUoKS5wcm9qZWN0T25WZWN0b3Iob2JqLnZlbG9jaXR5KSkubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoMC4wMDIgKyBNYXRoLnJhbmRvbSgpKjAuMDAxKTtcbiAgICAgICAgb2JqLnZlbG9jaXR5LmFkZChwZXJwKTtcbiAgICAgICAgb2JqLnZlbG9jaXR5Lm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKG9iai52ZWxvY2l0eS5sZW5ndGgoKSk7XG4gICAgICAgIG9iai5tZXNoLnBvc2l0aW9uLmFkZChvYmoudmVsb2NpdHkpO1xuICAgICAgICBvYmoudGFpbC5wb3NpdGlvbi5jb3B5KG9iai5tZXNoLnBvc2l0aW9uKTtcbiAgICAgICAgLy8gQW5pbWF0ZSB0YWlsXG4gICAgICAgIG9iai5hZ2UrKztcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZExpZmUgPSBvYmouYWdlIC8gb2JqLm5vcm1hbGl6ZWRMaWZldGltZTtcbiAgICAgICAgZm9yIChsZXQgdCA9IG9iai50cmFpbFBvaW50cy5sZW5ndGggLSAxOyB0ID4gMDsgdC0tKSB7XG4gICAgICAgICAgb2JqLnRyYWlsUG9pbnRzW3RdLmxlcnAob2JqLnRyYWlsUG9pbnRzW3QtMV0sIDAuNDUpO1xuICAgICAgICB9XG4gICAgICAgIG9iai50cmFpbFBvaW50c1swXS5jb3B5KG9iai5tZXNoLnBvc2l0aW9uKTtcbiAgICAgICAgbGV0IHRhaWxHcm93ID0gTWF0aC5taW4oMSwgbm9ybWFsaXplZExpZmUgLyAwLjMpO1xuICAgICAgICBsZXQgYWN0aXZlU2VnbWVudHMgPSBNYXRoLmZsb29yKG9iai50cmFpbFBvaW50cy5sZW5ndGggKiB0YWlsR3Jvdyk7XG4gICAgICAgIGlmIChhY3RpdmVTZWdtZW50cyA8IDIpIGFjdGl2ZVNlZ21lbnRzID0gMjtcbiAgICAgICAgY29uc3QgdmlzaWJsZVRyYWlsID0gb2JqLnRyYWlsUG9pbnRzLnNsaWNlKDAsIGFjdGl2ZVNlZ21lbnRzKTtcbiAgICAgICAgb2JqLnRhaWwuZ2VvbWV0cnkuc2V0RnJvbVBvaW50cyh2aXNpYmxlVHJhaWwpO1xuICAgICAgICBjb25zdCB0YWlsQ29sb3JzID0gb2JqLnRhaWwuZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCdjb2xvcicpO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZpc2libGVUcmFpbC5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGxldCBhbHBoYSA9ICgxIC0gaiAvICh2aXNpYmxlVHJhaWwubGVuZ3RoIC0gMSkpICogMC45NTtcbiAgICAgICAgICBhbHBoYSAqPSAwLjkyICsgMC4wOCAqIE1hdGguc2luKERhdGUubm93KCkqMC4wMTUgKyBqKjAuNSk7XG4gICAgICAgICAgbGV0IHJhaW5ib3cgPSBbMHhmZmMwODAsIDB4ZmZlMDgwLCAweGZmZmY4MCwgMHg4MGZmZTYsIDB4ODBjMGZmLCAweGMwODBmZl07XG4gICAgICAgICAgbGV0IGdyYWRDb2xvciA9IHJhaW5ib3dbaiAlIHJhaW5ib3cubGVuZ3RoXTtcbiAgICAgICAgICBpZiAobm9ybWFsaXplZExpZmUgPiAwLjcpIGFscGhhICo9IE1hdGgubWF4KDAsIDEgLSAobm9ybWFsaXplZExpZmUgLSAwLjcgLSAwLjIpIC8gMC4zKTtcbiAgICAgICAgICB0YWlsQ29sb3JzLnNldFhZWlcoaiwgKGdyYWRDb2xvciA+PiAxNiAmIDI1NSkgLyAyNTUsIChncmFkQ29sb3IgPj4gOCAmIDI1NSkgLyAyNTUsIChncmFkQ29sb3IgJiAyNTUpIC8gMjU1LCBhbHBoYSk7XG4gICAgICAgIH1cbiAgICAgICAgdGFpbENvbG9ycy5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIC8vIEFuaW1hdGUgaGVhZFxuICAgICAgICBsZXQgaGVhZENvbG9yO1xuICAgICAgICBpZiAobm9ybWFsaXplZExpZmUgPCAwLjUpIHtcbiAgICAgICAgICBoZWFkQ29sb3IgPSBuZXcgVEhSRUUuQ29sb3Iob2JqLmNvbG9yKS5sZXJwKG5ldyBUSFJFRS5Db2xvcigweGZmYzA4MCksIG5vcm1hbGl6ZWRMaWZlKjIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhlYWRDb2xvciA9IG5ldyBUSFJFRS5Db2xvcigweGZmYzA4MCkubGVycChuZXcgVEhSRUUuQ29sb3IoMHhmZjQwMDApLCAobm9ybWFsaXplZExpZmUtMC41KSoyKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZmxpY2tlciA9IDAuOTUgKyAwLjEzICogTWF0aC5zaW4oRGF0ZS5ub3coKSowLjA3ICsgTWF0aC5yYW5kb20oKSoxMCk7XG4gICAgICAgIGhlYWRDb2xvci5tdWx0aXBseVNjYWxhcihmbGlja2VyKTtcbiAgICAgICAgb2JqLm1lc2gubWF0ZXJpYWwuY29sb3IuY29weShoZWFkQ29sb3IpO1xuICAgICAgICBsZXQgc2NhbGUgPSAxICsgMi4yICogTWF0aC5zaW4oTWF0aC5QSSAqIG5vcm1hbGl6ZWRMaWZlKTtcbiAgICAgICAgbGV0IGRpc3RUb0NhbSA9IG9iai5tZXNoLnBvc2l0aW9uLmxlbmd0aCgpO1xuICAgICAgICBsZXQgZG9mQmx1ciA9IGRpc3RUb0NhbSA8IHN0YXJNYXhEaXN0YW5jZSAqIDAuNyA/IDAuNyA6IDEuMDtcbiAgICAgICAgb2JqLm1lc2guc2NhbGUuc2V0KHNjYWxlICogZG9mQmx1ciwgc2NhbGUgKiBkb2ZCbHVyLCBzY2FsZSAqIGRvZkJsdXIpO1xuICAgICAgICAvLyBTcGFya2xlIGJ1cnN0XG4gICAgICAgIGlmIChub3JtYWxpemVkTGlmZSA+PSAxICYmICFvYmouaGFzRnJhZ21lbnRlZCkge1xuICAgICAgICAgIGZvciAobGV0IHMgPSAwOyBzIDwgOTsgcysrKSB7XG4gICAgICAgICAgICBjb25zdCBzcGFya2xlR2VvID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDAuNyArIE1hdGgucmFuZG9tKCkqMC44LCA4LCA4KTtcbiAgICAgICAgICAgIGNvbnN0IHNwYXJrbGVNYXQgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogMHhmZmZmZmYsIHRyYW5zcGFyZW50OiB0cnVlLCBvcGFjaXR5OiAwLjcsIGJsZW5kaW5nOiBUSFJFRS5BZGRpdGl2ZUJsZW5kaW5nIH0pO1xuICAgICAgICAgICAgY29uc3Qgc3BhcmtsZSA9IG5ldyBUSFJFRS5NZXNoKHNwYXJrbGVHZW8sIHNwYXJrbGVNYXQpO1xuICAgICAgICAgICAgc3BhcmtsZS5wb3NpdGlvbi5jb3B5KG9iai5tZXNoLnBvc2l0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IHNwYXJrbGVWZWwgPSBuZXcgVEhSRUUuVmVjdG9yMyhNYXRoLnJhbmRvbSgpLTAuNSwgTWF0aC5yYW5kb20oKS0wLjUsIE1hdGgucmFuZG9tKCktMC41KS5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhcigyK01hdGgucmFuZG9tKCkqMik7XG4gICAgICAgICAgICBzcGFya2xlLnVzZXJEYXRhID0geyB2ZWxvY2l0eTogc3BhcmtsZVZlbCwgYWdlOiAwIH07XG4gICAgICAgICAgICBzY2VuZS5hZGQoc3BhcmtsZSk7XG4gICAgICAgICAgICBpZiAoIXdpbmRvdy5fc3BhcmtsZXMpIHdpbmRvdy5fc3BhcmtsZXMgPSBbXTtcbiAgICAgICAgICAgIHdpbmRvdy5fc3BhcmtsZXMucHVzaChzcGFya2xlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZnJhZ1ZlbCA9IG9iai52ZWxvY2l0eS5jbG9uZSgpLmFwcGx5QXhpc0FuZ2xlKG5ldyBUSFJFRS5WZWN0b3IzKDAsMSwwKSwgKE1hdGgucmFuZG9tKCktMC41KSowLjMpO1xuICAgICAgICAgIGNvbnN0IGZyYWdTdGFyID0gb2JqLm1lc2guY2xvbmUoKTtcbiAgICAgICAgICBmcmFnU3Rhci5wb3NpdGlvbi5jb3B5KG9iai5tZXNoLnBvc2l0aW9uKTtcbiAgICAgICAgICBmcmFnU3Rhci52ZWxvY2l0eSA9IGZyYWdWZWw7XG4gICAgICAgICAgZnJhZ1N0YXIubm9ybWFsaXplZExpZmUgPSBub3JtYWxpemVkTGlmZTtcbiAgICAgICAgICBmcmFnU3Rhci5ub3JtYWxpemVkTGlmZXRpbWUgPSBvYmoubm9ybWFsaXplZExpZmV0aW1lICogKDAuNSArIE1hdGgucmFuZG9tKCkqMC41KTtcbiAgICAgICAgICBmcmFnU3Rhci5hZ2UgPSBvYmouYWdlO1xuICAgICAgICAgIGZyYWdTdGFyLm1hdGVyaWFsID0gb2JqLm1lc2gubWF0ZXJpYWwuY2xvbmUoKTtcbiAgICAgICAgICBjb25zdCBmcmFnVHJhaWxQb2ludHMgPSBvYmoudHJhaWxQb2ludHMuc2xpY2UoKTtcbiAgICAgICAgICBjb25zdCBmcmFnVGFpbEdlbyA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpLnNldEZyb21Qb2ludHMoZnJhZ1RyYWlsUG9pbnRzKTtcbiAgICAgICAgICBmcmFnVGFpbEdlby5zZXRBdHRyaWJ1dGUoJ2NvbG9yJywgb2JqLnRhaWwuZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCdjb2xvcicpLmNsb25lKCkpO1xuICAgICAgICAgIGNvbnN0IGZyYWdUYWlsTWF0ID0gb2JqLnRhaWwubWF0ZXJpYWwuY2xvbmUoKTtcbiAgICAgICAgICBjb25zdCBmcmFnVGFpbCA9IG5ldyBUSFJFRS5MaW5lKGZyYWdUYWlsR2VvLCBmcmFnVGFpbE1hdCk7XG4gICAgICAgICAgZnJhZ1RhaWwucG9zaXRpb24uY29weShmcmFnU3Rhci5wb3NpdGlvbik7XG4gICAgICAgICAgc2NlbmUuYWRkKGZyYWdTdGFyKTtcbiAgICAgICAgICBzY2VuZS5hZGQoZnJhZ1RhaWwpO1xuICAgICAgICAgIHNob290aW5nU3RhcnMucHVzaCh7IG1lc2g6IGZyYWdTdGFyLCB0YWlsOiBmcmFnVGFpbCwgdmVsb2NpdHk6IGZyYWdTdGFyLnZlbG9jaXR5LCBkaXI6IG9iai5kaXIsIGFnZTogZnJhZ1N0YXIuYWdlLCBub3JtYWxpemVkTGlmZXRpbWU6IGZyYWdTdGFyLm5vcm1hbGl6ZWRMaWZldGltZSwgdHJhaWxQb2ludHM6IGZyYWdUcmFpbFBvaW50cywgY29sb3I6IG9iai5jb2xvciwgYnJpZ2h0bmVzczogb2JqLmJyaWdodG5lc3MsIGhhc0ZyYWdtZW50ZWQ6IHRydWUgfSk7XG4gICAgICAgICAgb2JqLmhhc0ZyYWdtZW50ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNwYXJrIGJ1cnN0XG4gICAgICAgIGlmICghb2JqLmhhc1NwYXJrZWQgJiYgbm9ybWFsaXplZExpZmUgPiAwLjk1ICYmIE1hdGgucmFuZG9tKCkgPCAwLjEpIHtcbiAgICAgICAgICBmb3IgKGxldCBzID0gMDsgcyA8IDggKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqOCk7IHMrKykge1xuICAgICAgICAgICAgY29uc3Qgc3BhcmtHZW8gPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoMC41ICsgTWF0aC5yYW5kb20oKSowLjUsIDgsIDgpO1xuICAgICAgICAgICAgY29uc3Qgc3BhcmtNYXQgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogMHhmZmY2YzAsIHRyYW5zcGFyZW50OiB0cnVlLCBvcGFjaXR5OiAxLCBibGVuZGluZzogVEhSRUUuQWRkaXRpdmVCbGVuZGluZyB9KTtcbiAgICAgICAgICAgIGNvbnN0IHNwYXJrID0gbmV3IFRIUkVFLk1lc2goc3BhcmtHZW8sIHNwYXJrTWF0KTtcbiAgICAgICAgICAgIHNwYXJrLnBvc2l0aW9uLmNvcHkob2JqLm1lc2gucG9zaXRpb24pO1xuICAgICAgICAgICAgc3Bhcmsuc3BhcmtWZWwgPSBuZXcgVEhSRUUuVmVjdG9yMyhNYXRoLnJhbmRvbSgpLTAuNSwgTWF0aC5yYW5kb20oKS0wLjUsIE1hdGgucmFuZG9tKCktMC41KS5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhcigwLjUgKyBNYXRoLnJhbmRvbSgpKjEuMik7XG4gICAgICAgICAgICBzcGFyay5zcGFya0xpZmUgPSAxMiArIE1hdGgucmFuZG9tKCkqMTA7XG4gICAgICAgICAgICBzcGFyay5zcGFya0FnZSA9IDA7XG4gICAgICAgICAgICBzY2VuZS5hZGQoc3BhcmspO1xuICAgICAgICAgICAgaWYgKCF3aW5kb3cuX3N0YXJTcGFya3MpIHdpbmRvdy5fc3RhclNwYXJrcyA9IFtdO1xuICAgICAgICAgICAgd2luZG93Ll9zdGFyU3BhcmtzLnB1c2goc3BhcmspO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmouaGFzU3BhcmtlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmxhc2hcbiAgICAgICAgaWYgKCFvYmouaGFzRmxhc2hlZCAmJiBub3JtYWxpemVkTGlmZSA+IDAuOTggJiYgTWF0aC5yYW5kb20oKSA8IDAuMikge1xuICAgICAgICAgIGNvbnN0IGZsYXNoR2VvID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDEsIDE2LCAxNik7XG4gICAgICAgICAgY29uc3QgZmxhc2hNYXQgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogMHhmZmZmZWUsIHRyYW5zcGFyZW50OiB0cnVlLCBvcGFjaXR5OiAwLjgsIGJsZW5kaW5nOiBUSFJFRS5BZGRpdGl2ZUJsZW5kaW5nIH0pO1xuICAgICAgICAgIGNvbnN0IGZsYXNoID0gbmV3IFRIUkVFLk1lc2goZmxhc2hHZW8sIGZsYXNoTWF0KTtcbiAgICAgICAgICBmbGFzaC5wb3NpdGlvbi5jb3B5KG9iai5tZXNoLnBvc2l0aW9uKTtcbiAgICAgICAgICBzY2VuZS5hZGQoZmxhc2gpO1xuICAgICAgICAgIGlmICghd2luZG93Ll9zdGFyRmxhc2hlcykgd2luZG93Ll9zdGFyRmxhc2hlcyA9IFtdO1xuICAgICAgICAgIHdpbmRvdy5fc3RhckZsYXNoZXMucHVzaCh7IG1lc2g6IGZsYXNoLCBhZ2U6IDAgfSk7XG4gICAgICAgICAgb2JqLmhhc0ZsYXNoZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZhZGUgb3V0IGFzIGl0IGdldHMgZmFyIGF3YXlcbiAgICAgICAgY29uc3QgZGlzdCA9IG9iai5tZXNoLnBvc2l0aW9uLmRpc3RhbmNlVG8oY2FtZXJhLnBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgZmFkZVN0YXJ0ID0gc3Rhck1heERpc3RhbmNlICogMC41O1xuICAgICAgICBpZiAoZGlzdCA+IGZhZGVTdGFydCkge1xuICAgICAgICAgIGNvbnN0IGZhZGUgPSAxIC0gKGRpc3QgLSBmYWRlU3RhcnQpIC8gKHN0YXJNYXhEaXN0YW5jZSAtIGZhZGVTdGFydCk7XG4gICAgICAgICAgb2JqLm1lc2gubWF0ZXJpYWwub3BhY2l0eSA9IE1hdGgubWF4KDAsIGZhZGUpO1xuICAgICAgICAgIG9iai5tZXNoLm1hdGVyaWFsLnRyYW5zcGFyZW50ID0gdHJ1ZTtcbiAgICAgICAgICBvYmoudGFpbC5tYXRlcmlhbC5vcGFjaXR5ID0gTWF0aC5tYXgoMCwgZmFkZSAqIDAuOCk7XG4gICAgICAgICAgb2JqLnRhaWwubWF0ZXJpYWwudHJhbnNwYXJlbnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlbW92ZSB3aGVuIG91dCBvZiBib3VuZHMgb3IgZnVsbHkgZmFkZWQgb3IgbGlmZSBlbmRlZFxuICAgICAgICBpZiAobm9ybWFsaXplZExpZmUgPj0gMS4wIHx8IGRpc3QgPiBzdGFyTWF4RGlzdGFuY2UgfHwgb2JqLm1lc2gubWF0ZXJpYWwub3BhY2l0eSA8PSAwLjAxKSB7XG4gICAgICAgICAgc2NlbmUucmVtb3ZlKG9iai5tZXNoKTtcbiAgICAgICAgICBzY2VuZS5yZW1vdmUob2JqLnRhaWwpO1xuICAgICAgICAgIHNob290aW5nU3RhcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBBbmltYXRlIHNwYXJrc1xuICAgICAgaWYgKHdpbmRvdy5fc3RhclNwYXJrcykge1xuICAgICAgICBmb3IgKGxldCBpID0gd2luZG93Ll9zdGFyU3BhcmtzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgY29uc3Qgc3BhcmsgPSB3aW5kb3cuX3N0YXJTcGFya3NbaV07XG4gICAgICAgICAgc3BhcmsucG9zaXRpb24uYWRkKHNwYXJrLnNwYXJrVmVsKTtcbiAgICAgICAgICBzcGFyay5zcGFya0FnZSsrO1xuICAgICAgICAgIHNwYXJrLm1hdGVyaWFsLm9wYWNpdHkgKj0gMC44NTtcbiAgICAgICAgICBpZiAoc3Bhcmsuc3BhcmtBZ2UgPiBzcGFyay5zcGFya0xpZmUpIHtcbiAgICAgICAgICAgIHNjZW5lLnJlbW92ZShzcGFyayk7XG4gICAgICAgICAgICB3aW5kb3cuX3N0YXJTcGFya3Muc3BsaWNlKGksIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQW5pbWF0ZSBmbGFzaGVzXG4gICAgICBpZiAod2luZG93Ll9zdGFyRmxhc2hlcykge1xuICAgICAgICBmb3IgKGxldCBpID0gd2luZG93Ll9zdGFyRmxhc2hlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGNvbnN0IGZsYXNoID0gd2luZG93Ll9zdGFyRmxhc2hlc1tpXTtcbiAgICAgICAgICBmbGFzaC5tZXNoLnNjYWxlLm11bHRpcGx5U2NhbGFyKDEuMTUpO1xuICAgICAgICAgIGZsYXNoLm1lc2gubWF0ZXJpYWwub3BhY2l0eSAqPSAwLjg1O1xuICAgICAgICAgIGZsYXNoLmFnZSsrO1xuICAgICAgICAgIGlmIChmbGFzaC5hZ2UgPiAxMCkge1xuICAgICAgICAgICAgc2NlbmUucmVtb3ZlKGZsYXNoLm1lc2gpO1xuICAgICAgICAgICAgd2luZG93Ll9zdGFyRmxhc2hlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIC0tLSBTdGFyZmllbGQgbG9naWMgLS0tXG4gICAgICBjb25zdCBzcURpc3QgPSBzdGFyTWF4RGlzdGFuY2UgKiBzdGFyTWF4RGlzdGFuY2U7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc2l0aW9ucy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICBjb25zdCBkeCA9IHBvc2l0aW9uc1tpXSAtIHZpcnR1YWxDYW1lcmFQb3MueDtcbiAgICAgICAgY29uc3QgZHkgPSBwb3NpdGlvbnNbaSArIDFdIC0gdmlydHVhbENhbWVyYVBvcy55O1xuICAgICAgICBjb25zdCBkeiA9IHBvc2l0aW9uc1tpICsgMl0gLSB2aXJ0dWFsQ2FtZXJhUG9zLno7XG4gICAgICAgIGlmIChkeCpkeCArIGR5KmR5ICsgZHoqZHogPiBzcURpc3QpIHtcbiAgICAgICAgICAvLyBQbGFjZSBpbiBhIHRoaWNrIHNwaGVyaWNhbCBzaGVsbCBhcm91bmQgdGhlIHZpcnR1YWwgY2FtZXJhLCBuZXZlciB0b28gY2xvc2VcbiAgICAgICAgICBjb25zdCBtaW5SYWRpdXMgPSBzdGFyTWF4RGlzdGFuY2UgKiAwLjg7XG4gICAgICAgICAgY29uc3QgbWF4UmFkaXVzID0gc3Rhck1heERpc3RhbmNlO1xuICAgICAgICAgIGNvbnN0IHIgPSBtaW5SYWRpdXMgKyBNYXRoLnJhbmRvbSgpICogKG1heFJhZGl1cyAtIG1pblJhZGl1cyk7XG4gICAgICAgICAgY29uc3QgdGhldGEgPSBNYXRoLnJhbmRvbSgpICogMiAqIE1hdGguUEk7XG4gICAgICAgICAgY29uc3QgcGhpID0gTWF0aC5hY29zKDIgKiBNYXRoLnJhbmRvbSgpIC0gMSk7XG4gICAgICAgICAgcG9zaXRpb25zW2ldID0gdmlydHVhbENhbWVyYVBvcy54ICsgciAqIE1hdGguc2luKHBoaSkgKiBNYXRoLmNvcyh0aGV0YSk7XG4gICAgICAgICAgcG9zaXRpb25zW2krMV0gPSB2aXJ0dWFsQ2FtZXJhUG9zLnkgKyByICogTWF0aC5zaW4ocGhpKSAqIE1hdGguc2luKHRoZXRhKTtcbiAgICAgICAgICBwb3NpdGlvbnNbaSsyXSA9IHZpcnR1YWxDYW1lcmFQb3MueiArIHIgKiBNYXRoLmNvcyhwaGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTsgLy8gQWxyZWFkeSBzZXQgYWJvdmVcblxuICAgICAgLy8gUm9idXN0IHN0YXJmaWVsZCBjb2xvciB1cGRhdGUgdG8gcHJldmVudCBzdHVjayB3aGl0ZSBkb3RzXG4gICAgICBjb25zdCBjb2xBcnIgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yLmFycmF5O1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgY29uc3QgaWR4ID0gaSAvIDM7XG4gICAgICAgIGNvbnN0IGR4ID0gcG9zaXRpb25zW2ldIC0gdmlydHVhbENhbWVyYVBvcy54O1xuICAgICAgICBjb25zdCBkeSA9IHBvc2l0aW9uc1tpICsgMV0gLSB2aXJ0dWFsQ2FtZXJhUG9zLnk7XG4gICAgICAgIGNvbnN0IGR6ID0gcG9zaXRpb25zW2kgKyAyXSAtIHZpcnR1YWxDYW1lcmFQb3MuejtcbiAgICAgICAgY29uc3QgZGlzdCA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSArIGR6ICogZHopO1xuICAgICAgICBpZiAodGltZXJzW2lkeF0gPiAwKSB7XG4gICAgICAgICAgdGltZXJzW2lkeF0tLTtcbiAgICAgICAgICBpZiAodGltZXJzW2lkeF0gPT09IDApIHtcbiAgICAgICAgICAgIC8vIFRpbWVyIGV4cGlyZWQsIHJlc3RvcmUgY29sb3JcbiAgICAgICAgICAgIHNwYXJrQ29sb3JzW2ldID0gb3JpZ2luYWxDb2xvcnNbaV07XG4gICAgICAgICAgICBzcGFya0NvbG9yc1tpKzFdID0gb3JpZ2luYWxDb2xvcnNbaSsxXTtcbiAgICAgICAgICAgIHNwYXJrQ29sb3JzW2krMl0gPSBvcmlnaW5hbENvbG9yc1tpKzJdO1xuICAgICAgICAgICAgY29sQXJyW2ldID0gb3JpZ2luYWxDb2xvcnNbaV07XG4gICAgICAgICAgICBjb2xBcnJbaSsxXSA9IG9yaWdpbmFsQ29sb3JzW2krMV07XG4gICAgICAgICAgICBjb2xBcnJbaSsyXSA9IG9yaWdpbmFsQ29sb3JzW2krMl07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbEFycltpXSA9IHNwYXJrQ29sb3JzW2ldO1xuICAgICAgICAgICAgY29sQXJyW2krMV0gPSBzcGFya0NvbG9yc1tpKzFdO1xuICAgICAgICAgICAgY29sQXJyW2krMl0gPSBzcGFya0NvbG9yc1tpKzJdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkaXN0ID4gc3Rhck1heERpc3RhbmNlICogMC4zICYmIE1hdGgucmFuZG9tKCkgPCAwLjA1KSB7XG4gICAgICAgICAgdGltZXJzW2lkeF0gPSBzcGFya2xlRHVyYXRpb247XG4gICAgICAgICAgY29uc3QgYyA9IHBhbGV0dGVbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcGFsZXR0ZS5sZW5ndGgpXTtcbiAgICAgICAgICBzcGFya0NvbG9yc1tpXSA9IGNbMF07XG4gICAgICAgICAgc3BhcmtDb2xvcnNbaSsxXSA9IGNbMV07XG4gICAgICAgICAgc3BhcmtDb2xvcnNbaSsyXSA9IGNbMl07XG4gICAgICAgICAgY29sQXJyW2ldID0gc3BhcmtDb2xvcnNbaV07XG4gICAgICAgICAgY29sQXJyW2krMV0gPSBzcGFya0NvbG9yc1tpKzFdO1xuICAgICAgICAgIGNvbEFycltpKzJdID0gc3BhcmtDb2xvcnNbaSsyXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzcGFya0NvbG9yc1tpXSA9IG9yaWdpbmFsQ29sb3JzW2ldO1xuICAgICAgICAgIHNwYXJrQ29sb3JzW2krMV0gPSBvcmlnaW5hbENvbG9yc1tpKzFdO1xuICAgICAgICAgIHNwYXJrQ29sb3JzW2krMl0gPSBvcmlnaW5hbENvbG9yc1tpKzJdO1xuICAgICAgICAgIGNvbEFycltpXSA9IG9yaWdpbmFsQ29sb3JzW2ldO1xuICAgICAgICAgIGNvbEFycltpKzFdID0gb3JpZ2luYWxDb2xvcnNbaSsxXTtcbiAgICAgICAgICBjb2xBcnJbaSsyXSA9IG9yaWdpbmFsQ29sb3JzW2krMl07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMuY29sb3IubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gRGVmZW5zaXZlOiBsb2cgZXJyb3Igd2l0aCBjb250ZXh0XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1N0YXJmaWVsZCBhbmltYXRpb24gZXJyb3I6JywgZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgYW5pbWF0ZSgpOyAvLyBTdGFydCB0aGUgcmVuZGVyIGxvb3BcblxuICAgIGNvbnN0IG9uUmVzaXplID0gKCkgPT4ge1xuICAgICAgY2FtZXJhLmFzcGVjdCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgfTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25SZXNpemUpXG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uU2Nyb2xsKVxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uUmVzaXplKVxuICAgICAgbW91bnQucmVtb3ZlQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudClcbiAgICB9XG4gIH0sIFtdKVxuXG4gIHJldHVybiA8ZGl2IHJlZj17bW91bnRSZWZ9IC8+XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXJmaWVsZFxuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlRWZmZWN0IiwidXNlUmVmIiwiVEhSRUUiLCJTdGFyZmllbGQiLCJtb3VudFJlZiIsImN1cnJlbnQiLCJtb3VudCIsInN0eWxlIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0Iiwid2lkdGgiLCJoZWlnaHQiLCJ6SW5kZXgiLCJzY2VuZSIsIlNjZW5lIiwiY2FtZXJhIiwiUGVyc3BlY3RpdmVDYW1lcmEiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJzZXQiLCJ2aXJ0dWFsQ2FtZXJhUG9zIiwiVmVjdG9yMyIsInJlbmRlcmVyIiwiV2ViR0xSZW5kZXJlciIsImFudGlhbGlhcyIsInNldFBpeGVsUmF0aW8iLCJkZXZpY2VQaXhlbFJhdGlvIiwic2V0U2l6ZSIsInNldENsZWFyQ29sb3IiLCJhcHBlbmRDaGlsZCIsImRvbUVsZW1lbnQiLCJzdGFyQ291bnQiLCJzdGFyTWF4RGlzdGFuY2UiLCJzdGFyU3BlZWQiLCJnZW9tZXRyeSIsIkJ1ZmZlckdlb21ldHJ5IiwicG9zaXRpb25zIiwic3RhcnNQbGFjZWQiLCJNYXRoIiwicmFuZG9tIiwiY2x1c3RlclRoZXRhIiwiUEkiLCJjbHVzdGVyUGhpIiwiYWNvcyIsImNsdXN0ZXJSIiwiY2x1c3RlckNlbnRlciIsInNpbiIsImNvcyIsImNsdXN0ZXJTaXplIiwiZmxvb3IiLCJjIiwib2Zmc2V0VGhldGEiLCJvZmZzZXRQaGkiLCJvZmZzZXRSIiwicHVzaCIsInRoZXRhIiwicGhpIiwiciIsInNldEF0dHJpYnV0ZSIsIkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUiLCJwYWxldHRlIiwiY29sb3JzIiwiaSIsImxlbmd0aCIsIm9yaWdpbmFsQ29sb3JzIiwiYXR0cmlidXRlcyIsImNvbG9yIiwiYXJyYXkiLCJzbGljZSIsInRpbWVycyIsIkZsb2F0MzJBcnJheSIsInNwYXJrQ29sb3JzIiwic3BhcmtsZUR1cmF0aW9uIiwibWF0ZXJpYWwiLCJQb2ludHNNYXRlcmlhbCIsInNpemUiLCJzaXplQXR0ZW51YXRpb24iLCJ2ZXJ0ZXhDb2xvcnMiLCJzdGFycyIsIlBvaW50cyIsImFkZCIsInRhcmdldFkiLCJkYW1waW5nIiwib25TY3JvbGwiLCJwY3QiLCJzY3JvbGxZIiwiZG9jdW1lbnQiLCJib2R5Iiwic2Nyb2xsSGVpZ2h0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInRhaWxMZW5ndGgiLCJzaG9vdGluZ1N0YXJzIiwic2hvb3RpbmdTdGFyQ29vbGRvd24iLCJzcGF3blNob290aW5nU3RhciIsImRpciIsIm5vcm1hbGl6ZSIsIm1pbkRpc3QiLCJtYXhEaXN0IiwiZGlzdCIsInNwYXduUG9zIiwiY2xvbmUiLCJtdWx0aXBseVNjYWxhciIsInRhbmdlbnQiLCJzdWIiLCJwcm9qZWN0T25WZWN0b3IiLCJ0YW5nZW50aWFsU3BlZWQiLCJyYWRpYWxTcGVlZCIsInZlbG9jaXR5IiwidmlicmFudENvbG9ycyIsImJyaWdodG5lc3MiLCJnZW8iLCJTcGhlcmVHZW9tZXRyeSIsIm1hdCIsIk1lc2hQaHlzaWNhbE1hdGVyaWFsIiwiZW1pc3NpdmUiLCJlbWlzc2l2ZUludGVuc2l0eSIsIm1ldGFsbmVzcyIsInJvdWdobmVzcyIsInRyYW5zbWlzc2lvbiIsIm9wYWNpdHkiLCJ0cmFuc3BhcmVudCIsImNsZWFyY29hdCIsImNsZWFyY29hdFJvdWdobmVzcyIsInN0YXIiLCJNZXNoIiwic3ByaXRlTWFwIiwiVGV4dHVyZUxvYWRlciIsImxvYWQiLCJzcHJpdGVNYXRlcmlhbCIsIlNwcml0ZU1hdGVyaWFsIiwibWFwIiwiYmxlbmRpbmciLCJBZGRpdGl2ZUJsZW5kaW5nIiwic3ByaXRlIiwiU3ByaXRlIiwic2NhbGUiLCJjb3B5Iiwibm9ybWFsaXplZExpZmUiLCJub3JtYWxpemVkTGlmZXRpbWUiLCJhZ2UiLCJ0cmFpbFNlZ21lbnRzIiwidHJhaWxQb2ludHMiLCJzcGlyYWwiLCJjdXJ2ZSIsInB0IiwidGFpbEdlbyIsInNldEZyb21Qb2ludHMiLCJ0YWlsQ29sb3JzIiwiYWxwaGEiLCJyYWluYm93IiwiZ3JhZENvbG9yIiwidGFpbE1hdCIsIkxpbmVCYXNpY01hdGVyaWFsIiwidGFpbCIsIkxpbmUiLCJtZXNoIiwiaGFzRnJhZ21lbnRlZCIsImFuaW1hdGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyb3RhdGlvbiIsInkiLCJmb3J3YXJkIiwiZ2V0V29ybGREaXJlY3Rpb24iLCJ4IiwieiIsIm5lZWRzVXBkYXRlIiwib2JqIiwicGVycCIsInQiLCJsZXJwIiwidGFpbEdyb3ciLCJtaW4iLCJhY3RpdmVTZWdtZW50cyIsInZpc2libGVUcmFpbCIsImdldEF0dHJpYnV0ZSIsImoiLCJEYXRlIiwibm93IiwibWF4Iiwic2V0WFlaVyIsImhlYWRDb2xvciIsIkNvbG9yIiwiZmxpY2tlciIsImRpc3RUb0NhbSIsImRvZkJsdXIiLCJzIiwic3BhcmtsZUdlbyIsInNwYXJrbGVNYXQiLCJNZXNoQmFzaWNNYXRlcmlhbCIsInNwYXJrbGUiLCJzcGFya2xlVmVsIiwidXNlckRhdGEiLCJfc3BhcmtsZXMiLCJmcmFnVmVsIiwiYXBwbHlBeGlzQW5nbGUiLCJmcmFnU3RhciIsImZyYWdUcmFpbFBvaW50cyIsImZyYWdUYWlsR2VvIiwiZnJhZ1RhaWxNYXQiLCJmcmFnVGFpbCIsImhhc1NwYXJrZWQiLCJzcGFya0dlbyIsInNwYXJrTWF0Iiwic3BhcmsiLCJzcGFya1ZlbCIsInNwYXJrTGlmZSIsInNwYXJrQWdlIiwiX3N0YXJTcGFya3MiLCJoYXNGbGFzaGVkIiwiZmxhc2hHZW8iLCJmbGFzaE1hdCIsImZsYXNoIiwiX3N0YXJGbGFzaGVzIiwiZGlzdGFuY2VUbyIsImZhZGVTdGFydCIsImZhZGUiLCJyZW1vdmUiLCJzcGxpY2UiLCJzcURpc3QiLCJkeCIsImR5IiwiZHoiLCJtaW5SYWRpdXMiLCJtYXhSYWRpdXMiLCJjb2xBcnIiLCJpZHgiLCJzcXJ0IiwicmVuZGVyIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwib25SZXNpemUiLCJhc3BlY3QiLCJ1cGRhdGVQcm9qZWN0aW9uTWF0cml4IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbW92ZUNoaWxkIiwiZGl2IiwicmVmIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/Starfield.jsx\n"));

/***/ })

});