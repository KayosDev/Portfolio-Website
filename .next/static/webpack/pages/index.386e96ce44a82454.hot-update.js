"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./components/Starfield.jsx":
/*!**********************************!*\
  !*** ./components/Starfield.jsx ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nvar _s = $RefreshSig$();\n\n\nconst Starfield = ()=>{\n    _s();\n    const mountRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Defensive: always use .current for refs\n        if (!mountRef.current) return;\n        const mount = mountRef.current;\n        mount.style.position = \"fixed\";\n        mount.style.top = \"0\";\n        mount.style.left = \"0\";\n        mount.style.width = \"100%\";\n        mount.style.height = \"100%\";\n        mount.style.zIndex = \"0\";\n        // Scene & Renderer\n        const scene = new three__WEBPACK_IMPORTED_MODULE_2__.Scene();\n        const camera = new three__WEBPACK_IMPORTED_MODULE_2__.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 5000);\n        camera.position.set(0, 0, 0);\n        // Virtual position to simulate infinite travel\n        let virtualCameraPos = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0);\n        const renderer = new three__WEBPACK_IMPORTED_MODULE_2__.WebGLRenderer({\n            antialias: true\n        });\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setClearColor(0x000000, 1);\n        mount.appendChild(renderer.domElement);\n        // Starfield\n        const starCount = 3000;\n        const starMaxDistance = 2000;\n        const starSpeed = 1;\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry();\n        const positions = [];\n        let starsPlaced = 0;\n        while(starsPlaced < starCount){\n            // With 1% chance, spawn a star cluster (10-30 stars)\n            if (Math.random() < 0.01 && starsPlaced < starCount - 10) {\n                const clusterTheta = Math.random() * 2 * Math.PI;\n                const clusterPhi = Math.acos(2 * Math.random() - 1);\n                const clusterR = Math.random() * starMaxDistance;\n                const clusterCenter = [\n                    clusterR * Math.sin(clusterPhi) * Math.cos(clusterTheta),\n                    clusterR * Math.sin(clusterPhi) * Math.sin(clusterTheta),\n                    clusterR * Math.cos(clusterPhi)\n                ];\n                const clusterSize = 10 + Math.floor(Math.random() * 20); // 10-30 stars\n                for(let c = 0; c < clusterSize && starsPlaced < starCount; c++){\n                    // Each star in cluster is within 30 units of center\n                    const offsetTheta = Math.random() * 2 * Math.PI;\n                    const offsetPhi = Math.acos(2 * Math.random() - 1);\n                    const offsetR = Math.random() * 30; // cluster radius\n                    positions.push(clusterCenter[0] + offsetR * Math.sin(offsetPhi) * Math.cos(offsetTheta), clusterCenter[1] + offsetR * Math.sin(offsetPhi) * Math.sin(offsetTheta), clusterCenter[2] + offsetR * Math.cos(offsetPhi));\n                    starsPlaced++;\n                }\n            } else {\n                // Normal single star\n                const theta = Math.random() * 2 * Math.PI;\n                const phi = Math.acos(2 * Math.random() - 1);\n                const r = Math.random() * starMaxDistance;\n                positions.push(r * Math.sin(phi) * Math.cos(theta), r * Math.sin(phi) * Math.sin(theta), r * Math.cos(phi));\n                starsPlaced++;\n            }\n        }\n        geometry.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_2__.Float32BufferAttribute(positions, 3));\n        const palette = [\n            [\n                1.0,\n                0.5,\n                0.5\n            ],\n            [\n                1.0,\n                0.75,\n                0.4\n            ],\n            [\n                1.0,\n                1.0,\n                0.9\n            ],\n            [\n                1.0,\n                1.0,\n                1.0\n            ],\n            [\n                0.4,\n                0.5,\n                1.0\n            ]\n        ];\n        const colors = [];\n        for(let i = 0; i < starCount; i++){\n            const c = palette[Math.floor(Math.random() * palette.length)];\n            colors.push(...c);\n        }\n        geometry.setAttribute(\"color\", new three__WEBPACK_IMPORTED_MODULE_2__.Float32BufferAttribute(colors, 3));\n        const originalColors = geometry.attributes.color.array.slice();\n        const timers = new Float32Array(starCount);\n        const sparkColors = new Float32Array(starCount * 3);\n        const sparkleDuration = 180;\n        const material = new three__WEBPACK_IMPORTED_MODULE_2__.PointsMaterial({\n            size: 3.5,\n            sizeAttenuation: true,\n            vertexColors: true\n        });\n        const stars = new three__WEBPACK_IMPORTED_MODULE_2__.Points(geometry, material);\n        scene.add(stars);\n        let targetY = 0;\n        const damping = 0.05;\n        const onScroll = ()=>{\n            const pct = window.scrollY / (document.body.scrollHeight - window.innerHeight);\n            targetY = pct * Math.PI * 2;\n        };\n        window.addEventListener(\"scroll\", onScroll);\n        // --- Nebula Clouds ---\n        const nebulaTextures = [\n            \"/nebula1.png\",\n            \"/nebula2.png\",\n            \"/nebula3.png\"\n        ];\n        const nebulaClouds = [];\n        function spawnNebulaCloud() {\n            const textureUrl = nebulaTextures[Math.floor(Math.random() * nebulaTextures.length)];\n            const tex = new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader().load(textureUrl);\n            const color = new three__WEBPACK_IMPORTED_MODULE_2__.Color().setHSL(Math.random(), 0.7, 0.5);\n            const mat = new three__WEBPACK_IMPORTED_MODULE_2__.SpriteMaterial({\n                map: tex,\n                color: color,\n                transparent: true,\n                opacity: 0.0,\n                depthWrite: false,\n                blending: three__WEBPACK_IMPORTED_MODULE_2__.AdditiveBlending\n            });\n            const sprite = new three__WEBPACK_IMPORTED_MODULE_2__.Sprite(mat);\n            // Place nebula far from camera, random direction\n            const dir = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1).normalize();\n            const dist = starMaxDistance * (0.7 + Math.random() * 0.3);\n            sprite.position.copy(dir.multiplyScalar(dist));\n            const scale = 400 + Math.random() * 400;\n            sprite.scale.set(scale, scale, 1);\n            sprite.material.opacity = 0.0;\n            scene.add(sprite);\n            nebulaClouds.push({\n                sprite,\n                age: 0,\n                fadeIn: true,\n                fadeOut: false,\n                lifetime: 1200 + Math.random() * 1200,\n                color,\n                rotSpeed: (Math.random() - 0.5) * 0.005\n            });\n        }\n        // --- Shooting Stars ---\n        const tailLength = 32; // Increase for longer tails\n        const shootingStars = [];\n        let shootingStarCooldown = 0;\n        // Spawn a shooting star with a stunning glowing tail\n        function spawnShootingStar() {\n            // Pick a random direction on the sphere for the spawn location\n            const dir = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1).normalize();\n            // Ensure shooting stars never spawn close to the camera (at least 70% of max distance)\n            const minDist = starMaxDistance * 0.7;\n            const maxDist = starMaxDistance * 1.0;\n            const dist = minDist + Math.random() * (maxDist - minDist);\n            const spawnPos = dir.clone().multiplyScalar(dist);\n            // Tangential velocity: perpendicular to dir\n            let tangent = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1);\n            tangent = tangent.sub(tangent.clone().projectOnVector(dir)).normalize();\n            // Mix in a small radial component (inward or outward)\n            const tangentialSpeed = starSpeed * (2.5 + Math.random() * 2.5); // much faster\n            const radialSpeed = starSpeed * (Math.random() - 0.5) * 0.3; // more dramatic\n            const velocity = tangent.multiplyScalar(tangentialSpeed).add(dir.clone().multiplyScalar(radialSpeed));\n            // Stunning color gradient for the head\n            const vibrantColors = [\n                0xffe066,\n                0xff66cc,\n                0x66ccff,\n                0xffffff,\n                0x80ffea,\n                0xfff2cc,\n                0xffc080,\n                0x80c0ff,\n                0xff80b3\n            ];\n            const color = vibrantColors[Math.floor(Math.random() * vibrantColors.length)];\n            // Star brightness and size (always small and subtle)\n            const brightness = 2.5 + Math.random() * 1.5;\n            const geo = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(0.7 + Math.random() * 0.5, 16, 16); // Small sphere\n            const mat = new three__WEBPACK_IMPORTED_MODULE_2__.MeshPhysicalMaterial({\n                color: color,\n                emissive: color,\n                emissiveIntensity: 2.5,\n                metalness: 0.7,\n                roughness: 0.3,\n                transmission: 0.7,\n                opacity: 0.98,\n                transparent: true,\n                clearcoat: 0.8,\n                clearcoatRoughness: 0.2\n            });\n            const star = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(geo, mat);\n            // Add a glowing sprite for extra glow\n            const spriteMap = new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader().load(\"https://raw.githubusercontent.com/mrdoob/three.js/master/examples/textures/sprites/glow.png\");\n            const spriteMaterial = new three__WEBPACK_IMPORTED_MODULE_2__.SpriteMaterial({\n                map: spriteMap,\n                color: color,\n                opacity: 0.8,\n                blending: three__WEBPACK_IMPORTED_MODULE_2__.AdditiveBlending\n            });\n            const sprite = new three__WEBPACK_IMPORTED_MODULE_2__.Sprite(spriteMaterial);\n            sprite.scale.set(30, 30, 1);\n            sprite.position.copy(star.position);\n            star.add(sprite);\n            // Add dynamic spark burst at the head\n            const sparkCount = 18 + Math.floor(Math.random() * 8);\n            const sparkGroup = new three__WEBPACK_IMPORTED_MODULE_2__.Group();\n            for(let i = 0; i < sparkCount; i++){\n                const sparkMat = new three__WEBPACK_IMPORTED_MODULE_2__.MeshBasicMaterial({\n                    color: vibrantColors[Math.floor(Math.random() * vibrantColors.length)],\n                    transparent: true,\n                    opacity: 0.8\n                });\n                const sparkGeo = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(0.07 + Math.random() * 0.06, 8, 8);\n                const spark = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(sparkGeo, sparkMat);\n                const angle = i / sparkCount * Math.PI * 2;\n                spark.position.set(Math.cos(angle) * 1.2, Math.sin(angle) * 1.2, Math.random() * 0.4 - 0.2);\n                sparkGroup.add(spark);\n            }\n            sparkGroup.name = \"sparkBurst\";\n            star.add(sparkGroup);\n            star.position.copy(spawnPos);\n            star.velocity = velocity;\n            star.normalizedLife = 0.0;\n            star.normalizedLifetime = 80 + Math.random() * 80; // Longer, more dramatic\n            star.age = 0;\n            // --- Stunning Meteor Tail (very long, multi-color, glowing, fading, and 3D curve) ---\n            const trailSegments = tailLength * 3; // Even longer tail\n            const trailPoints = [];\n            for(let i = 0; i < trailSegments; i++){\n                // Add a 3D spiral/curve for more depth\n                const spiral = Math.sin(i * 0.25) * 8;\n                const curve = Math.cos(i * 0.15) * 4;\n                const pt = star.position.clone().add(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(spiral, curve, -i * 3));\n                trailPoints.push(pt);\n            }\n            const tailGeo = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry().setFromPoints(trailPoints);\n            // Per-vertex color (multi-color rainbow gradient)\n            const tailColors = [];\n            for(let i = 0; i < trailSegments; i++){\n                // Alpha fades out along the tail\n                const alpha = (1 - i / (trailSegments - 1)) * 0.99;\n                // Rainbow gradient\n                const rainbow = [\n                    0xffe066,\n                    0xff66cc,\n                    0x66ccff,\n                    0xffffff,\n                    0x80ffea,\n                    0xfff2cc,\n                    0xffc080,\n                    0x80c0ff,\n                    0xff80b3\n                ];\n                const gradColor = rainbow[Math.floor(i / trailSegments * rainbow.length)];\n                tailColors.push((gradColor >> 16 & 255) / 255, (gradColor >> 8 & 255) / 255, (gradColor & 255) / 255, alpha);\n            }\n            tailGeo.setAttribute(\"color\", new three__WEBPACK_IMPORTED_MODULE_2__.Float32BufferAttribute(tailColors, 4));\n            // Additive blending for glow\n            const tailMat = new three__WEBPACK_IMPORTED_MODULE_2__.LineBasicMaterial({\n                vertexColors: true,\n                transparent: true,\n                opacity: 1.0,\n                blending: three__WEBPACK_IMPORTED_MODULE_2__.AdditiveBlending\n            });\n            const tail = new three__WEBPACK_IMPORTED_MODULE_2__.Line(tailGeo, tailMat);\n            tail.position.copy(star.position);\n            // Add to scene\n            scene.add(star);\n            scene.add(tail);\n            shootingStars.push({\n                mesh: star,\n                tail,\n                velocity: star.velocity,\n                dir,\n                age: 0,\n                normalizedLifetime: star.normalizedLifetime,\n                trailPoints,\n                color,\n                brightness,\n                hasFragmented: false\n            });\n        }\n        const animate = ()=>{\n            try {\n                requestAnimationFrame(animate);\n                // Occasionally spawn a nebula cloud\n                // DEV: Spawn a lot of nebulae for testing\n                if (Math.random() < 0.25 && nebulaClouds.length < 30) {\n                    spawnNebulaCloud();\n                }\n                // Animate nebula clouds\n                for(let i = nebulaClouds.length - 1; i >= 0; i--){\n                    const cloud = nebulaClouds[i];\n                    cloud.age++;\n                    // Fade in\n                    if (cloud.fadeIn && cloud.sprite.material.opacity < 0.55) {\n                        cloud.sprite.material.opacity += 0.009;\n                        if (cloud.sprite.material.opacity >= 0.55) cloud.fadeIn = false;\n                    }\n                    // Fade out\n                    if (cloud.age > cloud.lifetime * 0.7) {\n                        cloud.fadeOut = true;\n                    }\n                    if (cloud.fadeOut) {\n                        cloud.sprite.material.opacity -= 0.006;\n                    }\n                    // Remove when fully faded\n                    if (cloud.sprite.material.opacity <= 0) {\n                        scene.remove(cloud.sprite);\n                        nebulaClouds.splice(i, 1);\n                        continue;\n                    }\n                    // Slow drift and rotation\n                    cloud.sprite.position.x += Math.sin(cloud.age * 0.001 + i) * 0.09;\n                    cloud.sprite.position.y += Math.cos(cloud.age * 0.0012 - i) * 0.07;\n                    cloud.sprite.material.rotation += cloud.rotSpeed;\n                    // Animate color gently\n                    cloud.sprite.material.color.offsetHSL(0.0007 * Math.sin(cloud.age * 0.0007 + i), 0, 0);\n                }\n                camera.rotation.y += (targetY - camera.rotation.y) * damping;\n                // Move the virtual camera position in the direction the camera is facing\n                const forward = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n                camera.getWorldDirection(forward);\n                virtualCameraPos.add(forward.multiplyScalar(starSpeed));\n                // Offset all stars by -virtualCameraPos (floating origin)\n                for(let i = 0; i < positions.length; i += 3){\n                    geometry.attributes.position.array[i] = positions[i] - virtualCameraPos.x;\n                    geometry.attributes.position.array[i + 1] = positions[i + 1] - virtualCameraPos.y;\n                    geometry.attributes.position.array[i + 2] = positions[i + 2] - virtualCameraPos.z;\n                }\n                geometry.attributes.position.needsUpdate = true;\n                // --- Shooting star spawning ---\n                // DEV: Make shooting stars super common (spawn every frame if cooldown allows)\n                if (shootingStarCooldown <= 0 && Math.random() < 0.1) {\n                    spawnShootingStar();\n                    // Subtle camera shake when a shooting star appears\n                    if (camera) {\n                        const shakeStrength = 0.06 + Math.random() * 0.04;\n                        camera.position.x += (Math.random() - 0.5) * shakeStrength;\n                        camera.position.y += (Math.random() - 0.5) * shakeStrength;\n                    }\n                    shootingStarCooldown = 10 + Math.random() * 10; // Longer cooldown for perf\n                } else if (shootingStarCooldown > 0) {\n                    shootingStarCooldown--;\n                }\n                // Animate and clean up shooting stars\n                for(let i = shootingStars.length - 1; i >= 0; i--){\n                    const obj = shootingStars[i];\n                    // Animate spark burst (fade and expand)\n                    if (obj.mesh.children) {\n                        const sparks = obj.mesh.children.find((child)=>child.name === \"sparkBurst\");\n                        if (sparks) {\n                            for(let j = 0; j < sparks.children.length; j++){\n                                const spark = sparks.children[j];\n                                spark.material.opacity *= 0.96; // Fade\n                                spark.scale.multiplyScalar(1.03); // Expand\n                            }\n                        }\n                    }\n                    // Animate tail shimmer and color cycling\n                    if (obj.tail && obj.trailPoints) {\n                        const time = performance.now() * 0.001;\n                        const tailGeo = obj.tail.geometry;\n                        const tailColors = tailGeo.getAttribute(\"color\");\n                        for(let k = 0; k < tailColors.count; k++){\n                            // Cycle hue\n                            let r = tailColors.getX(k), g = tailColors.getY(k), b = tailColors.getZ(k);\n                            // Convert to HSL\n                            const max = Math.max(r, g, b), min = Math.min(r, g, b);\n                            let h, s, l;\n                            l = (max + min) / 2;\n                            if (max === min) {\n                                h = s = 0;\n                            } else {\n                                const d = max - min;\n                                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n                                switch(max){\n                                    case r:\n                                        h = (g - b) / d + (g < b ? 6 : 0);\n                                        break;\n                                    case g:\n                                        h = (b - r) / d + 2;\n                                        break;\n                                    case b:\n                                        h = (r - g) / d + 4;\n                                        break;\n                                }\n                                h /= 6;\n                            }\n                            h = (h + 0.25 * Math.sin(time + k * 0.2)) % 1.0; // Animate hue\n                            // Convert back to RGB\n                            let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                            let p = 2 * l - q;\n                            let tr = h + 1 / 3, tg = h, tb = h - 1 / 3;\n                            const hue2rgb = (p, q, t)=>{\n                                if (t < 0) t += 1;\n                                if (t > 1) t -= 1;\n                                if (t < 1 / 6) return p + (q - p) * 6 * t;\n                                if (t < 1 / 2) return q;\n                                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n                                return p;\n                            };\n                            tailColors.setX(k, hue2rgb(p, q, tr));\n                            tailColors.setY(k, hue2rgb(p, q, tg));\n                            tailColors.setZ(k, hue2rgb(p, q, tb));\n                            // Shimmer: modulate alpha\n                            tailColors.setW(k, tailColors.getW(k) * (0.97 + 0.03 * Math.sin(time * 8 + k)));\n                        }\n                        tailColors.needsUpdate = true;\n                    }\n                    // Straight-line trajectory\n                    obj.mesh.position.add(obj.velocity);\n                    obj.tail.position.copy(obj.mesh.position);\n                    // Animate tail (no lerp, just drag)\n                    obj.age++;\n                    const normalizedLife = obj.age / obj.normalizedLifetime;\n                    obj.trailPoints.unshift(obj.mesh.position.clone());\n                    if (obj.trailPoints.length > tailLength * 3) obj.trailPoints.pop();\n                    let tailGrow = Math.min(1, normalizedLife / 0.3);\n                    let activeSegments = Math.floor(obj.trailPoints.length * tailGrow);\n                    if (activeSegments < 2) activeSegments = 2;\n                    const visibleTrail = obj.trailPoints.slice(0, activeSegments);\n                    obj.tail.geometry.setFromPoints(visibleTrail);\n                    const tailColors = obj.tail.geometry.getAttribute(\"color\");\n                    for(let j = 0; j < visibleTrail.length; j++){\n                        let alpha = (1 - j / (visibleTrail.length - 1)) * 0.95;\n                        alpha *= 0.92 + 0.08 * Math.sin(Date.now() * 0.015 + j * 0.5);\n                        let rainbow = [\n                            0xffc080,\n                            0xffe080,\n                            0xffff80,\n                            0x80ffe6,\n                            0x80c0ff,\n                            0xc080ff\n                        ];\n                        let gradColor = rainbow[j % rainbow.length];\n                        if (normalizedLife > 0.7) alpha *= Math.max(0, 1 - (normalizedLife - 0.7 - 0.2) / 0.3);\n                        tailColors.setXYZW(j, (gradColor >> 16 & 255) / 255, (gradColor >> 8 & 255) / 255, (gradColor & 255) / 255, alpha);\n                    }\n                    tailColors.needsUpdate = true;\n                    // Animate head\n                    let headColor;\n                    if (normalizedLife < 0.5) {\n                        headColor = new three__WEBPACK_IMPORTED_MODULE_2__.Color(obj.color).lerp(new three__WEBPACK_IMPORTED_MODULE_2__.Color(0xffc080), normalizedLife * 2);\n                    } else {\n                        headColor = new three__WEBPACK_IMPORTED_MODULE_2__.Color(0xffc080).lerp(new three__WEBPACK_IMPORTED_MODULE_2__.Color(0xff4000), (normalizedLife - 0.5) * 2);\n                    }\n                    let flicker = 0.95 + 0.13 * Math.sin(Date.now() * 0.07 + Math.random() * 10);\n                    headColor.multiplyScalar(flicker);\n                    obj.mesh.material.color.copy(headColor);\n                    let scale = 1 + 2.2 * Math.sin(Math.PI * normalizedLife);\n                    let distToCam = obj.mesh.position.length();\n                    let dofBlur = distToCam < starMaxDistance * 0.7 ? 0.7 : 1.0;\n                    obj.mesh.scale.set(scale * dofBlur, scale * dofBlur, scale * dofBlur);\n                    // Sparkle burst\n                    if (normalizedLife >= 1 && !obj.hasFragmented) {\n                        for(let s = 0; s < 9; s++){\n                            const sparkleGeo = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(0.7 + Math.random() * 0.8, 8, 8);\n                            const sparkleMat = new three__WEBPACK_IMPORTED_MODULE_2__.MeshBasicMaterial({\n                                color: 0xffffff,\n                                transparent: true,\n                                opacity: 0.7,\n                                blending: three__WEBPACK_IMPORTED_MODULE_2__.AdditiveBlending\n                            });\n                            const sparkle = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(sparkleGeo, sparkleMat);\n                            sparkle.position.copy(obj.mesh.position);\n                            const sparkleVel = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5).normalize().multiplyScalar(2 + Math.random() * 2);\n                            sparkle.userData = {\n                                velocity: sparkleVel,\n                                age: 0\n                            };\n                            scene.add(sparkle);\n                            if (!window._sparkles) window._sparkles = [];\n                            window._sparkles.push(sparkle);\n                        }\n                        const fragVel = obj.velocity.clone().applyAxisAngle(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 1, 0), (Math.random() - 0.5) * 0.3);\n                        const fragStar = obj.mesh.clone();\n                        fragStar.position.copy(obj.mesh.position);\n                        fragStar.velocity = fragVel;\n                        fragStar.normalizedLife = normalizedLife;\n                        fragStar.normalizedLifetime = obj.normalizedLifetime * (0.5 + Math.random() * 0.5);\n                        fragStar.age = obj.age;\n                        fragStar.material = obj.mesh.material.clone();\n                        const fragTrailPoints = obj.trailPoints.slice();\n                        const fragTailGeo = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry().setFromPoints(fragTrailPoints);\n                        fragTailGeo.setAttribute(\"color\", obj.tail.geometry.getAttribute(\"color\").clone());\n                        const fragTailMat = obj.tail.material.clone();\n                        const fragTail = new three__WEBPACK_IMPORTED_MODULE_2__.Line(fragTailGeo, fragTailMat);\n                        fragTail.position.copy(fragStar.position);\n                        scene.add(fragStar);\n                        scene.add(fragTail);\n                        shootingStars.push({\n                            mesh: fragStar,\n                            tail: fragTail,\n                            velocity: fragStar.velocity,\n                            dir: obj.dir,\n                            age: fragStar.age,\n                            normalizedLifetime: fragStar.normalizedLifetime,\n                            trailPoints: fragTrailPoints,\n                            color: obj.color,\n                            brightness: obj.brightness,\n                            hasFragmented: true\n                        });\n                        obj.hasFragmented = true;\n                    }\n                    // Spark burst\n                    if (!obj.hasSparked && normalizedLife > 0.95 && Math.random() < 0.1) {\n                        for(let s = 0; s < 8 + Math.floor(Math.random() * 8); s++){\n                            const sparkGeo = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(0.5 + Math.random() * 0.5, 8, 8);\n                            const sparkMat = new three__WEBPACK_IMPORTED_MODULE_2__.MeshBasicMaterial({\n                                color: 0xfff6c0,\n                                transparent: true,\n                                opacity: 1,\n                                blending: three__WEBPACK_IMPORTED_MODULE_2__.AdditiveBlending\n                            });\n                            const spark = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(sparkGeo, sparkMat);\n                            spark.position.copy(obj.mesh.position);\n                            spark.sparkVel = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5).normalize().multiplyScalar(0.5 + Math.random() * 1.2);\n                            spark.sparkLife = 12 + Math.random() * 10;\n                            spark.sparkAge = 0;\n                            scene.add(spark);\n                            if (!window._starSparks) window._starSparks = [];\n                            window._starSparks.push(spark);\n                        }\n                        obj.hasSparked = true;\n                    }\n                    // Flash\n                    if (!obj.hasFlashed && normalizedLife > 0.98 && Math.random() < 0.2) {\n                        const flashGeo = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(1, 16, 16);\n                        const flashMat = new three__WEBPACK_IMPORTED_MODULE_2__.MeshBasicMaterial({\n                            color: 0xffffee,\n                            transparent: true,\n                            opacity: 0.8,\n                            blending: three__WEBPACK_IMPORTED_MODULE_2__.AdditiveBlending\n                        });\n                        const flash = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(flashGeo, flashMat);\n                        flash.position.copy(obj.mesh.position);\n                        scene.add(flash);\n                        if (!window._starFlashes) window._starFlashes = [];\n                        window._starFlashes.push({\n                            mesh: flash,\n                            age: 0\n                        });\n                        obj.hasFlashed = true;\n                    }\n                    // Fade out as it gets far away\n                    const dist = obj.mesh.position.distanceTo(camera.position);\n                    const fadeStart = starMaxDistance * 0.5;\n                    if (dist > fadeStart) {\n                        const fade = 1 - (dist - fadeStart) / (starMaxDistance - fadeStart);\n                        obj.mesh.material.opacity = Math.max(0, fade);\n                        obj.mesh.material.transparent = true;\n                        obj.tail.material.opacity = Math.max(0, fade * 0.8);\n                        obj.tail.material.transparent = true;\n                    }\n                    // Remove when out of bounds or fully faded or life ended\n                    if (normalizedLife >= 1.0 || dist > starMaxDistance || obj.mesh.material.opacity <= 0.01) {\n                        scene.remove(obj.mesh);\n                        scene.remove(obj.tail);\n                        shootingStars.splice(i, 1);\n                    }\n                }\n                // Animate sparks\n                if (window._starSparks) {\n                    for(let i = window._starSparks.length - 1; i >= 0; i--){\n                        const spark = window._starSparks[i];\n                        spark.position.add(spark.sparkVel);\n                        spark.sparkAge++;\n                        spark.material.opacity *= 0.85;\n                        if (spark.sparkAge > spark.sparkLife) {\n                            scene.remove(spark);\n                            window._starSparks.splice(i, 1);\n                        }\n                    }\n                }\n                // Animate flashes\n                if (window._starFlashes) {\n                    for(let i = window._starFlashes.length - 1; i >= 0; i--){\n                        const flash = window._starFlashes[i];\n                        flash.mesh.scale.multiplyScalar(1.15);\n                        flash.mesh.material.opacity *= 0.85;\n                        flash.age++;\n                        if (flash.age > 10) {\n                            scene.remove(flash.mesh);\n                            window._starFlashes.splice(i, 1);\n                        }\n                    }\n                }\n                // --- Starfield logic ---\n                const sqDist = starMaxDistance * starMaxDistance;\n                for(let i = 0; i < positions.length; i += 3){\n                    const dx = positions[i] - virtualCameraPos.x;\n                    const dy = positions[i + 1] - virtualCameraPos.y;\n                    const dz = positions[i + 2] - virtualCameraPos.z;\n                    if (dx * dx + dy * dy + dz * dz > sqDist) {\n                        // Place in a thick spherical shell around the virtual camera, never too close\n                        const minRadius = starMaxDistance * 0.8;\n                        const maxRadius = starMaxDistance;\n                        const r = minRadius + Math.random() * (maxRadius - minRadius);\n                        const theta = Math.random() * 2 * Math.PI;\n                        const phi = Math.acos(2 * Math.random() - 1);\n                        positions[i] = virtualCameraPos.x + r * Math.sin(phi) * Math.cos(theta);\n                        positions[i + 1] = virtualCameraPos.y + r * Math.sin(phi) * Math.sin(theta);\n                        positions[i + 2] = virtualCameraPos.z + r * Math.cos(phi);\n                    }\n                }\n                // geometry.attributes.position.needsUpdate = true; // Already set above\n                // Robust starfield color update to prevent stuck white dots\n                const colArr = geometry.attributes.color.array;\n                for(let i = 0; i < positions.length; i += 3){\n                    const idx = i / 3;\n                    const dx = positions[i] - virtualCameraPos.x;\n                    const dy = positions[i + 1] - virtualCameraPos.y;\n                    const dz = positions[i + 2] - virtualCameraPos.z;\n                    const dist = Math.sqrt(dx * dx + dy * dy + dz * dz);\n                    if (timers[idx] > 0) {\n                        timers[idx]--;\n                        if (timers[idx] === 0) {\n                            // Timer expired, restore color\n                            sparkColors[i] = originalColors[i];\n                            sparkColors[i + 1] = originalColors[i + 1];\n                            sparkColors[i + 2] = originalColors[i + 2];\n                            colArr[i] = originalColors[i];\n                            colArr[i + 1] = originalColors[i + 1];\n                            colArr[i + 2] = originalColors[i + 2];\n                        } else {\n                            colArr[i] = sparkColors[i];\n                            colArr[i + 1] = sparkColors[i + 1];\n                            colArr[i + 2] = sparkColors[i + 2];\n                        }\n                    } else if (dist > starMaxDistance * 0.3 && Math.random() < 0.05) {\n                        timers[idx] = sparkleDuration;\n                        const c = palette[Math.floor(Math.random() * palette.length)];\n                        sparkColors[i] = c[0];\n                        sparkColors[i + 1] = c[1];\n                        sparkColors[i + 2] = c[2];\n                        colArr[i] = sparkColors[i];\n                        colArr[i + 1] = sparkColors[i + 1];\n                        colArr[i + 2] = sparkColors[i + 2];\n                    } else {\n                        sparkColors[i] = originalColors[i];\n                        sparkColors[i + 1] = originalColors[i + 1];\n                        sparkColors[i + 2] = originalColors[i + 2];\n                        colArr[i] = originalColors[i];\n                        colArr[i + 1] = originalColors[i + 1];\n                        colArr[i + 2] = originalColors[i + 2];\n                    }\n                }\n                geometry.attributes.color.needsUpdate = true;\n                renderer.render(scene, camera);\n            } catch (err) {\n                // Defensive: log error with context\n                console.error(\"Starfield animation error:\", err);\n            }\n        };\n        animate(); // Start the render loop\n        const onResize = ()=>{\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        };\n        window.addEventListener(\"resize\", onResize);\n        return ()=>{\n            window.removeEventListener(\"scroll\", onScroll);\n            window.removeEventListener(\"resize\", onResize);\n            mount.removeChild(renderer.domElement);\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: mountRef\n    }, void 0, false, {\n        fileName: \"/home/kayosdev/Websites/Portfolio/components/Starfield.jsx\",\n        lineNumber: 573,\n        columnNumber: 10\n    }, undefined);\n};\n_s(Starfield, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = Starfield;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Starfield);\nvar _c;\n$RefreshReg$(_c, \"Starfield\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL1N0YXJmaWVsZC5qc3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBaUQ7QUFDbEI7QUFFL0IsTUFBTUksWUFBWTs7SUFDaEIsTUFBTUMsV0FBV0gsNkNBQU1BLENBQUM7SUFFeEJELGdEQUFTQSxDQUFDO1FBQ1IsMENBQTBDO1FBQzFDLElBQUksQ0FBQ0ksU0FBU0MsT0FBTyxFQUFFO1FBQ3ZCLE1BQU1DLFFBQVFGLFNBQVNDLE9BQU87UUFDOUJDLE1BQU1DLEtBQUssQ0FBQ0MsUUFBUSxHQUFHO1FBQ3ZCRixNQUFNQyxLQUFLLENBQUNFLEdBQUcsR0FBRztRQUNsQkgsTUFBTUMsS0FBSyxDQUFDRyxJQUFJLEdBQUc7UUFDbkJKLE1BQU1DLEtBQUssQ0FBQ0ksS0FBSyxHQUFHO1FBQ3BCTCxNQUFNQyxLQUFLLENBQUNLLE1BQU0sR0FBRztRQUNyQk4sTUFBTUMsS0FBSyxDQUFDTSxNQUFNLEdBQUc7UUFFckIsbUJBQW1CO1FBQ25CLE1BQU1DLFFBQVEsSUFBSVosd0NBQVc7UUFDN0IsTUFBTWMsU0FBUyxJQUFJZCxvREFBdUIsQ0FBQyxJQUFJZ0IsT0FBT0MsVUFBVSxHQUFHRCxPQUFPRSxXQUFXLEVBQUUsS0FBSztRQUM1RkosT0FBT1IsUUFBUSxDQUFDYSxHQUFHLENBQUMsR0FBRyxHQUFHO1FBQzFCLCtDQUErQztRQUMvQyxJQUFJQyxtQkFBbUIsSUFBSXBCLDBDQUFhLENBQUMsR0FBRyxHQUFHO1FBQy9DLE1BQU1zQixXQUFXLElBQUl0QixnREFBbUIsQ0FBQztZQUFFd0IsV0FBVztRQUFLO1FBQzNERixTQUFTRyxhQUFhLENBQUNULE9BQU9VLGdCQUFnQjtRQUM5Q0osU0FBU0ssT0FBTyxDQUFDWCxPQUFPQyxVQUFVLEVBQUVELE9BQU9FLFdBQVc7UUFDdERJLFNBQVNNLGFBQWEsQ0FBQyxVQUFVO1FBQ2pDeEIsTUFBTXlCLFdBQVcsQ0FBQ1AsU0FBU1EsVUFBVTtRQUVyQyxZQUFZO1FBQ1osTUFBTUMsWUFBWTtRQUNsQixNQUFNQyxrQkFBa0I7UUFDeEIsTUFBTUMsWUFBWTtRQUNsQixNQUFNQyxXQUFXLElBQUlsQyxpREFBb0I7UUFDekMsTUFBTW9DLFlBQVksRUFBRTtRQUNwQixJQUFJQyxjQUFjO1FBQ2xCLE1BQU9BLGNBQWNOLFVBQVc7WUFDOUIscURBQXFEO1lBQ3JELElBQUlPLEtBQUtDLE1BQU0sS0FBSyxRQUFRRixjQUFjTixZQUFZLElBQUk7Z0JBQ3hELE1BQU1TLGVBQWVGLEtBQUtDLE1BQU0sS0FBSyxJQUFJRCxLQUFLRyxFQUFFO2dCQUNoRCxNQUFNQyxhQUFhSixLQUFLSyxJQUFJLENBQUMsSUFBSUwsS0FBS0MsTUFBTSxLQUFLO2dCQUNqRCxNQUFNSyxXQUFXTixLQUFLQyxNQUFNLEtBQUtQO2dCQUNqQyxNQUFNYSxnQkFBZ0I7b0JBQ3BCRCxXQUFXTixLQUFLUSxHQUFHLENBQUNKLGNBQWNKLEtBQUtTLEdBQUcsQ0FBQ1A7b0JBQzNDSSxXQUFXTixLQUFLUSxHQUFHLENBQUNKLGNBQWNKLEtBQUtRLEdBQUcsQ0FBQ047b0JBQzNDSSxXQUFXTixLQUFLUyxHQUFHLENBQUNMO2lCQUNyQjtnQkFDRCxNQUFNTSxjQUFjLEtBQUtWLEtBQUtXLEtBQUssQ0FBQ1gsS0FBS0MsTUFBTSxLQUFLLEtBQUssY0FBYztnQkFDdkUsSUFBSyxJQUFJVyxJQUFJLEdBQUdBLElBQUlGLGVBQWVYLGNBQWNOLFdBQVdtQixJQUFLO29CQUMvRCxvREFBb0Q7b0JBQ3BELE1BQU1DLGNBQWNiLEtBQUtDLE1BQU0sS0FBSyxJQUFJRCxLQUFLRyxFQUFFO29CQUMvQyxNQUFNVyxZQUFZZCxLQUFLSyxJQUFJLENBQUMsSUFBSUwsS0FBS0MsTUFBTSxLQUFLO29CQUNoRCxNQUFNYyxVQUFVZixLQUFLQyxNQUFNLEtBQUssSUFBSSxpQkFBaUI7b0JBQ3JESCxVQUFVa0IsSUFBSSxDQUNaVCxhQUFhLENBQUMsRUFBRSxHQUFHUSxVQUFVZixLQUFLUSxHQUFHLENBQUNNLGFBQWFkLEtBQUtTLEdBQUcsQ0FBQ0ksY0FDNUROLGFBQWEsQ0FBQyxFQUFFLEdBQUdRLFVBQVVmLEtBQUtRLEdBQUcsQ0FBQ00sYUFBYWQsS0FBS1EsR0FBRyxDQUFDSyxjQUM1RE4sYUFBYSxDQUFDLEVBQUUsR0FBR1EsVUFBVWYsS0FBS1MsR0FBRyxDQUFDSztvQkFFeENmO2dCQUNGO1lBQ0YsT0FBTztnQkFDTCxxQkFBcUI7Z0JBQ3JCLE1BQU1rQixRQUFRakIsS0FBS0MsTUFBTSxLQUFLLElBQUlELEtBQUtHLEVBQUU7Z0JBQ3pDLE1BQU1lLE1BQU1sQixLQUFLSyxJQUFJLENBQUMsSUFBSUwsS0FBS0MsTUFBTSxLQUFLO2dCQUMxQyxNQUFNa0IsSUFBSW5CLEtBQUtDLE1BQU0sS0FBS1A7Z0JBQzFCSSxVQUFVa0IsSUFBSSxDQUNaRyxJQUFJbkIsS0FBS1EsR0FBRyxDQUFDVSxPQUFPbEIsS0FBS1MsR0FBRyxDQUFDUSxRQUM3QkUsSUFBSW5CLEtBQUtRLEdBQUcsQ0FBQ1UsT0FBT2xCLEtBQUtRLEdBQUcsQ0FBQ1MsUUFDN0JFLElBQUluQixLQUFLUyxHQUFHLENBQUNTO2dCQUVmbkI7WUFDRjtRQUNGO1FBQ0FILFNBQVN3QixZQUFZLENBQUMsWUFBWSxJQUFJMUQseURBQTRCLENBQUNvQyxXQUFXO1FBRTlFLE1BQU13QixVQUFVO1lBQ2Q7Z0JBQUM7Z0JBQUs7Z0JBQUs7YUFBSTtZQUNmO2dCQUFDO2dCQUFLO2dCQUFNO2FBQUk7WUFDaEI7Z0JBQUM7Z0JBQUs7Z0JBQUs7YUFBSTtZQUNmO2dCQUFDO2dCQUFLO2dCQUFLO2FBQUk7WUFDZjtnQkFBQztnQkFBSztnQkFBSzthQUFJO1NBQ2hCO1FBQ0QsTUFBTUMsU0FBUyxFQUFFO1FBQ2pCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJL0IsV0FBVytCLElBQUs7WUFDbEMsTUFBTVosSUFBSVUsT0FBTyxDQUFDdEIsS0FBS1csS0FBSyxDQUFDWCxLQUFLQyxNQUFNLEtBQUtxQixRQUFRRyxNQUFNLEVBQUU7WUFDN0RGLE9BQU9QLElBQUksSUFBSUo7UUFDakI7UUFDQWhCLFNBQVN3QixZQUFZLENBQUMsU0FBUyxJQUFJMUQseURBQTRCLENBQUM2RCxRQUFRO1FBRXhFLE1BQU1HLGlCQUFpQjlCLFNBQVMrQixVQUFVLENBQUNDLEtBQUssQ0FBQ0MsS0FBSyxDQUFDQyxLQUFLO1FBQzVELE1BQU1DLFNBQVMsSUFBSUMsYUFBYXZDO1FBQ2hDLE1BQU13QyxjQUFjLElBQUlELGFBQWF2QyxZQUFZO1FBQ2pELE1BQU15QyxrQkFBa0I7UUFFeEIsTUFBTUMsV0FBVyxJQUFJekUsaURBQW9CLENBQUM7WUFBRTJFLE1BQU07WUFBS0MsaUJBQWlCO1lBQU1DLGNBQWM7UUFBSztRQUNqRyxNQUFNQyxRQUFRLElBQUk5RSx5Q0FBWSxDQUFDa0MsVUFBVXVDO1FBQ3pDN0QsTUFBTW9FLEdBQUcsQ0FBQ0Y7UUFFVixJQUFJRyxVQUFVO1FBQ2QsTUFBTUMsVUFBVTtRQUNoQixNQUFNQyxXQUFXO1lBQ2YsTUFBTUMsTUFBTXBFLE9BQU9xRSxPQUFPLEdBQUlDLENBQUFBLFNBQVNDLElBQUksQ0FBQ0MsWUFBWSxHQUFHeEUsT0FBT0UsV0FBVztZQUM3RStELFVBQVVHLE1BQU05QyxLQUFLRyxFQUFFLEdBQUc7UUFDNUI7UUFDQXpCLE9BQU95RSxnQkFBZ0IsQ0FBQyxVQUFVTjtRQUVsQyx3QkFBd0I7UUFDeEIsTUFBTU8saUJBQWlCO1lBQ3JCO1lBQ0E7WUFDQTtTQUNEO1FBQ0QsTUFBTUMsZUFBZSxFQUFFO1FBQ3ZCLFNBQVNDO1lBQ1AsTUFBTUMsYUFBYUgsY0FBYyxDQUFDcEQsS0FBS1csS0FBSyxDQUFDWCxLQUFLQyxNQUFNLEtBQUdtRCxlQUFlM0IsTUFBTSxFQUFFO1lBQ2xGLE1BQU0rQixNQUFNLElBQUk5RixnREFBbUIsR0FBR2dHLElBQUksQ0FBQ0g7WUFDM0MsTUFBTTNCLFFBQVEsSUFBSWxFLHdDQUFXLEdBQUdrRyxNQUFNLENBQUM1RCxLQUFLQyxNQUFNLElBQUksS0FBSztZQUMzRCxNQUFNNEQsTUFBTSxJQUFJbkcsaURBQW9CLENBQUM7Z0JBQUVxRyxLQUFLUDtnQkFBSzVCLE9BQU9BO2dCQUFPb0MsYUFBYTtnQkFBTUMsU0FBUztnQkFBS0MsWUFBWTtnQkFBT0MsVUFBVXpHLG1EQUFzQjtZQUFDO1lBQ3BKLE1BQU0yRyxTQUFTLElBQUkzRyx5Q0FBWSxDQUFDbUc7WUFDaEMsaURBQWlEO1lBQ2pELE1BQU1VLE1BQU0sSUFBSTdHLDBDQUFhLENBQUNzQyxLQUFLQyxNQUFNLEtBQUcsSUFBRSxHQUFHRCxLQUFLQyxNQUFNLEtBQUcsSUFBRSxHQUFHRCxLQUFLQyxNQUFNLEtBQUcsSUFBRSxHQUFHdUUsU0FBUztZQUNoRyxNQUFNQyxPQUFPL0Usa0JBQW1CLE9BQU1NLEtBQUtDLE1BQU0sS0FBRyxHQUFFO1lBQ3REb0UsT0FBT3JHLFFBQVEsQ0FBQzBHLElBQUksQ0FBQ0gsSUFBSUksY0FBYyxDQUFDRjtZQUN4QyxNQUFNRyxRQUFRLE1BQU01RSxLQUFLQyxNQUFNLEtBQUc7WUFDbENvRSxPQUFPTyxLQUFLLENBQUMvRixHQUFHLENBQUMrRixPQUFPQSxPQUFPO1lBQy9CUCxPQUFPbEMsUUFBUSxDQUFDOEIsT0FBTyxHQUFHO1lBQzFCM0YsTUFBTW9FLEdBQUcsQ0FBQzJCO1lBQ1ZoQixhQUFhckMsSUFBSSxDQUFDO2dCQUFFcUQ7Z0JBQVFRLEtBQUs7Z0JBQUdDLFFBQVE7Z0JBQU1DLFNBQVM7Z0JBQU9DLFVBQVUsT0FBT2hGLEtBQUtDLE1BQU0sS0FBRztnQkFBTTJCO2dCQUFPcUQsVUFBVSxDQUFDakYsS0FBS0MsTUFBTSxLQUFHLEdBQUUsSUFBRztZQUFNO1FBQ3BKO1FBRUEseUJBQXlCO1FBQ3pCLE1BQU1pRixhQUFhLElBQUksNEJBQTRCO1FBQ25ELE1BQU1DLGdCQUFnQixFQUFFO1FBQ3hCLElBQUlDLHVCQUF1QjtRQUMzQixxREFBcUQ7UUFDckQsU0FBU0M7WUFDUCwrREFBK0Q7WUFDL0QsTUFBTWQsTUFBTSxJQUFJN0csMENBQWEsQ0FBQ3NDLEtBQUtDLE1BQU0sS0FBRyxJQUFFLEdBQUdELEtBQUtDLE1BQU0sS0FBRyxJQUFFLEdBQUdELEtBQUtDLE1BQU0sS0FBRyxJQUFFLEdBQUd1RSxTQUFTO1lBQ2hHLHVGQUF1RjtZQUN2RixNQUFNYyxVQUFVNUYsa0JBQWtCO1lBQ2xDLE1BQU02RixVQUFVN0Ysa0JBQWtCO1lBQ2xDLE1BQU0rRSxPQUFPYSxVQUFVdEYsS0FBS0MsTUFBTSxLQUFNc0YsQ0FBQUEsVUFBVUQsT0FBTTtZQUN4RCxNQUFNRSxXQUFXakIsSUFBSWtCLEtBQUssR0FBR2QsY0FBYyxDQUFDRjtZQUM1Qyw0Q0FBNEM7WUFDNUMsSUFBSWlCLFVBQVUsSUFBSWhJLDBDQUFhLENBQUNzQyxLQUFLQyxNQUFNLEtBQUcsSUFBRSxHQUFHRCxLQUFLQyxNQUFNLEtBQUcsSUFBRSxHQUFHRCxLQUFLQyxNQUFNLEtBQUcsSUFBRTtZQUN0RnlGLFVBQVVBLFFBQVFDLEdBQUcsQ0FBQ0QsUUFBUUQsS0FBSyxHQUFHRyxlQUFlLENBQUNyQixNQUFNQyxTQUFTO1lBQ3JFLHNEQUFzRDtZQUN0RCxNQUFNcUIsa0JBQWtCbEcsWUFBYSxPQUFNSyxLQUFLQyxNQUFNLEtBQUssR0FBRSxHQUFJLGNBQWM7WUFDL0UsTUFBTTZGLGNBQWNuRyxZQUFhSyxDQUFBQSxLQUFLQyxNQUFNLEtBQUssR0FBRSxJQUFLLEtBQUssZ0JBQWdCO1lBQzdFLE1BQU04RixXQUFXTCxRQUFRZixjQUFjLENBQUNrQixpQkFBaUJuRCxHQUFHLENBQUM2QixJQUFJa0IsS0FBSyxHQUFHZCxjQUFjLENBQUNtQjtZQUV4Rix1Q0FBdUM7WUFDdkMsTUFBTUUsZ0JBQWdCO2dCQUFDO2dCQUFVO2dCQUFVO2dCQUFVO2dCQUFVO2dCQUFVO2dCQUFVO2dCQUFVO2dCQUFVO2FBQVM7WUFDaEgsTUFBTXBFLFFBQVFvRSxhQUFhLENBQUNoRyxLQUFLVyxLQUFLLENBQUNYLEtBQUtDLE1BQU0sS0FBRytGLGNBQWN2RSxNQUFNLEVBQUU7WUFDM0UscURBQXFEO1lBQ3JELE1BQU13RSxhQUFhLE1BQU1qRyxLQUFLQyxNQUFNLEtBQUc7WUFDdkMsTUFBTWlHLE1BQU0sSUFBSXhJLGlEQUFvQixDQUFDLE1BQU1zQyxLQUFLQyxNQUFNLEtBQUcsS0FBSyxJQUFJLEtBQUssZUFBZTtZQUN0RixNQUFNNEQsTUFBTSxJQUFJbkcsdURBQTBCLENBQUM7Z0JBQ3pDa0UsT0FBT0E7Z0JBQ1B5RSxVQUFVekU7Z0JBQ1YwRSxtQkFBbUI7Z0JBQ25CQyxXQUFXO2dCQUNYQyxXQUFXO2dCQUNYQyxjQUFjO2dCQUNkeEMsU0FBUztnQkFDVEQsYUFBYTtnQkFDYjBDLFdBQVc7Z0JBQ1hDLG9CQUFvQjtZQUN0QjtZQUNBLE1BQU1DLE9BQU8sSUFBSWxKLHVDQUFVLENBQUN3SSxLQUFLckM7WUFDakMsc0NBQXNDO1lBQ3RDLE1BQU1pRCxZQUFZLElBQUlwSixnREFBbUIsR0FBR2dHLElBQUksQ0FBQztZQUNqRCxNQUFNcUQsaUJBQWlCLElBQUlySixpREFBb0IsQ0FBQztnQkFBRXFHLEtBQUsrQztnQkFBV2xGLE9BQU9BO2dCQUFPcUMsU0FBUztnQkFBS0UsVUFBVXpHLG1EQUFzQjtZQUFDO1lBQy9ILE1BQU0yRyxTQUFTLElBQUkzRyx5Q0FBWSxDQUFDcUo7WUFDaEMxQyxPQUFPTyxLQUFLLENBQUMvRixHQUFHLENBQUMsSUFBSSxJQUFJO1lBQ3pCd0YsT0FBT3JHLFFBQVEsQ0FBQzBHLElBQUksQ0FBQ2tDLEtBQUs1SSxRQUFRO1lBQ2xDNEksS0FBS2xFLEdBQUcsQ0FBQzJCO1lBQ1Qsc0NBQXNDO1lBQ3RDLE1BQU0yQyxhQUFhLEtBQUtoSCxLQUFLVyxLQUFLLENBQUNYLEtBQUtDLE1BQU0sS0FBRztZQUNqRCxNQUFNZ0gsYUFBYSxJQUFJdkosd0NBQVc7WUFDbEMsSUFBSyxJQUFJOEQsSUFBSSxHQUFHQSxJQUFJd0YsWUFBWXhGLElBQUs7Z0JBQ25DLE1BQU0yRixXQUFXLElBQUl6SixvREFBdUIsQ0FBQztvQkFBRWtFLE9BQU9vRSxhQUFhLENBQUNoRyxLQUFLVyxLQUFLLENBQUNYLEtBQUtDLE1BQU0sS0FBRytGLGNBQWN2RSxNQUFNLEVBQUU7b0JBQUV1QyxhQUFhO29CQUFNQyxTQUFTO2dCQUFJO2dCQUNySixNQUFNb0QsV0FBVyxJQUFJM0osaURBQW9CLENBQUMsT0FBT3NDLEtBQUtDLE1BQU0sS0FBRyxNQUFNLEdBQUc7Z0JBQ3hFLE1BQU1xSCxRQUFRLElBQUk1Six1Q0FBVSxDQUFDMkosVUFBVUY7Z0JBQ3ZDLE1BQU1JLFFBQVEsSUFBS1AsYUFBY2hILEtBQUtHLEVBQUUsR0FBRztnQkFDM0NtSCxNQUFNdEosUUFBUSxDQUFDYSxHQUFHLENBQUNtQixLQUFLUyxHQUFHLENBQUM4RyxTQUFPLEtBQUt2SCxLQUFLUSxHQUFHLENBQUMrRyxTQUFPLEtBQUt2SCxLQUFLQyxNQUFNLEtBQUcsTUFBSTtnQkFDL0VnSCxXQUFXdkUsR0FBRyxDQUFDNEU7WUFDakI7WUFDQUwsV0FBV08sSUFBSSxHQUFHO1lBQ2xCWixLQUFLbEUsR0FBRyxDQUFDdUU7WUFDVEwsS0FBSzVJLFFBQVEsQ0FBQzBHLElBQUksQ0FBQ2M7WUFDbkJvQixLQUFLYixRQUFRLEdBQUdBO1lBQ2hCYSxLQUFLYSxjQUFjLEdBQUc7WUFDdEJiLEtBQUtjLGtCQUFrQixHQUFHLEtBQUsxSCxLQUFLQyxNQUFNLEtBQUssSUFBSSx3QkFBd0I7WUFDM0UyRyxLQUFLL0IsR0FBRyxHQUFHO1lBQ1gsdUZBQXVGO1lBQ3ZGLE1BQU04QyxnQkFBZ0J6QyxhQUFhLEdBQUcsbUJBQW1CO1lBQ3pELE1BQU0wQyxjQUFjLEVBQUU7WUFDdEIsSUFBSyxJQUFJcEcsSUFBSSxHQUFHQSxJQUFJbUcsZUFBZW5HLElBQUs7Z0JBQ3RDLHVDQUF1QztnQkFDdkMsTUFBTXFHLFNBQVM3SCxLQUFLUSxHQUFHLENBQUNnQixJQUFJLFFBQVE7Z0JBQ3BDLE1BQU1zRyxRQUFROUgsS0FBS1MsR0FBRyxDQUFDZSxJQUFJLFFBQVE7Z0JBQ25DLE1BQU11RyxLQUFLbkIsS0FBSzVJLFFBQVEsQ0FBQ3lILEtBQUssR0FBRy9DLEdBQUcsQ0FBQyxJQUFJaEYsMENBQWEsQ0FBQ21LLFFBQVFDLE9BQU8sQ0FBQ3RHLElBQUk7Z0JBQzNFb0csWUFBWTVHLElBQUksQ0FBQytHO1lBQ25CO1lBQ0EsTUFBTUMsVUFBVSxJQUFJdEssaURBQW9CLEdBQUd1SyxhQUFhLENBQUNMO1lBQ3pELGtEQUFrRDtZQUNsRCxNQUFNTSxhQUFhLEVBQUU7WUFDckIsSUFBSyxJQUFJMUcsSUFBSSxHQUFHQSxJQUFJbUcsZUFBZW5HLElBQUs7Z0JBQ3RDLGlDQUFpQztnQkFDakMsTUFBTTJHLFFBQVEsQ0FBQyxJQUFJM0csSUFBS21HLENBQUFBLGdCQUFnQixFQUFDLElBQUs7Z0JBQzlDLG1CQUFtQjtnQkFDbkIsTUFBTVMsVUFBVTtvQkFBQztvQkFBVTtvQkFBVTtvQkFBVTtvQkFBVTtvQkFBVTtvQkFBVTtvQkFBVTtvQkFBVTtpQkFBUztnQkFDMUcsTUFBTUMsWUFBWUQsT0FBTyxDQUFDcEksS0FBS1csS0FBSyxDQUFDLElBQUtnSCxnQkFBaUJTLFFBQVEzRyxNQUFNLEVBQUU7Z0JBQzNFeUcsV0FBV2xILElBQUksQ0FBQyxDQUFDcUgsYUFBYSxLQUFLLEdBQUUsSUFBSyxLQUFLLENBQUNBLGFBQWEsSUFBSSxHQUFFLElBQUssS0FBSyxDQUFDQSxZQUFZLEdBQUUsSUFBSyxLQUFLRjtZQUN4RztZQUNBSCxRQUFRNUcsWUFBWSxDQUFDLFNBQVMsSUFBSTFELHlEQUE0QixDQUFDd0ssWUFBWTtZQUMzRSw2QkFBNkI7WUFDN0IsTUFBTUksVUFBVSxJQUFJNUssb0RBQXVCLENBQUM7Z0JBQUU2RSxjQUFjO2dCQUFNeUIsYUFBYTtnQkFBTUMsU0FBUztnQkFBS0UsVUFBVXpHLG1EQUFzQjtZQUFDO1lBQ3BJLE1BQU04SyxPQUFPLElBQUk5Syx1Q0FBVSxDQUFDc0ssU0FBU007WUFDckNFLEtBQUt4SyxRQUFRLENBQUMwRyxJQUFJLENBQUNrQyxLQUFLNUksUUFBUTtZQUNoQyxlQUFlO1lBQ2ZNLE1BQU1vRSxHQUFHLENBQUNrRTtZQUNWdEksTUFBTW9FLEdBQUcsQ0FBQzhGO1lBQ1ZyRCxjQUFjbkUsSUFBSSxDQUFDO2dCQUFFMEgsTUFBTTlCO2dCQUFNNEI7Z0JBQU16QyxVQUFVYSxLQUFLYixRQUFRO2dCQUFFeEI7Z0JBQUtNLEtBQUs7Z0JBQUc2QyxvQkFBb0JkLEtBQUtjLGtCQUFrQjtnQkFBRUU7Z0JBQWFoRztnQkFBT3FFO2dCQUFZMEMsZUFBZTtZQUFNO1FBQ2pMO1FBRUEsTUFBTUMsVUFBVTtZQUNkLElBQUk7Z0JBQ0pDLHNCQUFzQkQ7Z0JBQ3RCLG9DQUFvQztnQkFDcEMsMENBQTBDO2dCQUMxQyxJQUFJNUksS0FBS0MsTUFBTSxLQUFLLFFBQVFvRCxhQUFhNUIsTUFBTSxHQUFHLElBQUk7b0JBQ3BENkI7Z0JBQ0Y7Z0JBQ0Esd0JBQXdCO2dCQUN4QixJQUFLLElBQUk5QixJQUFJNkIsYUFBYTVCLE1BQU0sR0FBQyxHQUFHRCxLQUFLLEdBQUdBLElBQUs7b0JBQy9DLE1BQU1zSCxRQUFRekYsWUFBWSxDQUFDN0IsRUFBRTtvQkFDN0JzSCxNQUFNakUsR0FBRztvQkFDVCxVQUFVO29CQUNWLElBQUlpRSxNQUFNaEUsTUFBTSxJQUFJZ0UsTUFBTXpFLE1BQU0sQ0FBQ2xDLFFBQVEsQ0FBQzhCLE9BQU8sR0FBRyxNQUFNO3dCQUN4RDZFLE1BQU16RSxNQUFNLENBQUNsQyxRQUFRLENBQUM4QixPQUFPLElBQUk7d0JBQ2pDLElBQUk2RSxNQUFNekUsTUFBTSxDQUFDbEMsUUFBUSxDQUFDOEIsT0FBTyxJQUFJLE1BQU02RSxNQUFNaEUsTUFBTSxHQUFHO29CQUM1RDtvQkFDQSxXQUFXO29CQUNYLElBQUlnRSxNQUFNakUsR0FBRyxHQUFHaUUsTUFBTTlELFFBQVEsR0FBRyxLQUFLO3dCQUNwQzhELE1BQU0vRCxPQUFPLEdBQUc7b0JBQ2xCO29CQUNBLElBQUkrRCxNQUFNL0QsT0FBTyxFQUFFO3dCQUNqQitELE1BQU16RSxNQUFNLENBQUNsQyxRQUFRLENBQUM4QixPQUFPLElBQUk7b0JBQ25DO29CQUNBLDBCQUEwQjtvQkFDMUIsSUFBSTZFLE1BQU16RSxNQUFNLENBQUNsQyxRQUFRLENBQUM4QixPQUFPLElBQUksR0FBRzt3QkFDdEMzRixNQUFNeUssTUFBTSxDQUFDRCxNQUFNekUsTUFBTTt3QkFDekJoQixhQUFhMkYsTUFBTSxDQUFDeEgsR0FBRzt3QkFDdkI7b0JBQ0Y7b0JBQ0EsMEJBQTBCO29CQUMxQnNILE1BQU16RSxNQUFNLENBQUNyRyxRQUFRLENBQUNpTCxDQUFDLElBQUlqSixLQUFLUSxHQUFHLENBQUNzSSxNQUFNakUsR0FBRyxHQUFDLFFBQVFyRCxLQUFLO29CQUMzRHNILE1BQU16RSxNQUFNLENBQUNyRyxRQUFRLENBQUNrTCxDQUFDLElBQUlsSixLQUFLUyxHQUFHLENBQUNxSSxNQUFNakUsR0FBRyxHQUFDLFNBQVNyRCxLQUFLO29CQUM1RHNILE1BQU16RSxNQUFNLENBQUNsQyxRQUFRLENBQUNnSCxRQUFRLElBQUlMLE1BQU03RCxRQUFRO29CQUNoRCx1QkFBdUI7b0JBQ3ZCNkQsTUFBTXpFLE1BQU0sQ0FBQ2xDLFFBQVEsQ0FBQ1AsS0FBSyxDQUFDd0gsU0FBUyxDQUFDLFNBQU9wSixLQUFLUSxHQUFHLENBQUNzSSxNQUFNakUsR0FBRyxHQUFDLFNBQU9yRCxJQUFJLEdBQUc7Z0JBQ2hGO2dCQUNBaEQsT0FBTzJLLFFBQVEsQ0FBQ0QsQ0FBQyxJQUFJLENBQUN2RyxVQUFVbkUsT0FBTzJLLFFBQVEsQ0FBQ0QsQ0FBQyxJQUFJdEc7Z0JBQ3JELHlFQUF5RTtnQkFDekUsTUFBTXlHLFVBQVUsSUFBSTNMLDBDQUFhO2dCQUNqQ2MsT0FBTzhLLGlCQUFpQixDQUFDRDtnQkFDekJ2SyxpQkFBaUI0RCxHQUFHLENBQUMyRyxRQUFRMUUsY0FBYyxDQUFDaEY7Z0JBQzVDLDBEQUEwRDtnQkFDMUQsSUFBSyxJQUFJNkIsSUFBSSxHQUFHQSxJQUFJMUIsVUFBVTJCLE1BQU0sRUFBRUQsS0FBSyxFQUFHO29CQUM1QzVCLFNBQVMrQixVQUFVLENBQUMzRCxRQUFRLENBQUM2RCxLQUFLLENBQUNMLEVBQUUsR0FBRzFCLFNBQVMsQ0FBQzBCLEVBQUUsR0FBRzFDLGlCQUFpQm1LLENBQUM7b0JBQ3pFckosU0FBUytCLFVBQVUsQ0FBQzNELFFBQVEsQ0FBQzZELEtBQUssQ0FBQ0wsSUFBRSxFQUFFLEdBQUcxQixTQUFTLENBQUMwQixJQUFFLEVBQUUsR0FBRzFDLGlCQUFpQm9LLENBQUM7b0JBQzdFdEosU0FBUytCLFVBQVUsQ0FBQzNELFFBQVEsQ0FBQzZELEtBQUssQ0FBQ0wsSUFBRSxFQUFFLEdBQUcxQixTQUFTLENBQUMwQixJQUFFLEVBQUUsR0FBRzFDLGlCQUFpQnlLLENBQUM7Z0JBQy9FO2dCQUNBM0osU0FBUytCLFVBQVUsQ0FBQzNELFFBQVEsQ0FBQ3dMLFdBQVcsR0FBRztnQkFFM0MsaUNBQWlDO2dCQUNqQywrRUFBK0U7Z0JBQy9FLElBQUlwRSx3QkFBd0IsS0FBS3BGLEtBQUtDLE1BQU0sS0FBSyxLQUFLO29CQUNwRG9GO29CQUNBLG1EQUFtRDtvQkFDbkQsSUFBSTdHLFFBQVE7d0JBQ1YsTUFBTWlMLGdCQUFnQixPQUFPekosS0FBS0MsTUFBTSxLQUFHO3dCQUMzQ3pCLE9BQU9SLFFBQVEsQ0FBQ2lMLENBQUMsSUFBSSxDQUFDakosS0FBS0MsTUFBTSxLQUFHLEdBQUUsSUFBR3dKO3dCQUN6Q2pMLE9BQU9SLFFBQVEsQ0FBQ2tMLENBQUMsSUFBSSxDQUFDbEosS0FBS0MsTUFBTSxLQUFHLEdBQUUsSUFBR3dKO29CQUMzQztvQkFDQXJFLHVCQUF1QixLQUFLcEYsS0FBS0MsTUFBTSxLQUFLLElBQUksMkJBQTJCO2dCQUM3RSxPQUFPLElBQUltRix1QkFBdUIsR0FBRztvQkFDbkNBO2dCQUNGO2dCQUNBLHNDQUFzQztnQkFDdEMsSUFBSyxJQUFJNUQsSUFBSTJELGNBQWMxRCxNQUFNLEdBQUcsR0FBR0QsS0FBSyxHQUFHQSxJQUFLO29CQUNsRCxNQUFNa0ksTUFBTXZFLGFBQWEsQ0FBQzNELEVBQUU7b0JBQzVCLHdDQUF3QztvQkFDeEMsSUFBSWtJLElBQUloQixJQUFJLENBQUNpQixRQUFRLEVBQUU7d0JBQ3JCLE1BQU1DLFNBQVNGLElBQUloQixJQUFJLENBQUNpQixRQUFRLENBQUNFLElBQUksQ0FBQ0MsQ0FBQUEsUUFBU0EsTUFBTXRDLElBQUksS0FBSzt3QkFDOUQsSUFBSW9DLFFBQVE7NEJBQ1YsSUFBSyxJQUFJRyxJQUFJLEdBQUdBLElBQUlILE9BQU9ELFFBQVEsQ0FBQ2xJLE1BQU0sRUFBRXNJLElBQUs7Z0NBQy9DLE1BQU16QyxRQUFRc0MsT0FBT0QsUUFBUSxDQUFDSSxFQUFFO2dDQUNoQ3pDLE1BQU1uRixRQUFRLENBQUM4QixPQUFPLElBQUksTUFBTSxPQUFPO2dDQUN2Q3FELE1BQU0xQyxLQUFLLENBQUNELGNBQWMsQ0FBQyxPQUFPLFNBQVM7NEJBQzdDO3dCQUNGO29CQUNGO29CQUNBLHlDQUF5QztvQkFDekMsSUFBSStFLElBQUlsQixJQUFJLElBQUlrQixJQUFJOUIsV0FBVyxFQUFFO3dCQUMvQixNQUFNb0MsT0FBT0MsWUFBWUMsR0FBRyxLQUFLO3dCQUNqQyxNQUFNbEMsVUFBVTBCLElBQUlsQixJQUFJLENBQUM1SSxRQUFRO3dCQUNqQyxNQUFNc0ksYUFBYUYsUUFBUW1DLFlBQVksQ0FBQzt3QkFDeEMsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlsQyxXQUFXbUMsS0FBSyxFQUFFRCxJQUFLOzRCQUN6QyxZQUFZOzRCQUNaLElBQUlqSixJQUFJK0csV0FBV29DLElBQUksQ0FBQ0YsSUFBSUcsSUFBSXJDLFdBQVdzQyxJQUFJLENBQUNKLElBQUlLLElBQUl2QyxXQUFXd0MsSUFBSSxDQUFDTjs0QkFDeEUsaUJBQWlCOzRCQUNqQixNQUFNTyxNQUFNM0ssS0FBSzJLLEdBQUcsQ0FBQ3hKLEdBQUVvSixHQUFFRSxJQUFJRyxNQUFNNUssS0FBSzRLLEdBQUcsQ0FBQ3pKLEdBQUVvSixHQUFFRTs0QkFDaEQsSUFBSUksR0FBRUMsR0FBRUM7NEJBQ1JBLElBQUksQ0FBQ0osTUFBSUMsR0FBRSxJQUFHOzRCQUNkLElBQUlELFFBQVFDLEtBQUs7Z0NBQUNDLElBQUlDLElBQUk7NEJBQUUsT0FBTztnQ0FDakMsTUFBTUUsSUFBSUwsTUFBSUM7Z0NBQ2RFLElBQUlDLElBQUksTUFBTUMsSUFBRyxLQUFFTCxNQUFJQyxHQUFFLElBQUtJLElBQUdMLENBQUFBLE1BQUlDLEdBQUU7Z0NBQ3ZDLE9BQU9EO29DQUNMLEtBQUt4Sjt3Q0FBRzBKLElBQUksQ0FBQ04sSUFBRUUsQ0FBQUEsSUFBR08sSUFBS1QsQ0FBQUEsSUFBRUUsSUFBRSxJQUFFO3dDQUFJO29DQUNqQyxLQUFLRjt3Q0FBR00sSUFBSSxDQUFDSixJQUFFdEosQ0FBQUEsSUFBRzZKLElBQUk7d0NBQUc7b0NBQ3pCLEtBQUtQO3dDQUFHSSxJQUFJLENBQUMxSixJQUFFb0osQ0FBQUEsSUFBR1MsSUFBSTt3Q0FBRztnQ0FDM0I7Z0NBQ0FILEtBQUc7NEJBQ0w7NEJBQ0FBLElBQUksQ0FBQ0EsSUFBSSxPQUFLN0ssS0FBS1EsR0FBRyxDQUFDd0osT0FBT0ksSUFBRSxJQUFHLElBQUssS0FBSyxjQUFjOzRCQUMzRCxzQkFBc0I7NEJBQ3RCLElBQUlhLElBQUlGLElBQUksTUFBTUEsSUFBRyxLQUFFRCxDQUFBQSxJQUFLQyxJQUFFRCxJQUFFQyxJQUFFRDs0QkFDbEMsSUFBSUksSUFBSSxJQUFFSCxJQUFFRTs0QkFDWixJQUFJRSxLQUFLTixJQUFFLElBQUUsR0FBR08sS0FBS1AsR0FBR1EsS0FBS1IsSUFBRSxJQUFFOzRCQUNqQyxNQUFNUyxVQUFVLENBQUNKLEdBQUVELEdBQUVNO2dDQUNuQixJQUFJQSxJQUFFLEdBQUdBLEtBQUc7Z0NBQUcsSUFBSUEsSUFBRSxHQUFHQSxLQUFHO2dDQUMzQixJQUFJQSxJQUFFLElBQUUsR0FBRyxPQUFPTCxJQUFFLENBQUNELElBQUVDLENBQUFBLElBQUcsSUFBRUs7Z0NBQzVCLElBQUlBLElBQUUsSUFBRSxHQUFHLE9BQU9OO2dDQUNsQixJQUFJTSxJQUFFLElBQUUsR0FBRyxPQUFPTCxJQUFFLENBQUNELElBQUVDLENBQUFBLElBQUksS0FBRSxJQUFFSyxDQUFBQSxJQUFHO2dDQUNsQyxPQUFPTDs0QkFDVDs0QkFDQWhELFdBQVdzRCxJQUFJLENBQUNwQixHQUFHa0IsUUFBUUosR0FBRUQsR0FBRUU7NEJBQy9CakQsV0FBV3VELElBQUksQ0FBQ3JCLEdBQUdrQixRQUFRSixHQUFFRCxHQUFFRzs0QkFDL0JsRCxXQUFXd0QsSUFBSSxDQUFDdEIsR0FBR2tCLFFBQVFKLEdBQUVELEdBQUVJOzRCQUMvQiwwQkFBMEI7NEJBQzFCbkQsV0FBV3lELElBQUksQ0FBQ3ZCLEdBQUdsQyxXQUFXMEQsSUFBSSxDQUFDeEIsS0FBTSxRQUFPLE9BQUtwSyxLQUFLUSxHQUFHLENBQUN3SixPQUFLLElBQUlJLEVBQUM7d0JBQzFFO3dCQUNBbEMsV0FBV3NCLFdBQVcsR0FBRztvQkFDM0I7b0JBQ0EsMkJBQTJCO29CQUMzQkUsSUFBSWhCLElBQUksQ0FBQzFLLFFBQVEsQ0FBQzBFLEdBQUcsQ0FBQ2dILElBQUkzRCxRQUFRO29CQUNsQzJELElBQUlsQixJQUFJLENBQUN4SyxRQUFRLENBQUMwRyxJQUFJLENBQUNnRixJQUFJaEIsSUFBSSxDQUFDMUssUUFBUTtvQkFDeEMsb0NBQW9DO29CQUNwQzBMLElBQUk3RSxHQUFHO29CQUNQLE1BQU00QyxpQkFBaUJpQyxJQUFJN0UsR0FBRyxHQUFHNkUsSUFBSWhDLGtCQUFrQjtvQkFDdkRnQyxJQUFJOUIsV0FBVyxDQUFDaUUsT0FBTyxDQUFDbkMsSUFBSWhCLElBQUksQ0FBQzFLLFFBQVEsQ0FBQ3lILEtBQUs7b0JBQy9DLElBQUlpRSxJQUFJOUIsV0FBVyxDQUFDbkcsTUFBTSxHQUFHeUQsYUFBYSxHQUFHd0UsSUFBSTlCLFdBQVcsQ0FBQ2tFLEdBQUc7b0JBQ2hFLElBQUlDLFdBQVcvTCxLQUFLNEssR0FBRyxDQUFDLEdBQUduRCxpQkFBaUI7b0JBQzVDLElBQUl1RSxpQkFBaUJoTSxLQUFLVyxLQUFLLENBQUMrSSxJQUFJOUIsV0FBVyxDQUFDbkcsTUFBTSxHQUFHc0s7b0JBQ3pELElBQUlDLGlCQUFpQixHQUFHQSxpQkFBaUI7b0JBQ3pDLE1BQU1DLGVBQWV2QyxJQUFJOUIsV0FBVyxDQUFDOUYsS0FBSyxDQUFDLEdBQUdrSztvQkFDOUN0QyxJQUFJbEIsSUFBSSxDQUFDNUksUUFBUSxDQUFDcUksYUFBYSxDQUFDZ0U7b0JBQ2hDLE1BQU0vRCxhQUFhd0IsSUFBSWxCLElBQUksQ0FBQzVJLFFBQVEsQ0FBQ3VLLFlBQVksQ0FBQztvQkFDbEQsSUFBSyxJQUFJSixJQUFJLEdBQUdBLElBQUlrQyxhQUFheEssTUFBTSxFQUFFc0ksSUFBSzt3QkFDNUMsSUFBSTVCLFFBQVEsQ0FBQyxJQUFJNEIsSUFBS2tDLENBQUFBLGFBQWF4SyxNQUFNLEdBQUcsRUFBQyxJQUFLO3dCQUNsRDBHLFNBQVMsT0FBTyxPQUFPbkksS0FBS1EsR0FBRyxDQUFDMEwsS0FBS2hDLEdBQUcsS0FBRyxRQUFRSCxJQUFFO3dCQUNyRCxJQUFJM0IsVUFBVTs0QkFBQzs0QkFBVTs0QkFBVTs0QkFBVTs0QkFBVTs0QkFBVTt5QkFBUzt3QkFDMUUsSUFBSUMsWUFBWUQsT0FBTyxDQUFDMkIsSUFBSTNCLFFBQVEzRyxNQUFNLENBQUM7d0JBQzNDLElBQUlnRyxpQkFBaUIsS0FBS1UsU0FBU25JLEtBQUsySyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUNsRCxpQkFBaUIsTUFBTSxHQUFFLElBQUs7d0JBQ2xGUyxXQUFXaUUsT0FBTyxDQUFDcEMsR0FBRyxDQUFDMUIsYUFBYSxLQUFLLEdBQUUsSUFBSyxLQUFLLENBQUNBLGFBQWEsSUFBSSxHQUFFLElBQUssS0FBSyxDQUFDQSxZQUFZLEdBQUUsSUFBSyxLQUFLRjtvQkFDOUc7b0JBQ0FELFdBQVdzQixXQUFXLEdBQUc7b0JBQ3pCLGVBQWU7b0JBQ2YsSUFBSTRDO29CQUNKLElBQUkzRSxpQkFBaUIsS0FBSzt3QkFDeEIyRSxZQUFZLElBQUkxTyx3Q0FBVyxDQUFDZ00sSUFBSTlILEtBQUssRUFBRXlLLElBQUksQ0FBQyxJQUFJM08sd0NBQVcsQ0FBQyxXQUFXK0osaUJBQWU7b0JBQ3hGLE9BQU87d0JBQ0wyRSxZQUFZLElBQUkxTyx3Q0FBVyxDQUFDLFVBQVUyTyxJQUFJLENBQUMsSUFBSTNPLHdDQUFXLENBQUMsV0FBVyxDQUFDK0osaUJBQWUsR0FBRSxJQUFHO29CQUM3RjtvQkFDQSxJQUFJNkUsVUFBVSxPQUFPLE9BQU90TSxLQUFLUSxHQUFHLENBQUMwTCxLQUFLaEMsR0FBRyxLQUFHLE9BQU9sSyxLQUFLQyxNQUFNLEtBQUc7b0JBQ3JFbU0sVUFBVXpILGNBQWMsQ0FBQzJIO29CQUN6QjVDLElBQUloQixJQUFJLENBQUN2RyxRQUFRLENBQUNQLEtBQUssQ0FBQzhDLElBQUksQ0FBQzBIO29CQUM3QixJQUFJeEgsUUFBUSxJQUFJLE1BQU01RSxLQUFLUSxHQUFHLENBQUNSLEtBQUtHLEVBQUUsR0FBR3NIO29CQUN6QyxJQUFJOEUsWUFBWTdDLElBQUloQixJQUFJLENBQUMxSyxRQUFRLENBQUN5RCxNQUFNO29CQUN4QyxJQUFJK0ssVUFBVUQsWUFBWTdNLGtCQUFrQixNQUFNLE1BQU07b0JBQ3hEZ0ssSUFBSWhCLElBQUksQ0FBQzlELEtBQUssQ0FBQy9GLEdBQUcsQ0FBQytGLFFBQVE0SCxTQUFTNUgsUUFBUTRILFNBQVM1SCxRQUFRNEg7b0JBQzdELGdCQUFnQjtvQkFDaEIsSUFBSS9FLGtCQUFrQixLQUFLLENBQUNpQyxJQUFJZixhQUFhLEVBQUU7d0JBQzdDLElBQUssSUFBSW1DLElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFLOzRCQUMxQixNQUFNMkIsYUFBYSxJQUFJL08saURBQW9CLENBQUMsTUFBTXNDLEtBQUtDLE1BQU0sS0FBRyxLQUFLLEdBQUc7NEJBQ3hFLE1BQU15TSxhQUFhLElBQUloUCxvREFBdUIsQ0FBQztnQ0FBRWtFLE9BQU87Z0NBQVVvQyxhQUFhO2dDQUFNQyxTQUFTO2dDQUFLRSxVQUFVekcsbURBQXNCOzRCQUFDOzRCQUNwSSxNQUFNaVAsVUFBVSxJQUFJalAsdUNBQVUsQ0FBQytPLFlBQVlDOzRCQUMzQ0MsUUFBUTNPLFFBQVEsQ0FBQzBHLElBQUksQ0FBQ2dGLElBQUloQixJQUFJLENBQUMxSyxRQUFROzRCQUN2QyxNQUFNNE8sYUFBYSxJQUFJbFAsMENBQWEsQ0FBQ3NDLEtBQUtDLE1BQU0sS0FBRyxLQUFLRCxLQUFLQyxNQUFNLEtBQUcsS0FBS0QsS0FBS0MsTUFBTSxLQUFHLEtBQUt1RSxTQUFTLEdBQUdHLGNBQWMsQ0FBQyxJQUFFM0UsS0FBS0MsTUFBTSxLQUFHOzRCQUN6STBNLFFBQVFFLFFBQVEsR0FBRztnQ0FBRTlHLFVBQVU2RztnQ0FBWS9ILEtBQUs7NEJBQUU7NEJBQ2xEdkcsTUFBTW9FLEdBQUcsQ0FBQ2lLOzRCQUNWLElBQUksQ0FBQ2pPLE9BQU9vTyxTQUFTLEVBQUVwTyxPQUFPb08sU0FBUyxHQUFHLEVBQUU7NEJBQzVDcE8sT0FBT29PLFNBQVMsQ0FBQzlMLElBQUksQ0FBQzJMO3dCQUN4Qjt3QkFDQSxNQUFNSSxVQUFVckQsSUFBSTNELFFBQVEsQ0FBQ04sS0FBSyxHQUFHdUgsY0FBYyxDQUFDLElBQUl0UCwwQ0FBYSxDQUFDLEdBQUUsR0FBRSxJQUFJLENBQUNzQyxLQUFLQyxNQUFNLEtBQUcsR0FBRSxJQUFHO3dCQUNsRyxNQUFNZ04sV0FBV3ZELElBQUloQixJQUFJLENBQUNqRCxLQUFLO3dCQUMvQndILFNBQVNqUCxRQUFRLENBQUMwRyxJQUFJLENBQUNnRixJQUFJaEIsSUFBSSxDQUFDMUssUUFBUTt3QkFDeENpUCxTQUFTbEgsUUFBUSxHQUFHZ0g7d0JBQ3BCRSxTQUFTeEYsY0FBYyxHQUFHQTt3QkFDMUJ3RixTQUFTdkYsa0JBQWtCLEdBQUdnQyxJQUFJaEMsa0JBQWtCLEdBQUksT0FBTTFILEtBQUtDLE1BQU0sS0FBRyxHQUFFO3dCQUM5RWdOLFNBQVNwSSxHQUFHLEdBQUc2RSxJQUFJN0UsR0FBRzt3QkFDdEJvSSxTQUFTOUssUUFBUSxHQUFHdUgsSUFBSWhCLElBQUksQ0FBQ3ZHLFFBQVEsQ0FBQ3NELEtBQUs7d0JBQzNDLE1BQU15SCxrQkFBa0J4RCxJQUFJOUIsV0FBVyxDQUFDOUYsS0FBSzt3QkFDN0MsTUFBTXFMLGNBQWMsSUFBSXpQLGlEQUFvQixHQUFHdUssYUFBYSxDQUFDaUY7d0JBQzdEQyxZQUFZL0wsWUFBWSxDQUFDLFNBQVNzSSxJQUFJbEIsSUFBSSxDQUFDNUksUUFBUSxDQUFDdUssWUFBWSxDQUFDLFNBQVMxRSxLQUFLO3dCQUMvRSxNQUFNMkgsY0FBYzFELElBQUlsQixJQUFJLENBQUNyRyxRQUFRLENBQUNzRCxLQUFLO3dCQUMzQyxNQUFNNEgsV0FBVyxJQUFJM1AsdUNBQVUsQ0FBQ3lQLGFBQWFDO3dCQUM3Q0MsU0FBU3JQLFFBQVEsQ0FBQzBHLElBQUksQ0FBQ3VJLFNBQVNqUCxRQUFRO3dCQUN4Q00sTUFBTW9FLEdBQUcsQ0FBQ3VLO3dCQUNWM08sTUFBTW9FLEdBQUcsQ0FBQzJLO3dCQUNWbEksY0FBY25FLElBQUksQ0FBQzs0QkFBRTBILE1BQU11RTs0QkFBVXpFLE1BQU02RTs0QkFBVXRILFVBQVVrSCxTQUFTbEgsUUFBUTs0QkFBRXhCLEtBQUttRixJQUFJbkYsR0FBRzs0QkFBRU0sS0FBS29JLFNBQVNwSSxHQUFHOzRCQUFFNkMsb0JBQW9CdUYsU0FBU3ZGLGtCQUFrQjs0QkFBRUUsYUFBYXNGOzRCQUFpQnRMLE9BQU84SCxJQUFJOUgsS0FBSzs0QkFBRXFFLFlBQVl5RCxJQUFJekQsVUFBVTs0QkFBRTBDLGVBQWU7d0JBQUs7d0JBQ3BRZSxJQUFJZixhQUFhLEdBQUc7b0JBQ3RCO29CQUNBLGNBQWM7b0JBQ2QsSUFBSSxDQUFDZSxJQUFJNEQsVUFBVSxJQUFJN0YsaUJBQWlCLFFBQVF6SCxLQUFLQyxNQUFNLEtBQUssS0FBSzt3QkFDbkUsSUFBSyxJQUFJNkssSUFBSSxHQUFHQSxJQUFJLElBQUk5SyxLQUFLVyxLQUFLLENBQUNYLEtBQUtDLE1BQU0sS0FBRyxJQUFJNkssSUFBSzs0QkFDeEQsTUFBTXpELFdBQVcsSUFBSTNKLGlEQUFvQixDQUFDLE1BQU1zQyxLQUFLQyxNQUFNLEtBQUcsS0FBSyxHQUFHOzRCQUN0RSxNQUFNa0gsV0FBVyxJQUFJekosb0RBQXVCLENBQUM7Z0NBQUVrRSxPQUFPO2dDQUFVb0MsYUFBYTtnQ0FBTUMsU0FBUztnQ0FBR0UsVUFBVXpHLG1EQUFzQjs0QkFBQzs0QkFDaEksTUFBTTRKLFFBQVEsSUFBSTVKLHVDQUFVLENBQUMySixVQUFVRjs0QkFDdkNHLE1BQU10SixRQUFRLENBQUMwRyxJQUFJLENBQUNnRixJQUFJaEIsSUFBSSxDQUFDMUssUUFBUTs0QkFDckNzSixNQUFNaUcsUUFBUSxHQUFHLElBQUk3UCwwQ0FBYSxDQUFDc0MsS0FBS0MsTUFBTSxLQUFHLEtBQUtELEtBQUtDLE1BQU0sS0FBRyxLQUFLRCxLQUFLQyxNQUFNLEtBQUcsS0FBS3VFLFNBQVMsR0FBR0csY0FBYyxDQUFDLE1BQU0zRSxLQUFLQyxNQUFNLEtBQUc7NEJBQzNJcUgsTUFBTWtHLFNBQVMsR0FBRyxLQUFLeE4sS0FBS0MsTUFBTSxLQUFHOzRCQUNyQ3FILE1BQU1tRyxRQUFRLEdBQUc7NEJBQ2pCblAsTUFBTW9FLEdBQUcsQ0FBQzRFOzRCQUNWLElBQUksQ0FBQzVJLE9BQU9nUCxXQUFXLEVBQUVoUCxPQUFPZ1AsV0FBVyxHQUFHLEVBQUU7NEJBQ2hEaFAsT0FBT2dQLFdBQVcsQ0FBQzFNLElBQUksQ0FBQ3NHO3dCQUMxQjt3QkFDQW9DLElBQUk0RCxVQUFVLEdBQUc7b0JBQ25CO29CQUNBLFFBQVE7b0JBQ1IsSUFBSSxDQUFDNUQsSUFBSWlFLFVBQVUsSUFBSWxHLGlCQUFpQixRQUFRekgsS0FBS0MsTUFBTSxLQUFLLEtBQUs7d0JBQ25FLE1BQU0yTixXQUFXLElBQUlsUSxpREFBb0IsQ0FBQyxHQUFHLElBQUk7d0JBQ2pELE1BQU1tUSxXQUFXLElBQUluUSxvREFBdUIsQ0FBQzs0QkFBRWtFLE9BQU87NEJBQVVvQyxhQUFhOzRCQUFNQyxTQUFTOzRCQUFLRSxVQUFVekcsbURBQXNCO3dCQUFDO3dCQUNsSSxNQUFNb1EsUUFBUSxJQUFJcFEsdUNBQVUsQ0FBQ2tRLFVBQVVDO3dCQUN2Q0MsTUFBTTlQLFFBQVEsQ0FBQzBHLElBQUksQ0FBQ2dGLElBQUloQixJQUFJLENBQUMxSyxRQUFRO3dCQUNyQ00sTUFBTW9FLEdBQUcsQ0FBQ29MO3dCQUNWLElBQUksQ0FBQ3BQLE9BQU9xUCxZQUFZLEVBQUVyUCxPQUFPcVAsWUFBWSxHQUFHLEVBQUU7d0JBQ2xEclAsT0FBT3FQLFlBQVksQ0FBQy9NLElBQUksQ0FBQzs0QkFBRTBILE1BQU1vRjs0QkFBT2pKLEtBQUs7d0JBQUU7d0JBQy9DNkUsSUFBSWlFLFVBQVUsR0FBRztvQkFDbkI7b0JBQ0EsK0JBQStCO29CQUMvQixNQUFNbEosT0FBT2lGLElBQUloQixJQUFJLENBQUMxSyxRQUFRLENBQUNnUSxVQUFVLENBQUN4UCxPQUFPUixRQUFRO29CQUN6RCxNQUFNaVEsWUFBWXZPLGtCQUFrQjtvQkFDcEMsSUFBSStFLE9BQU93SixXQUFXO3dCQUNwQixNQUFNQyxPQUFPLElBQUksQ0FBQ3pKLE9BQU93SixTQUFRLElBQU12TyxDQUFBQSxrQkFBa0J1TyxTQUFRO3dCQUNqRXZFLElBQUloQixJQUFJLENBQUN2RyxRQUFRLENBQUM4QixPQUFPLEdBQUdqRSxLQUFLMkssR0FBRyxDQUFDLEdBQUd1RDt3QkFDeEN4RSxJQUFJaEIsSUFBSSxDQUFDdkcsUUFBUSxDQUFDNkIsV0FBVyxHQUFHO3dCQUNoQzBGLElBQUlsQixJQUFJLENBQUNyRyxRQUFRLENBQUM4QixPQUFPLEdBQUdqRSxLQUFLMkssR0FBRyxDQUFDLEdBQUd1RCxPQUFPO3dCQUMvQ3hFLElBQUlsQixJQUFJLENBQUNyRyxRQUFRLENBQUM2QixXQUFXLEdBQUc7b0JBQ2xDO29CQUNBLHlEQUF5RDtvQkFDekQsSUFBSXlELGtCQUFrQixPQUFPaEQsT0FBTy9FLG1CQUFtQmdLLElBQUloQixJQUFJLENBQUN2RyxRQUFRLENBQUM4QixPQUFPLElBQUksTUFBTTt3QkFDeEYzRixNQUFNeUssTUFBTSxDQUFDVyxJQUFJaEIsSUFBSTt3QkFDckJwSyxNQUFNeUssTUFBTSxDQUFDVyxJQUFJbEIsSUFBSTt3QkFDckJyRCxjQUFjNkQsTUFBTSxDQUFDeEgsR0FBRztvQkFDMUI7Z0JBQ0Y7Z0JBQ0EsaUJBQWlCO2dCQUNqQixJQUFJOUMsT0FBT2dQLFdBQVcsRUFBRTtvQkFDdEIsSUFBSyxJQUFJbE0sSUFBSTlDLE9BQU9nUCxXQUFXLENBQUNqTSxNQUFNLEdBQUcsR0FBR0QsS0FBSyxHQUFHQSxJQUFLO3dCQUN2RCxNQUFNOEYsUUFBUTVJLE9BQU9nUCxXQUFXLENBQUNsTSxFQUFFO3dCQUNuQzhGLE1BQU10SixRQUFRLENBQUMwRSxHQUFHLENBQUM0RSxNQUFNaUcsUUFBUTt3QkFDakNqRyxNQUFNbUcsUUFBUTt3QkFDZG5HLE1BQU1uRixRQUFRLENBQUM4QixPQUFPLElBQUk7d0JBQzFCLElBQUlxRCxNQUFNbUcsUUFBUSxHQUFHbkcsTUFBTWtHLFNBQVMsRUFBRTs0QkFDcENsUCxNQUFNeUssTUFBTSxDQUFDekI7NEJBQ2I1SSxPQUFPZ1AsV0FBVyxDQUFDMUUsTUFBTSxDQUFDeEgsR0FBRzt3QkFDL0I7b0JBQ0Y7Z0JBQ0Y7Z0JBQ0Esa0JBQWtCO2dCQUNsQixJQUFJOUMsT0FBT3FQLFlBQVksRUFBRTtvQkFDdkIsSUFBSyxJQUFJdk0sSUFBSTlDLE9BQU9xUCxZQUFZLENBQUN0TSxNQUFNLEdBQUcsR0FBR0QsS0FBSyxHQUFHQSxJQUFLO3dCQUN4RCxNQUFNc00sUUFBUXBQLE9BQU9xUCxZQUFZLENBQUN2TSxFQUFFO3dCQUNwQ3NNLE1BQU1wRixJQUFJLENBQUM5RCxLQUFLLENBQUNELGNBQWMsQ0FBQzt3QkFDaENtSixNQUFNcEYsSUFBSSxDQUFDdkcsUUFBUSxDQUFDOEIsT0FBTyxJQUFJO3dCQUMvQjZKLE1BQU1qSixHQUFHO3dCQUNULElBQUlpSixNQUFNakosR0FBRyxHQUFHLElBQUk7NEJBQ2xCdkcsTUFBTXlLLE1BQU0sQ0FBQytFLE1BQU1wRixJQUFJOzRCQUN2QmhLLE9BQU9xUCxZQUFZLENBQUMvRSxNQUFNLENBQUN4SCxHQUFHO3dCQUNoQztvQkFDRjtnQkFDRjtnQkFFQSwwQkFBMEI7Z0JBQzFCLE1BQU0yTSxTQUFTek8sa0JBQWtCQTtnQkFDakMsSUFBSyxJQUFJOEIsSUFBSSxHQUFHQSxJQUFJMUIsVUFBVTJCLE1BQU0sRUFBRUQsS0FBSyxFQUFHO29CQUM1QyxNQUFNNE0sS0FBS3RPLFNBQVMsQ0FBQzBCLEVBQUUsR0FBRzFDLGlCQUFpQm1LLENBQUM7b0JBQzVDLE1BQU1vRixLQUFLdk8sU0FBUyxDQUFDMEIsSUFBSSxFQUFFLEdBQUcxQyxpQkFBaUJvSyxDQUFDO29CQUNoRCxNQUFNb0YsS0FBS3hPLFNBQVMsQ0FBQzBCLElBQUksRUFBRSxHQUFHMUMsaUJBQWlCeUssQ0FBQztvQkFDaEQsSUFBSTZFLEtBQUdBLEtBQUtDLEtBQUdBLEtBQUtDLEtBQUdBLEtBQUtILFFBQVE7d0JBQ2xDLDhFQUE4RTt3QkFDOUUsTUFBTUksWUFBWTdPLGtCQUFrQjt3QkFDcEMsTUFBTThPLFlBQVk5Tzt3QkFDbEIsTUFBTXlCLElBQUlvTixZQUFZdk8sS0FBS0MsTUFBTSxLQUFNdU8sQ0FBQUEsWUFBWUQsU0FBUTt3QkFDM0QsTUFBTXROLFFBQVFqQixLQUFLQyxNQUFNLEtBQUssSUFBSUQsS0FBS0csRUFBRTt3QkFDekMsTUFBTWUsTUFBTWxCLEtBQUtLLElBQUksQ0FBQyxJQUFJTCxLQUFLQyxNQUFNLEtBQUs7d0JBQzFDSCxTQUFTLENBQUMwQixFQUFFLEdBQUcxQyxpQkFBaUJtSyxDQUFDLEdBQUc5SCxJQUFJbkIsS0FBS1EsR0FBRyxDQUFDVSxPQUFPbEIsS0FBS1MsR0FBRyxDQUFDUTt3QkFDakVuQixTQUFTLENBQUMwQixJQUFFLEVBQUUsR0FBRzFDLGlCQUFpQm9LLENBQUMsR0FBRy9ILElBQUluQixLQUFLUSxHQUFHLENBQUNVLE9BQU9sQixLQUFLUSxHQUFHLENBQUNTO3dCQUNuRW5CLFNBQVMsQ0FBQzBCLElBQUUsRUFBRSxHQUFHMUMsaUJBQWlCeUssQ0FBQyxHQUFHcEksSUFBSW5CLEtBQUtTLEdBQUcsQ0FBQ1M7b0JBQ3JEO2dCQUNGO2dCQUNBLHdFQUF3RTtnQkFFeEUsNERBQTREO2dCQUM1RCxNQUFNdU4sU0FBUzdPLFNBQVMrQixVQUFVLENBQUNDLEtBQUssQ0FBQ0MsS0FBSztnQkFDOUMsSUFBSyxJQUFJTCxJQUFJLEdBQUdBLElBQUkxQixVQUFVMkIsTUFBTSxFQUFFRCxLQUFLLEVBQUc7b0JBQzVDLE1BQU1rTixNQUFNbE4sSUFBSTtvQkFDaEIsTUFBTTRNLEtBQUt0TyxTQUFTLENBQUMwQixFQUFFLEdBQUcxQyxpQkFBaUJtSyxDQUFDO29CQUM1QyxNQUFNb0YsS0FBS3ZPLFNBQVMsQ0FBQzBCLElBQUksRUFBRSxHQUFHMUMsaUJBQWlCb0ssQ0FBQztvQkFDaEQsTUFBTW9GLEtBQUt4TyxTQUFTLENBQUMwQixJQUFJLEVBQUUsR0FBRzFDLGlCQUFpQnlLLENBQUM7b0JBQ2hELE1BQU05RSxPQUFPekUsS0FBSzJPLElBQUksQ0FBQ1AsS0FBS0EsS0FBS0MsS0FBS0EsS0FBS0MsS0FBS0E7b0JBQ2hELElBQUl2TSxNQUFNLENBQUMyTSxJQUFJLEdBQUcsR0FBRzt3QkFDbkIzTSxNQUFNLENBQUMyTSxJQUFJO3dCQUNYLElBQUkzTSxNQUFNLENBQUMyTSxJQUFJLEtBQUssR0FBRzs0QkFDckIsK0JBQStCOzRCQUMvQnpNLFdBQVcsQ0FBQ1QsRUFBRSxHQUFHRSxjQUFjLENBQUNGLEVBQUU7NEJBQ2xDUyxXQUFXLENBQUNULElBQUUsRUFBRSxHQUFHRSxjQUFjLENBQUNGLElBQUUsRUFBRTs0QkFDdENTLFdBQVcsQ0FBQ1QsSUFBRSxFQUFFLEdBQUdFLGNBQWMsQ0FBQ0YsSUFBRSxFQUFFOzRCQUN0Q2lOLE1BQU0sQ0FBQ2pOLEVBQUUsR0FBR0UsY0FBYyxDQUFDRixFQUFFOzRCQUM3QmlOLE1BQU0sQ0FBQ2pOLElBQUUsRUFBRSxHQUFHRSxjQUFjLENBQUNGLElBQUUsRUFBRTs0QkFDakNpTixNQUFNLENBQUNqTixJQUFFLEVBQUUsR0FBR0UsY0FBYyxDQUFDRixJQUFFLEVBQUU7d0JBQ25DLE9BQU87NEJBQ0xpTixNQUFNLENBQUNqTixFQUFFLEdBQUdTLFdBQVcsQ0FBQ1QsRUFBRTs0QkFDMUJpTixNQUFNLENBQUNqTixJQUFFLEVBQUUsR0FBR1MsV0FBVyxDQUFDVCxJQUFFLEVBQUU7NEJBQzlCaU4sTUFBTSxDQUFDak4sSUFBRSxFQUFFLEdBQUdTLFdBQVcsQ0FBQ1QsSUFBRSxFQUFFO3dCQUNoQztvQkFDRixPQUFPLElBQUlpRCxPQUFPL0Usa0JBQWtCLE9BQU9NLEtBQUtDLE1BQU0sS0FBSyxNQUFNO3dCQUMvRDhCLE1BQU0sQ0FBQzJNLElBQUksR0FBR3hNO3dCQUNkLE1BQU10QixJQUFJVSxPQUFPLENBQUN0QixLQUFLVyxLQUFLLENBQUNYLEtBQUtDLE1BQU0sS0FBS3FCLFFBQVFHLE1BQU0sRUFBRTt3QkFDN0RRLFdBQVcsQ0FBQ1QsRUFBRSxHQUFHWixDQUFDLENBQUMsRUFBRTt3QkFDckJxQixXQUFXLENBQUNULElBQUUsRUFBRSxHQUFHWixDQUFDLENBQUMsRUFBRTt3QkFDdkJxQixXQUFXLENBQUNULElBQUUsRUFBRSxHQUFHWixDQUFDLENBQUMsRUFBRTt3QkFDdkI2TixNQUFNLENBQUNqTixFQUFFLEdBQUdTLFdBQVcsQ0FBQ1QsRUFBRTt3QkFDMUJpTixNQUFNLENBQUNqTixJQUFFLEVBQUUsR0FBR1MsV0FBVyxDQUFDVCxJQUFFLEVBQUU7d0JBQzlCaU4sTUFBTSxDQUFDak4sSUFBRSxFQUFFLEdBQUdTLFdBQVcsQ0FBQ1QsSUFBRSxFQUFFO29CQUNoQyxPQUFPO3dCQUNMUyxXQUFXLENBQUNULEVBQUUsR0FBR0UsY0FBYyxDQUFDRixFQUFFO3dCQUNsQ1MsV0FBVyxDQUFDVCxJQUFFLEVBQUUsR0FBR0UsY0FBYyxDQUFDRixJQUFFLEVBQUU7d0JBQ3RDUyxXQUFXLENBQUNULElBQUUsRUFBRSxHQUFHRSxjQUFjLENBQUNGLElBQUUsRUFBRTt3QkFDdENpTixNQUFNLENBQUNqTixFQUFFLEdBQUdFLGNBQWMsQ0FBQ0YsRUFBRTt3QkFDN0JpTixNQUFNLENBQUNqTixJQUFFLEVBQUUsR0FBR0UsY0FBYyxDQUFDRixJQUFFLEVBQUU7d0JBQ2pDaU4sTUFBTSxDQUFDak4sSUFBRSxFQUFFLEdBQUdFLGNBQWMsQ0FBQ0YsSUFBRSxFQUFFO29CQUNuQztnQkFDRjtnQkFDQTVCLFNBQVMrQixVQUFVLENBQUNDLEtBQUssQ0FBQzRILFdBQVcsR0FBRztnQkFDdEN4SyxTQUFTNFAsTUFBTSxDQUFDdFEsT0FBT0U7WUFDekIsRUFBRSxPQUFPcVEsS0FBSztnQkFDWixvQ0FBb0M7Z0JBQ3BDQyxRQUFRQyxLQUFLLENBQUMsOEJBQThCRjtZQUM5QztRQUNGO1FBRUFqRyxXQUFXLHdCQUF3QjtRQUVuQyxNQUFNb0csV0FBVztZQUNmeFEsT0FBT3lRLE1BQU0sR0FBR3ZRLE9BQU9DLFVBQVUsR0FBR0QsT0FBT0UsV0FBVztZQUN0REosT0FBTzBRLHNCQUFzQjtZQUM3QmxRLFNBQVNLLE9BQU8sQ0FBQ1gsT0FBT0MsVUFBVSxFQUFFRCxPQUFPRSxXQUFXO1FBQ3hEO1FBQ0FGLE9BQU95RSxnQkFBZ0IsQ0FBQyxVQUFVNkw7UUFFbEMsT0FBTztZQUNMdFEsT0FBT3lRLG1CQUFtQixDQUFDLFVBQVV0TTtZQUNyQ25FLE9BQU95USxtQkFBbUIsQ0FBQyxVQUFVSDtZQUNyQ2xSLE1BQU1zUixXQUFXLENBQUNwUSxTQUFTUSxVQUFVO1FBQ3ZDO0lBQ0YsR0FBRyxFQUFFO0lBRUwscUJBQU8sOERBQUM2UDtRQUFJQyxLQUFLMVI7Ozs7OztBQUNuQjtHQTFqQk1EO0tBQUFBO0FBNGpCTiwrREFBZUEsU0FBU0EsRUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9jb21wb25lbnRzL1N0YXJmaWVsZC5qc3g/ZjFhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbmNvbnN0IFN0YXJmaWVsZCA9ICgpID0+IHtcbiAgY29uc3QgbW91bnRSZWYgPSB1c2VSZWYobnVsbClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIERlZmVuc2l2ZTogYWx3YXlzIHVzZSAuY3VycmVudCBmb3IgcmVmc1xuICAgIGlmICghbW91bnRSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgIGNvbnN0IG1vdW50ID0gbW91bnRSZWYuY3VycmVudFxuICAgIG1vdW50LnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJ1xuICAgIG1vdW50LnN0eWxlLnRvcCA9ICcwJ1xuICAgIG1vdW50LnN0eWxlLmxlZnQgPSAnMCdcbiAgICBtb3VudC5zdHlsZS53aWR0aCA9ICcxMDAlJ1xuICAgIG1vdW50LnN0eWxlLmhlaWdodCA9ICcxMDAlJ1xuICAgIG1vdW50LnN0eWxlLnpJbmRleCA9ICcwJ1xuXG4gICAgLy8gU2NlbmUgJiBSZW5kZXJlclxuICAgIGNvbnN0IHNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKClcbiAgICBjb25zdCBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoNzUsIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LCAwLjEsIDUwMDApXG4gICAgY2FtZXJhLnBvc2l0aW9uLnNldCgwLCAwLCAwKTtcbiAgICAvLyBWaXJ0dWFsIHBvc2l0aW9uIHRvIHNpbXVsYXRlIGluZmluaXRlIHRyYXZlbFxuICAgIGxldCB2aXJ0dWFsQ2FtZXJhUG9zID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgMCk7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcih7IGFudGlhbGlhczogdHJ1ZSB9KVxuICAgIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pXG4gICAgcmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KVxuICAgIHJlbmRlcmVyLnNldENsZWFyQ29sb3IoMHgwMDAwMDAsIDEpO1xuICAgIG1vdW50LmFwcGVuZENoaWxkKHJlbmRlcmVyLmRvbUVsZW1lbnQpXG5cbiAgICAvLyBTdGFyZmllbGRcbiAgICBjb25zdCBzdGFyQ291bnQgPSAzMDAwXG4gICAgY29uc3Qgc3Rhck1heERpc3RhbmNlID0gMjAwMFxuICAgIGNvbnN0IHN0YXJTcGVlZCA9IDFcbiAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpXG4gICAgY29uc3QgcG9zaXRpb25zID0gW107XG4gICAgbGV0IHN0YXJzUGxhY2VkID0gMDtcbiAgICB3aGlsZSAoc3RhcnNQbGFjZWQgPCBzdGFyQ291bnQpIHtcbiAgICAgIC8vIFdpdGggMSUgY2hhbmNlLCBzcGF3biBhIHN0YXIgY2x1c3RlciAoMTAtMzAgc3RhcnMpXG4gICAgICBpZiAoTWF0aC5yYW5kb20oKSA8IDAuMDEgJiYgc3RhcnNQbGFjZWQgPCBzdGFyQ291bnQgLSAxMCkge1xuICAgICAgICBjb25zdCBjbHVzdGVyVGhldGEgPSBNYXRoLnJhbmRvbSgpICogMiAqIE1hdGguUEk7XG4gICAgICAgIGNvbnN0IGNsdXN0ZXJQaGkgPSBNYXRoLmFjb3MoMiAqIE1hdGgucmFuZG9tKCkgLSAxKTtcbiAgICAgICAgY29uc3QgY2x1c3RlclIgPSBNYXRoLnJhbmRvbSgpICogc3Rhck1heERpc3RhbmNlO1xuICAgICAgICBjb25zdCBjbHVzdGVyQ2VudGVyID0gW1xuICAgICAgICAgIGNsdXN0ZXJSICogTWF0aC5zaW4oY2x1c3RlclBoaSkgKiBNYXRoLmNvcyhjbHVzdGVyVGhldGEpLFxuICAgICAgICAgIGNsdXN0ZXJSICogTWF0aC5zaW4oY2x1c3RlclBoaSkgKiBNYXRoLnNpbihjbHVzdGVyVGhldGEpLFxuICAgICAgICAgIGNsdXN0ZXJSICogTWF0aC5jb3MoY2x1c3RlclBoaSlcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgY2x1c3RlclNpemUgPSAxMCArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIwKTsgLy8gMTAtMzAgc3RhcnNcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBjbHVzdGVyU2l6ZSAmJiBzdGFyc1BsYWNlZCA8IHN0YXJDb3VudDsgYysrKSB7XG4gICAgICAgICAgLy8gRWFjaCBzdGFyIGluIGNsdXN0ZXIgaXMgd2l0aGluIDMwIHVuaXRzIG9mIGNlbnRlclxuICAgICAgICAgIGNvbnN0IG9mZnNldFRoZXRhID0gTWF0aC5yYW5kb20oKSAqIDIgKiBNYXRoLlBJO1xuICAgICAgICAgIGNvbnN0IG9mZnNldFBoaSA9IE1hdGguYWNvcygyICogTWF0aC5yYW5kb20oKSAtIDEpO1xuICAgICAgICAgIGNvbnN0IG9mZnNldFIgPSBNYXRoLnJhbmRvbSgpICogMzA7IC8vIGNsdXN0ZXIgcmFkaXVzXG4gICAgICAgICAgcG9zaXRpb25zLnB1c2goXG4gICAgICAgICAgICBjbHVzdGVyQ2VudGVyWzBdICsgb2Zmc2V0UiAqIE1hdGguc2luKG9mZnNldFBoaSkgKiBNYXRoLmNvcyhvZmZzZXRUaGV0YSksXG4gICAgICAgICAgICBjbHVzdGVyQ2VudGVyWzFdICsgb2Zmc2V0UiAqIE1hdGguc2luKG9mZnNldFBoaSkgKiBNYXRoLnNpbihvZmZzZXRUaGV0YSksXG4gICAgICAgICAgICBjbHVzdGVyQ2VudGVyWzJdICsgb2Zmc2V0UiAqIE1hdGguY29zKG9mZnNldFBoaSlcbiAgICAgICAgICApO1xuICAgICAgICAgIHN0YXJzUGxhY2VkKys7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vcm1hbCBzaW5nbGUgc3RhclxuICAgICAgICBjb25zdCB0aGV0YSA9IE1hdGgucmFuZG9tKCkgKiAyICogTWF0aC5QSTtcbiAgICAgICAgY29uc3QgcGhpID0gTWF0aC5hY29zKDIgKiBNYXRoLnJhbmRvbSgpIC0gMSk7XG4gICAgICAgIGNvbnN0IHIgPSBNYXRoLnJhbmRvbSgpICogc3Rhck1heERpc3RhbmNlO1xuICAgICAgICBwb3NpdGlvbnMucHVzaChcbiAgICAgICAgICByICogTWF0aC5zaW4ocGhpKSAqIE1hdGguY29zKHRoZXRhKSxcbiAgICAgICAgICByICogTWF0aC5zaW4ocGhpKSAqIE1hdGguc2luKHRoZXRhKSxcbiAgICAgICAgICByICogTWF0aC5jb3MocGhpKVxuICAgICAgICApO1xuICAgICAgICBzdGFyc1BsYWNlZCsrO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUocG9zaXRpb25zLCAzKSlcblxuICAgIGNvbnN0IHBhbGV0dGUgPSBbXG4gICAgICBbMS4wLCAwLjUsIDAuNV0sXG4gICAgICBbMS4wLCAwLjc1LCAwLjRdLFxuICAgICAgWzEuMCwgMS4wLCAwLjldLFxuICAgICAgWzEuMCwgMS4wLCAxLjBdLFxuICAgICAgWzAuNCwgMC41LCAxLjBdLFxuICAgIF1cbiAgICBjb25zdCBjb2xvcnMgPSBbXVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhckNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IGMgPSBwYWxldHRlW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBhbGV0dGUubGVuZ3RoKV1cbiAgICAgIGNvbG9ycy5wdXNoKC4uLmMpXG4gICAgfVxuICAgIGdlb21ldHJ5LnNldEF0dHJpYnV0ZSgnY29sb3InLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZShjb2xvcnMsIDMpKVxuXG4gICAgY29uc3Qgb3JpZ2luYWxDb2xvcnMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yLmFycmF5LnNsaWNlKClcbiAgICBjb25zdCB0aW1lcnMgPSBuZXcgRmxvYXQzMkFycmF5KHN0YXJDb3VudClcbiAgICBjb25zdCBzcGFya0NvbG9ycyA9IG5ldyBGbG9hdDMyQXJyYXkoc3RhckNvdW50ICogMylcbiAgICBjb25zdCBzcGFya2xlRHVyYXRpb24gPSAxODBcblxuICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLlBvaW50c01hdGVyaWFsKHsgc2l6ZTogMy41LCBzaXplQXR0ZW51YXRpb246IHRydWUsIHZlcnRleENvbG9yczogdHJ1ZSB9KVxuICAgIGNvbnN0IHN0YXJzID0gbmV3IFRIUkVFLlBvaW50cyhnZW9tZXRyeSwgbWF0ZXJpYWwpXG4gICAgc2NlbmUuYWRkKHN0YXJzKVxuXG4gICAgbGV0IHRhcmdldFkgPSAwXG4gICAgY29uc3QgZGFtcGluZyA9IDAuMDVcbiAgICBjb25zdCBvblNjcm9sbCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHBjdCA9IHdpbmRvdy5zY3JvbGxZIC8gKGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0KVxuICAgICAgdGFyZ2V0WSA9IHBjdCAqIE1hdGguUEkgKiAyXG4gICAgfVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvblNjcm9sbClcblxuICAgIC8vIC0tLSBOZWJ1bGEgQ2xvdWRzIC0tLVxuICAgIGNvbnN0IG5lYnVsYVRleHR1cmVzID0gW1xuICAgICAgJy9uZWJ1bGExLnBuZycsXG4gICAgICAnL25lYnVsYTIucG5nJyxcbiAgICAgICcvbmVidWxhMy5wbmcnLFxuICAgIF07XG4gICAgY29uc3QgbmVidWxhQ2xvdWRzID0gW107XG4gICAgZnVuY3Rpb24gc3Bhd25OZWJ1bGFDbG91ZCgpIHtcbiAgICAgIGNvbnN0IHRleHR1cmVVcmwgPSBuZWJ1bGFUZXh0dXJlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqbmVidWxhVGV4dHVyZXMubGVuZ3RoKV07XG4gICAgICBjb25zdCB0ZXggPSBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlcigpLmxvYWQodGV4dHVyZVVybCk7XG4gICAgICBjb25zdCBjb2xvciA9IG5ldyBUSFJFRS5Db2xvcigpLnNldEhTTChNYXRoLnJhbmRvbSgpLCAwLjcsIDAuNSk7XG4gICAgICBjb25zdCBtYXQgPSBuZXcgVEhSRUUuU3ByaXRlTWF0ZXJpYWwoeyBtYXA6IHRleCwgY29sb3I6IGNvbG9yLCB0cmFuc3BhcmVudDogdHJ1ZSwgb3BhY2l0eTogMC4wLCBkZXB0aFdyaXRlOiBmYWxzZSwgYmxlbmRpbmc6IFRIUkVFLkFkZGl0aXZlQmxlbmRpbmcgfSk7XG4gICAgICBjb25zdCBzcHJpdGUgPSBuZXcgVEhSRUUuU3ByaXRlKG1hdCk7XG4gICAgICAvLyBQbGFjZSBuZWJ1bGEgZmFyIGZyb20gY2FtZXJhLCByYW5kb20gZGlyZWN0aW9uXG4gICAgICBjb25zdCBkaXIgPSBuZXcgVEhSRUUuVmVjdG9yMyhNYXRoLnJhbmRvbSgpKjItMSwgTWF0aC5yYW5kb20oKSoyLTEsIE1hdGgucmFuZG9tKCkqMi0xKS5ub3JtYWxpemUoKTtcbiAgICAgIGNvbnN0IGRpc3QgPSBzdGFyTWF4RGlzdGFuY2UgKiAoMC43ICsgTWF0aC5yYW5kb20oKSowLjMpO1xuICAgICAgc3ByaXRlLnBvc2l0aW9uLmNvcHkoZGlyLm11bHRpcGx5U2NhbGFyKGRpc3QpKTtcbiAgICAgIGNvbnN0IHNjYWxlID0gNDAwICsgTWF0aC5yYW5kb20oKSo0MDA7XG4gICAgICBzcHJpdGUuc2NhbGUuc2V0KHNjYWxlLCBzY2FsZSwgMSk7XG4gICAgICBzcHJpdGUubWF0ZXJpYWwub3BhY2l0eSA9IDAuMDtcbiAgICAgIHNjZW5lLmFkZChzcHJpdGUpO1xuICAgICAgbmVidWxhQ2xvdWRzLnB1c2goeyBzcHJpdGUsIGFnZTogMCwgZmFkZUluOiB0cnVlLCBmYWRlT3V0OiBmYWxzZSwgbGlmZXRpbWU6IDEyMDAgKyBNYXRoLnJhbmRvbSgpKjEyMDAsIGNvbG9yLCByb3RTcGVlZDogKE1hdGgucmFuZG9tKCktMC41KSowLjAwNSB9KTtcbiAgICB9XG5cbiAgICAvLyAtLS0gU2hvb3RpbmcgU3RhcnMgLS0tXG4gICAgY29uc3QgdGFpbExlbmd0aCA9IDMyOyAvLyBJbmNyZWFzZSBmb3IgbG9uZ2VyIHRhaWxzXG4gICAgY29uc3Qgc2hvb3RpbmdTdGFycyA9IFtdO1xuICAgIGxldCBzaG9vdGluZ1N0YXJDb29sZG93biA9IDA7XG4gICAgLy8gU3Bhd24gYSBzaG9vdGluZyBzdGFyIHdpdGggYSBzdHVubmluZyBnbG93aW5nIHRhaWxcbiAgICBmdW5jdGlvbiBzcGF3blNob290aW5nU3RhcigpIHtcbiAgICAgIC8vIFBpY2sgYSByYW5kb20gZGlyZWN0aW9uIG9uIHRoZSBzcGhlcmUgZm9yIHRoZSBzcGF3biBsb2NhdGlvblxuICAgICAgY29uc3QgZGlyID0gbmV3IFRIUkVFLlZlY3RvcjMoTWF0aC5yYW5kb20oKSoyLTEsIE1hdGgucmFuZG9tKCkqMi0xLCBNYXRoLnJhbmRvbSgpKjItMSkubm9ybWFsaXplKCk7XG4gICAgICAvLyBFbnN1cmUgc2hvb3Rpbmcgc3RhcnMgbmV2ZXIgc3Bhd24gY2xvc2UgdG8gdGhlIGNhbWVyYSAoYXQgbGVhc3QgNzAlIG9mIG1heCBkaXN0YW5jZSlcbiAgICAgIGNvbnN0IG1pbkRpc3QgPSBzdGFyTWF4RGlzdGFuY2UgKiAwLjc7XG4gICAgICBjb25zdCBtYXhEaXN0ID0gc3Rhck1heERpc3RhbmNlICogMS4wO1xuICAgICAgY29uc3QgZGlzdCA9IG1pbkRpc3QgKyBNYXRoLnJhbmRvbSgpICogKG1heERpc3QgLSBtaW5EaXN0KTtcbiAgICAgIGNvbnN0IHNwYXduUG9zID0gZGlyLmNsb25lKCkubXVsdGlwbHlTY2FsYXIoZGlzdCk7XG4gICAgICAvLyBUYW5nZW50aWFsIHZlbG9jaXR5OiBwZXJwZW5kaWN1bGFyIHRvIGRpclxuICAgICAgbGV0IHRhbmdlbnQgPSBuZXcgVEhSRUUuVmVjdG9yMyhNYXRoLnJhbmRvbSgpKjItMSwgTWF0aC5yYW5kb20oKSoyLTEsIE1hdGgucmFuZG9tKCkqMi0xKTtcbiAgICAgIHRhbmdlbnQgPSB0YW5nZW50LnN1Yih0YW5nZW50LmNsb25lKCkucHJvamVjdE9uVmVjdG9yKGRpcikpLm5vcm1hbGl6ZSgpO1xuICAgICAgLy8gTWl4IGluIGEgc21hbGwgcmFkaWFsIGNvbXBvbmVudCAoaW53YXJkIG9yIG91dHdhcmQpXG4gICAgICBjb25zdCB0YW5nZW50aWFsU3BlZWQgPSBzdGFyU3BlZWQgKiAoMi41ICsgTWF0aC5yYW5kb20oKSAqIDIuNSk7IC8vIG11Y2ggZmFzdGVyXG4gICAgICBjb25zdCByYWRpYWxTcGVlZCA9IHN0YXJTcGVlZCAqIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDAuMzsgLy8gbW9yZSBkcmFtYXRpY1xuICAgICAgY29uc3QgdmVsb2NpdHkgPSB0YW5nZW50Lm11bHRpcGx5U2NhbGFyKHRhbmdlbnRpYWxTcGVlZCkuYWRkKGRpci5jbG9uZSgpLm11bHRpcGx5U2NhbGFyKHJhZGlhbFNwZWVkKSk7XG5cbiAgICAgIC8vIFN0dW5uaW5nIGNvbG9yIGdyYWRpZW50IGZvciB0aGUgaGVhZFxuICAgICAgY29uc3QgdmlicmFudENvbG9ycyA9IFsweGZmZTA2NiwgMHhmZjY2Y2MsIDB4NjZjY2ZmLCAweGZmZmZmZiwgMHg4MGZmZWEsIDB4ZmZmMmNjLCAweGZmYzA4MCwgMHg4MGMwZmYsIDB4ZmY4MGIzXTtcbiAgICAgIGNvbnN0IGNvbG9yID0gdmlicmFudENvbG9yc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqdmlicmFudENvbG9ycy5sZW5ndGgpXTtcbiAgICAgIC8vIFN0YXIgYnJpZ2h0bmVzcyBhbmQgc2l6ZSAoYWx3YXlzIHNtYWxsIGFuZCBzdWJ0bGUpXG4gICAgICBjb25zdCBicmlnaHRuZXNzID0gMi41ICsgTWF0aC5yYW5kb20oKSoxLjU7XG4gICAgICBjb25zdCBnZW8gPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoMC43ICsgTWF0aC5yYW5kb20oKSowLjUsIDE2LCAxNik7IC8vIFNtYWxsIHNwaGVyZVxuICAgICAgY29uc3QgbWF0ID0gbmV3IFRIUkVFLk1lc2hQaHlzaWNhbE1hdGVyaWFsKHtcbiAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICBlbWlzc2l2ZTogY29sb3IsXG4gICAgICAgIGVtaXNzaXZlSW50ZW5zaXR5OiAyLjUsXG4gICAgICAgIG1ldGFsbmVzczogMC43LFxuICAgICAgICByb3VnaG5lc3M6IDAuMyxcbiAgICAgICAgdHJhbnNtaXNzaW9uOiAwLjcsXG4gICAgICAgIG9wYWNpdHk6IDAuOTgsXG4gICAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgICAgICBjbGVhcmNvYXQ6IDAuOCxcbiAgICAgICAgY2xlYXJjb2F0Um91Z2huZXNzOiAwLjIsXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHN0YXIgPSBuZXcgVEhSRUUuTWVzaChnZW8sIG1hdCk7XG4gICAgICAvLyBBZGQgYSBnbG93aW5nIHNwcml0ZSBmb3IgZXh0cmEgZ2xvd1xuICAgICAgY29uc3Qgc3ByaXRlTWFwID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKS5sb2FkKCdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vbXJkb29iL3RocmVlLmpzL21hc3Rlci9leGFtcGxlcy90ZXh0dXJlcy9zcHJpdGVzL2dsb3cucG5nJyk7XG4gICAgICBjb25zdCBzcHJpdGVNYXRlcmlhbCA9IG5ldyBUSFJFRS5TcHJpdGVNYXRlcmlhbCh7IG1hcDogc3ByaXRlTWFwLCBjb2xvcjogY29sb3IsIG9wYWNpdHk6IDAuOCwgYmxlbmRpbmc6IFRIUkVFLkFkZGl0aXZlQmxlbmRpbmcgfSk7XG4gICAgICBjb25zdCBzcHJpdGUgPSBuZXcgVEhSRUUuU3ByaXRlKHNwcml0ZU1hdGVyaWFsKTtcbiAgICAgIHNwcml0ZS5zY2FsZS5zZXQoMzAsIDMwLCAxKTtcbiAgICAgIHNwcml0ZS5wb3NpdGlvbi5jb3B5KHN0YXIucG9zaXRpb24pO1xuICAgICAgc3Rhci5hZGQoc3ByaXRlKTtcbiAgICAgIC8vIEFkZCBkeW5hbWljIHNwYXJrIGJ1cnN0IGF0IHRoZSBoZWFkXG4gICAgICBjb25zdCBzcGFya0NvdW50ID0gMTggKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqOCk7XG4gICAgICBjb25zdCBzcGFya0dyb3VwID0gbmV3IFRIUkVFLkdyb3VwKCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNwYXJrQ291bnQ7IGkrKykge1xuICAgICAgICBjb25zdCBzcGFya01hdCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7IGNvbG9yOiB2aWJyYW50Q29sb3JzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSp2aWJyYW50Q29sb3JzLmxlbmd0aCldLCB0cmFuc3BhcmVudDogdHJ1ZSwgb3BhY2l0eTogMC44IH0pO1xuICAgICAgICBjb25zdCBzcGFya0dlbyA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSgwLjA3ICsgTWF0aC5yYW5kb20oKSowLjA2LCA4LCA4KTtcbiAgICAgICAgY29uc3Qgc3BhcmsgPSBuZXcgVEhSRUUuTWVzaChzcGFya0dlbywgc3BhcmtNYXQpO1xuICAgICAgICBjb25zdCBhbmdsZSA9IChpIC8gc3BhcmtDb3VudCkgKiBNYXRoLlBJICogMjtcbiAgICAgICAgc3BhcmsucG9zaXRpb24uc2V0KE1hdGguY29zKGFuZ2xlKSoxLjIsIE1hdGguc2luKGFuZ2xlKSoxLjIsIE1hdGgucmFuZG9tKCkqMC40LTAuMik7XG4gICAgICAgIHNwYXJrR3JvdXAuYWRkKHNwYXJrKTtcbiAgICAgIH1cbiAgICAgIHNwYXJrR3JvdXAubmFtZSA9ICdzcGFya0J1cnN0JztcbiAgICAgIHN0YXIuYWRkKHNwYXJrR3JvdXApO1xuICAgICAgc3Rhci5wb3NpdGlvbi5jb3B5KHNwYXduUG9zKTtcbiAgICAgIHN0YXIudmVsb2NpdHkgPSB2ZWxvY2l0eTtcbiAgICAgIHN0YXIubm9ybWFsaXplZExpZmUgPSAwLjA7XG4gICAgICBzdGFyLm5vcm1hbGl6ZWRMaWZldGltZSA9IDgwICsgTWF0aC5yYW5kb20oKSAqIDgwOyAvLyBMb25nZXIsIG1vcmUgZHJhbWF0aWNcbiAgICAgIHN0YXIuYWdlID0gMDtcbiAgICAgIC8vIC0tLSBTdHVubmluZyBNZXRlb3IgVGFpbCAodmVyeSBsb25nLCBtdWx0aS1jb2xvciwgZ2xvd2luZywgZmFkaW5nLCBhbmQgM0QgY3VydmUpIC0tLVxuICAgICAgY29uc3QgdHJhaWxTZWdtZW50cyA9IHRhaWxMZW5ndGggKiAzOyAvLyBFdmVuIGxvbmdlciB0YWlsXG4gICAgICBjb25zdCB0cmFpbFBvaW50cyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmFpbFNlZ21lbnRzOyBpKyspIHtcbiAgICAgICAgLy8gQWRkIGEgM0Qgc3BpcmFsL2N1cnZlIGZvciBtb3JlIGRlcHRoXG4gICAgICAgIGNvbnN0IHNwaXJhbCA9IE1hdGguc2luKGkgKiAwLjI1KSAqIDg7XG4gICAgICAgIGNvbnN0IGN1cnZlID0gTWF0aC5jb3MoaSAqIDAuMTUpICogNDtcbiAgICAgICAgY29uc3QgcHQgPSBzdGFyLnBvc2l0aW9uLmNsb25lKCkuYWRkKG5ldyBUSFJFRS5WZWN0b3IzKHNwaXJhbCwgY3VydmUsIC1pICogMykpO1xuICAgICAgICB0cmFpbFBvaW50cy5wdXNoKHB0KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHRhaWxHZW8gPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKS5zZXRGcm9tUG9pbnRzKHRyYWlsUG9pbnRzKTtcbiAgICAgIC8vIFBlci12ZXJ0ZXggY29sb3IgKG11bHRpLWNvbG9yIHJhaW5ib3cgZ3JhZGllbnQpXG4gICAgICBjb25zdCB0YWlsQ29sb3JzID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyYWlsU2VnbWVudHM7IGkrKykge1xuICAgICAgICAvLyBBbHBoYSBmYWRlcyBvdXQgYWxvbmcgdGhlIHRhaWxcbiAgICAgICAgY29uc3QgYWxwaGEgPSAoMSAtIGkgLyAodHJhaWxTZWdtZW50cyAtIDEpKSAqIDAuOTk7XG4gICAgICAgIC8vIFJhaW5ib3cgZ3JhZGllbnRcbiAgICAgICAgY29uc3QgcmFpbmJvdyA9IFsweGZmZTA2NiwgMHhmZjY2Y2MsIDB4NjZjY2ZmLCAweGZmZmZmZiwgMHg4MGZmZWEsIDB4ZmZmMmNjLCAweGZmYzA4MCwgMHg4MGMwZmYsIDB4ZmY4MGIzXTtcbiAgICAgICAgY29uc3QgZ3JhZENvbG9yID0gcmFpbmJvd1tNYXRoLmZsb29yKChpIC8gdHJhaWxTZWdtZW50cykgKiByYWluYm93Lmxlbmd0aCldO1xuICAgICAgICB0YWlsQ29sb3JzLnB1c2goKGdyYWRDb2xvciA+PiAxNiAmIDI1NSkgLyAyNTUsIChncmFkQ29sb3IgPj4gOCAmIDI1NSkgLyAyNTUsIChncmFkQ29sb3IgJiAyNTUpIC8gMjU1LCBhbHBoYSk7XG4gICAgICB9XG4gICAgICB0YWlsR2VvLnNldEF0dHJpYnV0ZSgnY29sb3InLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSh0YWlsQ29sb3JzLCA0KSk7XG4gICAgICAvLyBBZGRpdGl2ZSBibGVuZGluZyBmb3IgZ2xvd1xuICAgICAgY29uc3QgdGFpbE1hdCA9IG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7IHZlcnRleENvbG9yczogdHJ1ZSwgdHJhbnNwYXJlbnQ6IHRydWUsIG9wYWNpdHk6IDEuMCwgYmxlbmRpbmc6IFRIUkVFLkFkZGl0aXZlQmxlbmRpbmcgfSk7XG4gICAgICBjb25zdCB0YWlsID0gbmV3IFRIUkVFLkxpbmUodGFpbEdlbywgdGFpbE1hdCk7XG4gICAgICB0YWlsLnBvc2l0aW9uLmNvcHkoc3Rhci5wb3NpdGlvbik7XG4gICAgICAvLyBBZGQgdG8gc2NlbmVcbiAgICAgIHNjZW5lLmFkZChzdGFyKTtcbiAgICAgIHNjZW5lLmFkZCh0YWlsKTtcbiAgICAgIHNob290aW5nU3RhcnMucHVzaCh7IG1lc2g6IHN0YXIsIHRhaWwsIHZlbG9jaXR5OiBzdGFyLnZlbG9jaXR5LCBkaXIsIGFnZTogMCwgbm9ybWFsaXplZExpZmV0aW1lOiBzdGFyLm5vcm1hbGl6ZWRMaWZldGltZSwgdHJhaWxQb2ludHMsIGNvbG9yLCBicmlnaHRuZXNzLCBoYXNGcmFnbWVudGVkOiBmYWxzZSB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBhbmltYXRlID0gKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgICAgIC8vIE9jY2FzaW9uYWxseSBzcGF3biBhIG5lYnVsYSBjbG91ZFxuICAgICAgLy8gREVWOiBTcGF3biBhIGxvdCBvZiBuZWJ1bGFlIGZvciB0ZXN0aW5nXG4gICAgICBpZiAoTWF0aC5yYW5kb20oKSA8IDAuMjUgJiYgbmVidWxhQ2xvdWRzLmxlbmd0aCA8IDMwKSB7XG4gICAgICAgIHNwYXduTmVidWxhQ2xvdWQoKTtcbiAgICAgIH1cbiAgICAgIC8vIEFuaW1hdGUgbmVidWxhIGNsb3Vkc1xuICAgICAgZm9yIChsZXQgaSA9IG5lYnVsYUNsb3Vkcy5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgY2xvdWQgPSBuZWJ1bGFDbG91ZHNbaV07XG4gICAgICAgIGNsb3VkLmFnZSsrO1xuICAgICAgICAvLyBGYWRlIGluXG4gICAgICAgIGlmIChjbG91ZC5mYWRlSW4gJiYgY2xvdWQuc3ByaXRlLm1hdGVyaWFsLm9wYWNpdHkgPCAwLjU1KSB7XG4gICAgICAgICAgY2xvdWQuc3ByaXRlLm1hdGVyaWFsLm9wYWNpdHkgKz0gMC4wMDk7XG4gICAgICAgICAgaWYgKGNsb3VkLnNwcml0ZS5tYXRlcmlhbC5vcGFjaXR5ID49IDAuNTUpIGNsb3VkLmZhZGVJbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZhZGUgb3V0XG4gICAgICAgIGlmIChjbG91ZC5hZ2UgPiBjbG91ZC5saWZldGltZSAqIDAuNykge1xuICAgICAgICAgIGNsb3VkLmZhZGVPdXQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbG91ZC5mYWRlT3V0KSB7XG4gICAgICAgICAgY2xvdWQuc3ByaXRlLm1hdGVyaWFsLm9wYWNpdHkgLT0gMC4wMDY7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVtb3ZlIHdoZW4gZnVsbHkgZmFkZWRcbiAgICAgICAgaWYgKGNsb3VkLnNwcml0ZS5tYXRlcmlhbC5vcGFjaXR5IDw9IDApIHtcbiAgICAgICAgICBzY2VuZS5yZW1vdmUoY2xvdWQuc3ByaXRlKTtcbiAgICAgICAgICBuZWJ1bGFDbG91ZHMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNsb3cgZHJpZnQgYW5kIHJvdGF0aW9uXG4gICAgICAgIGNsb3VkLnNwcml0ZS5wb3NpdGlvbi54ICs9IE1hdGguc2luKGNsb3VkLmFnZSowLjAwMSArIGkpICogMC4wOTtcbiAgICAgICAgY2xvdWQuc3ByaXRlLnBvc2l0aW9uLnkgKz0gTWF0aC5jb3MoY2xvdWQuYWdlKjAuMDAxMiAtIGkpICogMC4wNztcbiAgICAgICAgY2xvdWQuc3ByaXRlLm1hdGVyaWFsLnJvdGF0aW9uICs9IGNsb3VkLnJvdFNwZWVkO1xuICAgICAgICAvLyBBbmltYXRlIGNvbG9yIGdlbnRseVxuICAgICAgICBjbG91ZC5zcHJpdGUubWF0ZXJpYWwuY29sb3Iub2Zmc2V0SFNMKDAuMDAwNypNYXRoLnNpbihjbG91ZC5hZ2UqMC4wMDA3K2kpLCAwLCAwKTtcbiAgICAgIH1cbiAgICAgIGNhbWVyYS5yb3RhdGlvbi55ICs9ICh0YXJnZXRZIC0gY2FtZXJhLnJvdGF0aW9uLnkpICogZGFtcGluZztcbiAgICAgIC8vIE1vdmUgdGhlIHZpcnR1YWwgY2FtZXJhIHBvc2l0aW9uIGluIHRoZSBkaXJlY3Rpb24gdGhlIGNhbWVyYSBpcyBmYWNpbmdcbiAgICAgIGNvbnN0IGZvcndhcmQgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuICAgICAgY2FtZXJhLmdldFdvcmxkRGlyZWN0aW9uKGZvcndhcmQpO1xuICAgICAgdmlydHVhbENhbWVyYVBvcy5hZGQoZm9yd2FyZC5tdWx0aXBseVNjYWxhcihzdGFyU3BlZWQpKTtcbiAgICAgIC8vIE9mZnNldCBhbGwgc3RhcnMgYnkgLXZpcnR1YWxDYW1lcmFQb3MgKGZsb2F0aW5nIG9yaWdpbilcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXlbaV0gPSBwb3NpdGlvbnNbaV0gLSB2aXJ0dWFsQ2FtZXJhUG9zLng7XG4gICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXlbaSsxXSA9IHBvc2l0aW9uc1tpKzFdIC0gdmlydHVhbENhbWVyYVBvcy55O1xuICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5W2krMl0gPSBwb3NpdGlvbnNbaSsyXSAtIHZpcnR1YWxDYW1lcmFQb3MuejtcbiAgICAgIH1cbiAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG4gICAgICAvLyAtLS0gU2hvb3Rpbmcgc3RhciBzcGF3bmluZyAtLS1cbiAgICAgIC8vIERFVjogTWFrZSBzaG9vdGluZyBzdGFycyBzdXBlciBjb21tb24gKHNwYXduIGV2ZXJ5IGZyYW1lIGlmIGNvb2xkb3duIGFsbG93cylcbiAgICAgIGlmIChzaG9vdGluZ1N0YXJDb29sZG93biA8PSAwICYmIE1hdGgucmFuZG9tKCkgPCAwLjEpIHsgLy8gU2hvb3RpbmcgU3RhciBTcGF3biBSYXRlICh0aHJvdHRsZWQpXG4gICAgICAgIHNwYXduU2hvb3RpbmdTdGFyKCk7XG4gICAgICAgIC8vIFN1YnRsZSBjYW1lcmEgc2hha2Ugd2hlbiBhIHNob290aW5nIHN0YXIgYXBwZWFyc1xuICAgICAgICBpZiAoY2FtZXJhKSB7XG4gICAgICAgICAgY29uc3Qgc2hha2VTdHJlbmd0aCA9IDAuMDYgKyBNYXRoLnJhbmRvbSgpKjAuMDQ7XG4gICAgICAgICAgY2FtZXJhLnBvc2l0aW9uLnggKz0gKE1hdGgucmFuZG9tKCktMC41KSpzaGFrZVN0cmVuZ3RoO1xuICAgICAgICAgIGNhbWVyYS5wb3NpdGlvbi55ICs9IChNYXRoLnJhbmRvbSgpLTAuNSkqc2hha2VTdHJlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBzaG9vdGluZ1N0YXJDb29sZG93biA9IDEwICsgTWF0aC5yYW5kb20oKSAqIDEwOyAvLyBMb25nZXIgY29vbGRvd24gZm9yIHBlcmZcbiAgICAgIH0gZWxzZSBpZiAoc2hvb3RpbmdTdGFyQ29vbGRvd24gPiAwKSB7XG4gICAgICAgIHNob290aW5nU3RhckNvb2xkb3duLS07XG4gICAgICB9XG4gICAgICAvLyBBbmltYXRlIGFuZCBjbGVhbiB1cCBzaG9vdGluZyBzdGFyc1xuICAgICAgZm9yIChsZXQgaSA9IHNob290aW5nU3RhcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3Qgb2JqID0gc2hvb3RpbmdTdGFyc1tpXTtcbiAgICAgICAgLy8gQW5pbWF0ZSBzcGFyayBidXJzdCAoZmFkZSBhbmQgZXhwYW5kKVxuICAgICAgICBpZiAob2JqLm1lc2guY2hpbGRyZW4pIHtcbiAgICAgICAgICBjb25zdCBzcGFya3MgPSBvYmoubWVzaC5jaGlsZHJlbi5maW5kKGNoaWxkID0+IGNoaWxkLm5hbWUgPT09ICdzcGFya0J1cnN0Jyk7XG4gICAgICAgICAgaWYgKHNwYXJrcykge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzcGFya3MuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgY29uc3Qgc3BhcmsgPSBzcGFya3MuY2hpbGRyZW5bal07XG4gICAgICAgICAgICAgIHNwYXJrLm1hdGVyaWFsLm9wYWNpdHkgKj0gMC45NjsgLy8gRmFkZVxuICAgICAgICAgICAgICBzcGFyay5zY2FsZS5tdWx0aXBseVNjYWxhcigxLjAzKTsgLy8gRXhwYW5kXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEFuaW1hdGUgdGFpbCBzaGltbWVyIGFuZCBjb2xvciBjeWNsaW5nXG4gICAgICAgIGlmIChvYmoudGFpbCAmJiBvYmoudHJhaWxQb2ludHMpIHtcbiAgICAgICAgICBjb25zdCB0aW1lID0gcGVyZm9ybWFuY2Uubm93KCkgKiAwLjAwMTtcbiAgICAgICAgICBjb25zdCB0YWlsR2VvID0gb2JqLnRhaWwuZ2VvbWV0cnk7XG4gICAgICAgICAgY29uc3QgdGFpbENvbG9ycyA9IHRhaWxHZW8uZ2V0QXR0cmlidXRlKCdjb2xvcicpO1xuICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgdGFpbENvbG9ycy5jb3VudDsgaysrKSB7XG4gICAgICAgICAgICAvLyBDeWNsZSBodWVcbiAgICAgICAgICAgIGxldCByID0gdGFpbENvbG9ycy5nZXRYKGspLCBnID0gdGFpbENvbG9ycy5nZXRZKGspLCBiID0gdGFpbENvbG9ycy5nZXRaKGspO1xuICAgICAgICAgICAgLy8gQ29udmVydCB0byBIU0xcbiAgICAgICAgICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KHIsZyxiKSwgbWluID0gTWF0aC5taW4ocixnLGIpO1xuICAgICAgICAgICAgbGV0IGgscyxsO1xuICAgICAgICAgICAgbCA9IChtYXgrbWluKS8yO1xuICAgICAgICAgICAgaWYgKG1heCA9PT0gbWluKSB7aCA9IHMgPSAwO30gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnN0IGQgPSBtYXgtbWluO1xuICAgICAgICAgICAgICBzID0gbCA+IDAuNSA/IGQvKDItbWF4LW1pbikgOiBkLyhtYXgrbWluKTtcbiAgICAgICAgICAgICAgc3dpdGNoKG1heCl7XG4gICAgICAgICAgICAgICAgY2FzZSByOiBoID0gKGctYikvZCArIChnPGI/NjowKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBnOiBoID0gKGItcikvZCArIDI7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgYjogaCA9IChyLWcpL2QgKyA0OyBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBoLz02O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaCA9IChoICsgMC4yNSpNYXRoLnNpbih0aW1lICsgayowLjIpKSAlIDEuMDsgLy8gQW5pbWF0ZSBodWVcbiAgICAgICAgICAgIC8vIENvbnZlcnQgYmFjayB0byBSR0JcbiAgICAgICAgICAgIGxldCBxID0gbCA8IDAuNSA/IGwqKDErcykgOiBsK3MtbCpzO1xuICAgICAgICAgICAgbGV0IHAgPSAyKmwtcTtcbiAgICAgICAgICAgIGxldCB0ciA9IGgrMS8zLCB0ZyA9IGgsIHRiID0gaC0xLzM7XG4gICAgICAgICAgICBjb25zdCBodWUycmdiID0gKHAscSx0KSA9PiB7XG4gICAgICAgICAgICAgIGlmICh0PDApIHQrPTE7IGlmICh0PjEpIHQtPTE7XG4gICAgICAgICAgICAgIGlmICh0PDEvNikgcmV0dXJuIHArKHEtcCkqNip0O1xuICAgICAgICAgICAgICBpZiAodDwxLzIpIHJldHVybiBxO1xuICAgICAgICAgICAgICBpZiAodDwyLzMpIHJldHVybiBwKyhxLXApKigyLzMtdCkqNjtcbiAgICAgICAgICAgICAgcmV0dXJuIHA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGFpbENvbG9ycy5zZXRYKGssIGh1ZTJyZ2IocCxxLHRyKSk7XG4gICAgICAgICAgICB0YWlsQ29sb3JzLnNldFkoaywgaHVlMnJnYihwLHEsdGcpKTtcbiAgICAgICAgICAgIHRhaWxDb2xvcnMuc2V0WihrLCBodWUycmdiKHAscSx0YikpO1xuICAgICAgICAgICAgLy8gU2hpbW1lcjogbW9kdWxhdGUgYWxwaGFcbiAgICAgICAgICAgIHRhaWxDb2xvcnMuc2V0VyhrLCB0YWlsQ29sb3JzLmdldFcoaykgKiAoMC45NyArIDAuMDMqTWF0aC5zaW4odGltZSo4ICsgaykpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGFpbENvbG9ycy5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3RyYWlnaHQtbGluZSB0cmFqZWN0b3J5XG4gICAgICAgIG9iai5tZXNoLnBvc2l0aW9uLmFkZChvYmoudmVsb2NpdHkpO1xuICAgICAgICBvYmoudGFpbC5wb3NpdGlvbi5jb3B5KG9iai5tZXNoLnBvc2l0aW9uKTtcbiAgICAgICAgLy8gQW5pbWF0ZSB0YWlsIChubyBsZXJwLCBqdXN0IGRyYWcpXG4gICAgICAgIG9iai5hZ2UrKztcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZExpZmUgPSBvYmouYWdlIC8gb2JqLm5vcm1hbGl6ZWRMaWZldGltZTtcbiAgICAgICAgb2JqLnRyYWlsUG9pbnRzLnVuc2hpZnQob2JqLm1lc2gucG9zaXRpb24uY2xvbmUoKSk7XG4gICAgICAgIGlmIChvYmoudHJhaWxQb2ludHMubGVuZ3RoID4gdGFpbExlbmd0aCAqIDMpIG9iai50cmFpbFBvaW50cy5wb3AoKTtcbiAgICAgICAgbGV0IHRhaWxHcm93ID0gTWF0aC5taW4oMSwgbm9ybWFsaXplZExpZmUgLyAwLjMpO1xuICAgICAgICBsZXQgYWN0aXZlU2VnbWVudHMgPSBNYXRoLmZsb29yKG9iai50cmFpbFBvaW50cy5sZW5ndGggKiB0YWlsR3Jvdyk7XG4gICAgICAgIGlmIChhY3RpdmVTZWdtZW50cyA8IDIpIGFjdGl2ZVNlZ21lbnRzID0gMjtcbiAgICAgICAgY29uc3QgdmlzaWJsZVRyYWlsID0gb2JqLnRyYWlsUG9pbnRzLnNsaWNlKDAsIGFjdGl2ZVNlZ21lbnRzKTtcbiAgICAgICAgb2JqLnRhaWwuZ2VvbWV0cnkuc2V0RnJvbVBvaW50cyh2aXNpYmxlVHJhaWwpO1xuICAgICAgICBjb25zdCB0YWlsQ29sb3JzID0gb2JqLnRhaWwuZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCdjb2xvcicpO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZpc2libGVUcmFpbC5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGxldCBhbHBoYSA9ICgxIC0gaiAvICh2aXNpYmxlVHJhaWwubGVuZ3RoIC0gMSkpICogMC45NTtcbiAgICAgICAgICBhbHBoYSAqPSAwLjkyICsgMC4wOCAqIE1hdGguc2luKERhdGUubm93KCkqMC4wMTUgKyBqKjAuNSk7XG4gICAgICAgICAgbGV0IHJhaW5ib3cgPSBbMHhmZmMwODAsIDB4ZmZlMDgwLCAweGZmZmY4MCwgMHg4MGZmZTYsIDB4ODBjMGZmLCAweGMwODBmZl07XG4gICAgICAgICAgbGV0IGdyYWRDb2xvciA9IHJhaW5ib3dbaiAlIHJhaW5ib3cubGVuZ3RoXTtcbiAgICAgICAgICBpZiAobm9ybWFsaXplZExpZmUgPiAwLjcpIGFscGhhICo9IE1hdGgubWF4KDAsIDEgLSAobm9ybWFsaXplZExpZmUgLSAwLjcgLSAwLjIpIC8gMC4zKTtcbiAgICAgICAgICB0YWlsQ29sb3JzLnNldFhZWlcoaiwgKGdyYWRDb2xvciA+PiAxNiAmIDI1NSkgLyAyNTUsIChncmFkQ29sb3IgPj4gOCAmIDI1NSkgLyAyNTUsIChncmFkQ29sb3IgJiAyNTUpIC8gMjU1LCBhbHBoYSk7XG4gICAgICAgIH1cbiAgICAgICAgdGFpbENvbG9ycy5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIC8vIEFuaW1hdGUgaGVhZFxuICAgICAgICBsZXQgaGVhZENvbG9yO1xuICAgICAgICBpZiAobm9ybWFsaXplZExpZmUgPCAwLjUpIHtcbiAgICAgICAgICBoZWFkQ29sb3IgPSBuZXcgVEhSRUUuQ29sb3Iob2JqLmNvbG9yKS5sZXJwKG5ldyBUSFJFRS5Db2xvcigweGZmYzA4MCksIG5vcm1hbGl6ZWRMaWZlKjIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhlYWRDb2xvciA9IG5ldyBUSFJFRS5Db2xvcigweGZmYzA4MCkubGVycChuZXcgVEhSRUUuQ29sb3IoMHhmZjQwMDApLCAobm9ybWFsaXplZExpZmUtMC41KSoyKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZmxpY2tlciA9IDAuOTUgKyAwLjEzICogTWF0aC5zaW4oRGF0ZS5ub3coKSowLjA3ICsgTWF0aC5yYW5kb20oKSoxMCk7XG4gICAgICAgIGhlYWRDb2xvci5tdWx0aXBseVNjYWxhcihmbGlja2VyKTtcbiAgICAgICAgb2JqLm1lc2gubWF0ZXJpYWwuY29sb3IuY29weShoZWFkQ29sb3IpO1xuICAgICAgICBsZXQgc2NhbGUgPSAxICsgMi4yICogTWF0aC5zaW4oTWF0aC5QSSAqIG5vcm1hbGl6ZWRMaWZlKTtcbiAgICAgICAgbGV0IGRpc3RUb0NhbSA9IG9iai5tZXNoLnBvc2l0aW9uLmxlbmd0aCgpO1xuICAgICAgICBsZXQgZG9mQmx1ciA9IGRpc3RUb0NhbSA8IHN0YXJNYXhEaXN0YW5jZSAqIDAuNyA/IDAuNyA6IDEuMDtcbiAgICAgICAgb2JqLm1lc2guc2NhbGUuc2V0KHNjYWxlICogZG9mQmx1ciwgc2NhbGUgKiBkb2ZCbHVyLCBzY2FsZSAqIGRvZkJsdXIpO1xuICAgICAgICAvLyBTcGFya2xlIGJ1cnN0XG4gICAgICAgIGlmIChub3JtYWxpemVkTGlmZSA+PSAxICYmICFvYmouaGFzRnJhZ21lbnRlZCkge1xuICAgICAgICAgIGZvciAobGV0IHMgPSAwOyBzIDwgOTsgcysrKSB7XG4gICAgICAgICAgICBjb25zdCBzcGFya2xlR2VvID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDAuNyArIE1hdGgucmFuZG9tKCkqMC44LCA4LCA4KTtcbiAgICAgICAgICAgIGNvbnN0IHNwYXJrbGVNYXQgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogMHhmZmZmZmYsIHRyYW5zcGFyZW50OiB0cnVlLCBvcGFjaXR5OiAwLjcsIGJsZW5kaW5nOiBUSFJFRS5BZGRpdGl2ZUJsZW5kaW5nIH0pO1xuICAgICAgICAgICAgY29uc3Qgc3BhcmtsZSA9IG5ldyBUSFJFRS5NZXNoKHNwYXJrbGVHZW8sIHNwYXJrbGVNYXQpO1xuICAgICAgICAgICAgc3BhcmtsZS5wb3NpdGlvbi5jb3B5KG9iai5tZXNoLnBvc2l0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IHNwYXJrbGVWZWwgPSBuZXcgVEhSRUUuVmVjdG9yMyhNYXRoLnJhbmRvbSgpLTAuNSwgTWF0aC5yYW5kb20oKS0wLjUsIE1hdGgucmFuZG9tKCktMC41KS5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhcigyK01hdGgucmFuZG9tKCkqMik7XG4gICAgICAgICAgICBzcGFya2xlLnVzZXJEYXRhID0geyB2ZWxvY2l0eTogc3BhcmtsZVZlbCwgYWdlOiAwIH07XG4gICAgICAgICAgICBzY2VuZS5hZGQoc3BhcmtsZSk7XG4gICAgICAgICAgICBpZiAoIXdpbmRvdy5fc3BhcmtsZXMpIHdpbmRvdy5fc3BhcmtsZXMgPSBbXTtcbiAgICAgICAgICAgIHdpbmRvdy5fc3BhcmtsZXMucHVzaChzcGFya2xlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZnJhZ1ZlbCA9IG9iai52ZWxvY2l0eS5jbG9uZSgpLmFwcGx5QXhpc0FuZ2xlKG5ldyBUSFJFRS5WZWN0b3IzKDAsMSwwKSwgKE1hdGgucmFuZG9tKCktMC41KSowLjMpO1xuICAgICAgICAgIGNvbnN0IGZyYWdTdGFyID0gb2JqLm1lc2guY2xvbmUoKTtcbiAgICAgICAgICBmcmFnU3Rhci5wb3NpdGlvbi5jb3B5KG9iai5tZXNoLnBvc2l0aW9uKTtcbiAgICAgICAgICBmcmFnU3Rhci52ZWxvY2l0eSA9IGZyYWdWZWw7XG4gICAgICAgICAgZnJhZ1N0YXIubm9ybWFsaXplZExpZmUgPSBub3JtYWxpemVkTGlmZTtcbiAgICAgICAgICBmcmFnU3Rhci5ub3JtYWxpemVkTGlmZXRpbWUgPSBvYmoubm9ybWFsaXplZExpZmV0aW1lICogKDAuNSArIE1hdGgucmFuZG9tKCkqMC41KTtcbiAgICAgICAgICBmcmFnU3Rhci5hZ2UgPSBvYmouYWdlO1xuICAgICAgICAgIGZyYWdTdGFyLm1hdGVyaWFsID0gb2JqLm1lc2gubWF0ZXJpYWwuY2xvbmUoKTtcbiAgICAgICAgICBjb25zdCBmcmFnVHJhaWxQb2ludHMgPSBvYmoudHJhaWxQb2ludHMuc2xpY2UoKTtcbiAgICAgICAgICBjb25zdCBmcmFnVGFpbEdlbyA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpLnNldEZyb21Qb2ludHMoZnJhZ1RyYWlsUG9pbnRzKTtcbiAgICAgICAgICBmcmFnVGFpbEdlby5zZXRBdHRyaWJ1dGUoJ2NvbG9yJywgb2JqLnRhaWwuZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCdjb2xvcicpLmNsb25lKCkpO1xuICAgICAgICAgIGNvbnN0IGZyYWdUYWlsTWF0ID0gb2JqLnRhaWwubWF0ZXJpYWwuY2xvbmUoKTtcbiAgICAgICAgICBjb25zdCBmcmFnVGFpbCA9IG5ldyBUSFJFRS5MaW5lKGZyYWdUYWlsR2VvLCBmcmFnVGFpbE1hdCk7XG4gICAgICAgICAgZnJhZ1RhaWwucG9zaXRpb24uY29weShmcmFnU3Rhci5wb3NpdGlvbik7XG4gICAgICAgICAgc2NlbmUuYWRkKGZyYWdTdGFyKTtcbiAgICAgICAgICBzY2VuZS5hZGQoZnJhZ1RhaWwpO1xuICAgICAgICAgIHNob290aW5nU3RhcnMucHVzaCh7IG1lc2g6IGZyYWdTdGFyLCB0YWlsOiBmcmFnVGFpbCwgdmVsb2NpdHk6IGZyYWdTdGFyLnZlbG9jaXR5LCBkaXI6IG9iai5kaXIsIGFnZTogZnJhZ1N0YXIuYWdlLCBub3JtYWxpemVkTGlmZXRpbWU6IGZyYWdTdGFyLm5vcm1hbGl6ZWRMaWZldGltZSwgdHJhaWxQb2ludHM6IGZyYWdUcmFpbFBvaW50cywgY29sb3I6IG9iai5jb2xvciwgYnJpZ2h0bmVzczogb2JqLmJyaWdodG5lc3MsIGhhc0ZyYWdtZW50ZWQ6IHRydWUgfSk7XG4gICAgICAgICAgb2JqLmhhc0ZyYWdtZW50ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNwYXJrIGJ1cnN0XG4gICAgICAgIGlmICghb2JqLmhhc1NwYXJrZWQgJiYgbm9ybWFsaXplZExpZmUgPiAwLjk1ICYmIE1hdGgucmFuZG9tKCkgPCAwLjEpIHtcbiAgICAgICAgICBmb3IgKGxldCBzID0gMDsgcyA8IDggKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqOCk7IHMrKykge1xuICAgICAgICAgICAgY29uc3Qgc3BhcmtHZW8gPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoMC41ICsgTWF0aC5yYW5kb20oKSowLjUsIDgsIDgpO1xuICAgICAgICAgICAgY29uc3Qgc3BhcmtNYXQgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogMHhmZmY2YzAsIHRyYW5zcGFyZW50OiB0cnVlLCBvcGFjaXR5OiAxLCBibGVuZGluZzogVEhSRUUuQWRkaXRpdmVCbGVuZGluZyB9KTtcbiAgICAgICAgICAgIGNvbnN0IHNwYXJrID0gbmV3IFRIUkVFLk1lc2goc3BhcmtHZW8sIHNwYXJrTWF0KTtcbiAgICAgICAgICAgIHNwYXJrLnBvc2l0aW9uLmNvcHkob2JqLm1lc2gucG9zaXRpb24pO1xuICAgICAgICAgICAgc3Bhcmsuc3BhcmtWZWwgPSBuZXcgVEhSRUUuVmVjdG9yMyhNYXRoLnJhbmRvbSgpLTAuNSwgTWF0aC5yYW5kb20oKS0wLjUsIE1hdGgucmFuZG9tKCktMC41KS5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhcigwLjUgKyBNYXRoLnJhbmRvbSgpKjEuMik7XG4gICAgICAgICAgICBzcGFyay5zcGFya0xpZmUgPSAxMiArIE1hdGgucmFuZG9tKCkqMTA7XG4gICAgICAgICAgICBzcGFyay5zcGFya0FnZSA9IDA7XG4gICAgICAgICAgICBzY2VuZS5hZGQoc3BhcmspO1xuICAgICAgICAgICAgaWYgKCF3aW5kb3cuX3N0YXJTcGFya3MpIHdpbmRvdy5fc3RhclNwYXJrcyA9IFtdO1xuICAgICAgICAgICAgd2luZG93Ll9zdGFyU3BhcmtzLnB1c2goc3BhcmspO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmouaGFzU3BhcmtlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmxhc2hcbiAgICAgICAgaWYgKCFvYmouaGFzRmxhc2hlZCAmJiBub3JtYWxpemVkTGlmZSA+IDAuOTggJiYgTWF0aC5yYW5kb20oKSA8IDAuMikge1xuICAgICAgICAgIGNvbnN0IGZsYXNoR2VvID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDEsIDE2LCAxNik7XG4gICAgICAgICAgY29uc3QgZmxhc2hNYXQgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogMHhmZmZmZWUsIHRyYW5zcGFyZW50OiB0cnVlLCBvcGFjaXR5OiAwLjgsIGJsZW5kaW5nOiBUSFJFRS5BZGRpdGl2ZUJsZW5kaW5nIH0pO1xuICAgICAgICAgIGNvbnN0IGZsYXNoID0gbmV3IFRIUkVFLk1lc2goZmxhc2hHZW8sIGZsYXNoTWF0KTtcbiAgICAgICAgICBmbGFzaC5wb3NpdGlvbi5jb3B5KG9iai5tZXNoLnBvc2l0aW9uKTtcbiAgICAgICAgICBzY2VuZS5hZGQoZmxhc2gpO1xuICAgICAgICAgIGlmICghd2luZG93Ll9zdGFyRmxhc2hlcykgd2luZG93Ll9zdGFyRmxhc2hlcyA9IFtdO1xuICAgICAgICAgIHdpbmRvdy5fc3RhckZsYXNoZXMucHVzaCh7IG1lc2g6IGZsYXNoLCBhZ2U6IDAgfSk7XG4gICAgICAgICAgb2JqLmhhc0ZsYXNoZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZhZGUgb3V0IGFzIGl0IGdldHMgZmFyIGF3YXlcbiAgICAgICAgY29uc3QgZGlzdCA9IG9iai5tZXNoLnBvc2l0aW9uLmRpc3RhbmNlVG8oY2FtZXJhLnBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgZmFkZVN0YXJ0ID0gc3Rhck1heERpc3RhbmNlICogMC41O1xuICAgICAgICBpZiAoZGlzdCA+IGZhZGVTdGFydCkge1xuICAgICAgICAgIGNvbnN0IGZhZGUgPSAxIC0gKGRpc3QgLSBmYWRlU3RhcnQpIC8gKHN0YXJNYXhEaXN0YW5jZSAtIGZhZGVTdGFydCk7XG4gICAgICAgICAgb2JqLm1lc2gubWF0ZXJpYWwub3BhY2l0eSA9IE1hdGgubWF4KDAsIGZhZGUpO1xuICAgICAgICAgIG9iai5tZXNoLm1hdGVyaWFsLnRyYW5zcGFyZW50ID0gdHJ1ZTtcbiAgICAgICAgICBvYmoudGFpbC5tYXRlcmlhbC5vcGFjaXR5ID0gTWF0aC5tYXgoMCwgZmFkZSAqIDAuOCk7XG4gICAgICAgICAgb2JqLnRhaWwubWF0ZXJpYWwudHJhbnNwYXJlbnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlbW92ZSB3aGVuIG91dCBvZiBib3VuZHMgb3IgZnVsbHkgZmFkZWQgb3IgbGlmZSBlbmRlZFxuICAgICAgICBpZiAobm9ybWFsaXplZExpZmUgPj0gMS4wIHx8IGRpc3QgPiBzdGFyTWF4RGlzdGFuY2UgfHwgb2JqLm1lc2gubWF0ZXJpYWwub3BhY2l0eSA8PSAwLjAxKSB7XG4gICAgICAgICAgc2NlbmUucmVtb3ZlKG9iai5tZXNoKTtcbiAgICAgICAgICBzY2VuZS5yZW1vdmUob2JqLnRhaWwpO1xuICAgICAgICAgIHNob290aW5nU3RhcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBBbmltYXRlIHNwYXJrc1xuICAgICAgaWYgKHdpbmRvdy5fc3RhclNwYXJrcykge1xuICAgICAgICBmb3IgKGxldCBpID0gd2luZG93Ll9zdGFyU3BhcmtzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgY29uc3Qgc3BhcmsgPSB3aW5kb3cuX3N0YXJTcGFya3NbaV07XG4gICAgICAgICAgc3BhcmsucG9zaXRpb24uYWRkKHNwYXJrLnNwYXJrVmVsKTtcbiAgICAgICAgICBzcGFyay5zcGFya0FnZSsrO1xuICAgICAgICAgIHNwYXJrLm1hdGVyaWFsLm9wYWNpdHkgKj0gMC44NTtcbiAgICAgICAgICBpZiAoc3Bhcmsuc3BhcmtBZ2UgPiBzcGFyay5zcGFya0xpZmUpIHtcbiAgICAgICAgICAgIHNjZW5lLnJlbW92ZShzcGFyayk7XG4gICAgICAgICAgICB3aW5kb3cuX3N0YXJTcGFya3Muc3BsaWNlKGksIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQW5pbWF0ZSBmbGFzaGVzXG4gICAgICBpZiAod2luZG93Ll9zdGFyRmxhc2hlcykge1xuICAgICAgICBmb3IgKGxldCBpID0gd2luZG93Ll9zdGFyRmxhc2hlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGNvbnN0IGZsYXNoID0gd2luZG93Ll9zdGFyRmxhc2hlc1tpXTtcbiAgICAgICAgICBmbGFzaC5tZXNoLnNjYWxlLm11bHRpcGx5U2NhbGFyKDEuMTUpO1xuICAgICAgICAgIGZsYXNoLm1lc2gubWF0ZXJpYWwub3BhY2l0eSAqPSAwLjg1O1xuICAgICAgICAgIGZsYXNoLmFnZSsrO1xuICAgICAgICAgIGlmIChmbGFzaC5hZ2UgPiAxMCkge1xuICAgICAgICAgICAgc2NlbmUucmVtb3ZlKGZsYXNoLm1lc2gpO1xuICAgICAgICAgICAgd2luZG93Ll9zdGFyRmxhc2hlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIC0tLSBTdGFyZmllbGQgbG9naWMgLS0tXG4gICAgICBjb25zdCBzcURpc3QgPSBzdGFyTWF4RGlzdGFuY2UgKiBzdGFyTWF4RGlzdGFuY2U7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc2l0aW9ucy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICBjb25zdCBkeCA9IHBvc2l0aW9uc1tpXSAtIHZpcnR1YWxDYW1lcmFQb3MueDtcbiAgICAgICAgY29uc3QgZHkgPSBwb3NpdGlvbnNbaSArIDFdIC0gdmlydHVhbENhbWVyYVBvcy55O1xuICAgICAgICBjb25zdCBkeiA9IHBvc2l0aW9uc1tpICsgMl0gLSB2aXJ0dWFsQ2FtZXJhUG9zLno7XG4gICAgICAgIGlmIChkeCpkeCArIGR5KmR5ICsgZHoqZHogPiBzcURpc3QpIHtcbiAgICAgICAgICAvLyBQbGFjZSBpbiBhIHRoaWNrIHNwaGVyaWNhbCBzaGVsbCBhcm91bmQgdGhlIHZpcnR1YWwgY2FtZXJhLCBuZXZlciB0b28gY2xvc2VcbiAgICAgICAgICBjb25zdCBtaW5SYWRpdXMgPSBzdGFyTWF4RGlzdGFuY2UgKiAwLjg7XG4gICAgICAgICAgY29uc3QgbWF4UmFkaXVzID0gc3Rhck1heERpc3RhbmNlO1xuICAgICAgICAgIGNvbnN0IHIgPSBtaW5SYWRpdXMgKyBNYXRoLnJhbmRvbSgpICogKG1heFJhZGl1cyAtIG1pblJhZGl1cyk7XG4gICAgICAgICAgY29uc3QgdGhldGEgPSBNYXRoLnJhbmRvbSgpICogMiAqIE1hdGguUEk7XG4gICAgICAgICAgY29uc3QgcGhpID0gTWF0aC5hY29zKDIgKiBNYXRoLnJhbmRvbSgpIC0gMSk7XG4gICAgICAgICAgcG9zaXRpb25zW2ldID0gdmlydHVhbENhbWVyYVBvcy54ICsgciAqIE1hdGguc2luKHBoaSkgKiBNYXRoLmNvcyh0aGV0YSk7XG4gICAgICAgICAgcG9zaXRpb25zW2krMV0gPSB2aXJ0dWFsQ2FtZXJhUG9zLnkgKyByICogTWF0aC5zaW4ocGhpKSAqIE1hdGguc2luKHRoZXRhKTtcbiAgICAgICAgICBwb3NpdGlvbnNbaSsyXSA9IHZpcnR1YWxDYW1lcmFQb3MueiArIHIgKiBNYXRoLmNvcyhwaGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTsgLy8gQWxyZWFkeSBzZXQgYWJvdmVcblxuICAgICAgLy8gUm9idXN0IHN0YXJmaWVsZCBjb2xvciB1cGRhdGUgdG8gcHJldmVudCBzdHVjayB3aGl0ZSBkb3RzXG4gICAgICBjb25zdCBjb2xBcnIgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yLmFycmF5O1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgY29uc3QgaWR4ID0gaSAvIDM7XG4gICAgICAgIGNvbnN0IGR4ID0gcG9zaXRpb25zW2ldIC0gdmlydHVhbENhbWVyYVBvcy54O1xuICAgICAgICBjb25zdCBkeSA9IHBvc2l0aW9uc1tpICsgMV0gLSB2aXJ0dWFsQ2FtZXJhUG9zLnk7XG4gICAgICAgIGNvbnN0IGR6ID0gcG9zaXRpb25zW2kgKyAyXSAtIHZpcnR1YWxDYW1lcmFQb3MuejtcbiAgICAgICAgY29uc3QgZGlzdCA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSArIGR6ICogZHopO1xuICAgICAgICBpZiAodGltZXJzW2lkeF0gPiAwKSB7XG4gICAgICAgICAgdGltZXJzW2lkeF0tLTtcbiAgICAgICAgICBpZiAodGltZXJzW2lkeF0gPT09IDApIHtcbiAgICAgICAgICAgIC8vIFRpbWVyIGV4cGlyZWQsIHJlc3RvcmUgY29sb3JcbiAgICAgICAgICAgIHNwYXJrQ29sb3JzW2ldID0gb3JpZ2luYWxDb2xvcnNbaV07XG4gICAgICAgICAgICBzcGFya0NvbG9yc1tpKzFdID0gb3JpZ2luYWxDb2xvcnNbaSsxXTtcbiAgICAgICAgICAgIHNwYXJrQ29sb3JzW2krMl0gPSBvcmlnaW5hbENvbG9yc1tpKzJdO1xuICAgICAgICAgICAgY29sQXJyW2ldID0gb3JpZ2luYWxDb2xvcnNbaV07XG4gICAgICAgICAgICBjb2xBcnJbaSsxXSA9IG9yaWdpbmFsQ29sb3JzW2krMV07XG4gICAgICAgICAgICBjb2xBcnJbaSsyXSA9IG9yaWdpbmFsQ29sb3JzW2krMl07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbEFycltpXSA9IHNwYXJrQ29sb3JzW2ldO1xuICAgICAgICAgICAgY29sQXJyW2krMV0gPSBzcGFya0NvbG9yc1tpKzFdO1xuICAgICAgICAgICAgY29sQXJyW2krMl0gPSBzcGFya0NvbG9yc1tpKzJdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkaXN0ID4gc3Rhck1heERpc3RhbmNlICogMC4zICYmIE1hdGgucmFuZG9tKCkgPCAwLjA1KSB7XG4gICAgICAgICAgdGltZXJzW2lkeF0gPSBzcGFya2xlRHVyYXRpb247XG4gICAgICAgICAgY29uc3QgYyA9IHBhbGV0dGVbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcGFsZXR0ZS5sZW5ndGgpXTtcbiAgICAgICAgICBzcGFya0NvbG9yc1tpXSA9IGNbMF07XG4gICAgICAgICAgc3BhcmtDb2xvcnNbaSsxXSA9IGNbMV07XG4gICAgICAgICAgc3BhcmtDb2xvcnNbaSsyXSA9IGNbMl07XG4gICAgICAgICAgY29sQXJyW2ldID0gc3BhcmtDb2xvcnNbaV07XG4gICAgICAgICAgY29sQXJyW2krMV0gPSBzcGFya0NvbG9yc1tpKzFdO1xuICAgICAgICAgIGNvbEFycltpKzJdID0gc3BhcmtDb2xvcnNbaSsyXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzcGFya0NvbG9yc1tpXSA9IG9yaWdpbmFsQ29sb3JzW2ldO1xuICAgICAgICAgIHNwYXJrQ29sb3JzW2krMV0gPSBvcmlnaW5hbENvbG9yc1tpKzFdO1xuICAgICAgICAgIHNwYXJrQ29sb3JzW2krMl0gPSBvcmlnaW5hbENvbG9yc1tpKzJdO1xuICAgICAgICAgIGNvbEFycltpXSA9IG9yaWdpbmFsQ29sb3JzW2ldO1xuICAgICAgICAgIGNvbEFycltpKzFdID0gb3JpZ2luYWxDb2xvcnNbaSsxXTtcbiAgICAgICAgICBjb2xBcnJbaSsyXSA9IG9yaWdpbmFsQ29sb3JzW2krMl07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMuY29sb3IubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gRGVmZW5zaXZlOiBsb2cgZXJyb3Igd2l0aCBjb250ZXh0XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1N0YXJmaWVsZCBhbmltYXRpb24gZXJyb3I6JywgZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgYW5pbWF0ZSgpOyAvLyBTdGFydCB0aGUgcmVuZGVyIGxvb3BcblxuICAgIGNvbnN0IG9uUmVzaXplID0gKCkgPT4ge1xuICAgICAgY2FtZXJhLmFzcGVjdCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgfTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25SZXNpemUpXG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uU2Nyb2xsKVxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uUmVzaXplKVxuICAgICAgbW91bnQucmVtb3ZlQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudClcbiAgICB9XG4gIH0sIFtdKVxuXG4gIHJldHVybiA8ZGl2IHJlZj17bW91bnRSZWZ9IC8+XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXJmaWVsZFxuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlRWZmZWN0IiwidXNlUmVmIiwiVEhSRUUiLCJTdGFyZmllbGQiLCJtb3VudFJlZiIsImN1cnJlbnQiLCJtb3VudCIsInN0eWxlIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0Iiwid2lkdGgiLCJoZWlnaHQiLCJ6SW5kZXgiLCJzY2VuZSIsIlNjZW5lIiwiY2FtZXJhIiwiUGVyc3BlY3RpdmVDYW1lcmEiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJzZXQiLCJ2aXJ0dWFsQ2FtZXJhUG9zIiwiVmVjdG9yMyIsInJlbmRlcmVyIiwiV2ViR0xSZW5kZXJlciIsImFudGlhbGlhcyIsInNldFBpeGVsUmF0aW8iLCJkZXZpY2VQaXhlbFJhdGlvIiwic2V0U2l6ZSIsInNldENsZWFyQ29sb3IiLCJhcHBlbmRDaGlsZCIsImRvbUVsZW1lbnQiLCJzdGFyQ291bnQiLCJzdGFyTWF4RGlzdGFuY2UiLCJzdGFyU3BlZWQiLCJnZW9tZXRyeSIsIkJ1ZmZlckdlb21ldHJ5IiwicG9zaXRpb25zIiwic3RhcnNQbGFjZWQiLCJNYXRoIiwicmFuZG9tIiwiY2x1c3RlclRoZXRhIiwiUEkiLCJjbHVzdGVyUGhpIiwiYWNvcyIsImNsdXN0ZXJSIiwiY2x1c3RlckNlbnRlciIsInNpbiIsImNvcyIsImNsdXN0ZXJTaXplIiwiZmxvb3IiLCJjIiwib2Zmc2V0VGhldGEiLCJvZmZzZXRQaGkiLCJvZmZzZXRSIiwicHVzaCIsInRoZXRhIiwicGhpIiwiciIsInNldEF0dHJpYnV0ZSIsIkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUiLCJwYWxldHRlIiwiY29sb3JzIiwiaSIsImxlbmd0aCIsIm9yaWdpbmFsQ29sb3JzIiwiYXR0cmlidXRlcyIsImNvbG9yIiwiYXJyYXkiLCJzbGljZSIsInRpbWVycyIsIkZsb2F0MzJBcnJheSIsInNwYXJrQ29sb3JzIiwic3BhcmtsZUR1cmF0aW9uIiwibWF0ZXJpYWwiLCJQb2ludHNNYXRlcmlhbCIsInNpemUiLCJzaXplQXR0ZW51YXRpb24iLCJ2ZXJ0ZXhDb2xvcnMiLCJzdGFycyIsIlBvaW50cyIsImFkZCIsInRhcmdldFkiLCJkYW1waW5nIiwib25TY3JvbGwiLCJwY3QiLCJzY3JvbGxZIiwiZG9jdW1lbnQiLCJib2R5Iiwic2Nyb2xsSGVpZ2h0IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm5lYnVsYVRleHR1cmVzIiwibmVidWxhQ2xvdWRzIiwic3Bhd25OZWJ1bGFDbG91ZCIsInRleHR1cmVVcmwiLCJ0ZXgiLCJUZXh0dXJlTG9hZGVyIiwibG9hZCIsIkNvbG9yIiwic2V0SFNMIiwibWF0IiwiU3ByaXRlTWF0ZXJpYWwiLCJtYXAiLCJ0cmFuc3BhcmVudCIsIm9wYWNpdHkiLCJkZXB0aFdyaXRlIiwiYmxlbmRpbmciLCJBZGRpdGl2ZUJsZW5kaW5nIiwic3ByaXRlIiwiU3ByaXRlIiwiZGlyIiwibm9ybWFsaXplIiwiZGlzdCIsImNvcHkiLCJtdWx0aXBseVNjYWxhciIsInNjYWxlIiwiYWdlIiwiZmFkZUluIiwiZmFkZU91dCIsImxpZmV0aW1lIiwicm90U3BlZWQiLCJ0YWlsTGVuZ3RoIiwic2hvb3RpbmdTdGFycyIsInNob290aW5nU3RhckNvb2xkb3duIiwic3Bhd25TaG9vdGluZ1N0YXIiLCJtaW5EaXN0IiwibWF4RGlzdCIsInNwYXduUG9zIiwiY2xvbmUiLCJ0YW5nZW50Iiwic3ViIiwicHJvamVjdE9uVmVjdG9yIiwidGFuZ2VudGlhbFNwZWVkIiwicmFkaWFsU3BlZWQiLCJ2ZWxvY2l0eSIsInZpYnJhbnRDb2xvcnMiLCJicmlnaHRuZXNzIiwiZ2VvIiwiU3BoZXJlR2VvbWV0cnkiLCJNZXNoUGh5c2ljYWxNYXRlcmlhbCIsImVtaXNzaXZlIiwiZW1pc3NpdmVJbnRlbnNpdHkiLCJtZXRhbG5lc3MiLCJyb3VnaG5lc3MiLCJ0cmFuc21pc3Npb24iLCJjbGVhcmNvYXQiLCJjbGVhcmNvYXRSb3VnaG5lc3MiLCJzdGFyIiwiTWVzaCIsInNwcml0ZU1hcCIsInNwcml0ZU1hdGVyaWFsIiwic3BhcmtDb3VudCIsInNwYXJrR3JvdXAiLCJHcm91cCIsInNwYXJrTWF0IiwiTWVzaEJhc2ljTWF0ZXJpYWwiLCJzcGFya0dlbyIsInNwYXJrIiwiYW5nbGUiLCJuYW1lIiwibm9ybWFsaXplZExpZmUiLCJub3JtYWxpemVkTGlmZXRpbWUiLCJ0cmFpbFNlZ21lbnRzIiwidHJhaWxQb2ludHMiLCJzcGlyYWwiLCJjdXJ2ZSIsInB0IiwidGFpbEdlbyIsInNldEZyb21Qb2ludHMiLCJ0YWlsQ29sb3JzIiwiYWxwaGEiLCJyYWluYm93IiwiZ3JhZENvbG9yIiwidGFpbE1hdCIsIkxpbmVCYXNpY01hdGVyaWFsIiwidGFpbCIsIkxpbmUiLCJtZXNoIiwiaGFzRnJhZ21lbnRlZCIsImFuaW1hdGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjbG91ZCIsInJlbW92ZSIsInNwbGljZSIsIngiLCJ5Iiwicm90YXRpb24iLCJvZmZzZXRIU0wiLCJmb3J3YXJkIiwiZ2V0V29ybGREaXJlY3Rpb24iLCJ6IiwibmVlZHNVcGRhdGUiLCJzaGFrZVN0cmVuZ3RoIiwib2JqIiwiY2hpbGRyZW4iLCJzcGFya3MiLCJmaW5kIiwiY2hpbGQiLCJqIiwidGltZSIsInBlcmZvcm1hbmNlIiwibm93IiwiZ2V0QXR0cmlidXRlIiwiayIsImNvdW50IiwiZ2V0WCIsImciLCJnZXRZIiwiYiIsImdldFoiLCJtYXgiLCJtaW4iLCJoIiwicyIsImwiLCJkIiwicSIsInAiLCJ0ciIsInRnIiwidGIiLCJodWUycmdiIiwidCIsInNldFgiLCJzZXRZIiwic2V0WiIsInNldFciLCJnZXRXIiwidW5zaGlmdCIsInBvcCIsInRhaWxHcm93IiwiYWN0aXZlU2VnbWVudHMiLCJ2aXNpYmxlVHJhaWwiLCJEYXRlIiwic2V0WFlaVyIsImhlYWRDb2xvciIsImxlcnAiLCJmbGlja2VyIiwiZGlzdFRvQ2FtIiwiZG9mQmx1ciIsInNwYXJrbGVHZW8iLCJzcGFya2xlTWF0Iiwic3BhcmtsZSIsInNwYXJrbGVWZWwiLCJ1c2VyRGF0YSIsIl9zcGFya2xlcyIsImZyYWdWZWwiLCJhcHBseUF4aXNBbmdsZSIsImZyYWdTdGFyIiwiZnJhZ1RyYWlsUG9pbnRzIiwiZnJhZ1RhaWxHZW8iLCJmcmFnVGFpbE1hdCIsImZyYWdUYWlsIiwiaGFzU3BhcmtlZCIsInNwYXJrVmVsIiwic3BhcmtMaWZlIiwic3BhcmtBZ2UiLCJfc3RhclNwYXJrcyIsImhhc0ZsYXNoZWQiLCJmbGFzaEdlbyIsImZsYXNoTWF0IiwiZmxhc2giLCJfc3RhckZsYXNoZXMiLCJkaXN0YW5jZVRvIiwiZmFkZVN0YXJ0IiwiZmFkZSIsInNxRGlzdCIsImR4IiwiZHkiLCJkeiIsIm1pblJhZGl1cyIsIm1heFJhZGl1cyIsImNvbEFyciIsImlkeCIsInNxcnQiLCJyZW5kZXIiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJvblJlc2l6ZSIsImFzcGVjdCIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlQ2hpbGQiLCJkaXYiLCJyZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/Starfield.jsx\n"));

/***/ })

});