(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[763],{204:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/projects/two",function(){return t(4126)}])},4126:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return c}});var o=t(5893),i=t(7294),r=t(9008),s=t.n(r),l=t(1163),a=t(9477),u=()=>{let n=(0,i.useRef)(null),e=(0,i.useRef)({x:.5,y:.5});return(0,i.useEffect)(()=>{let t=new a.xsS,o=new a.iKG(-1,1,1,-1,0,1),i=new a.CP7({alpha:!0,antialias:!0});i.setSize(window.innerWidth,window.innerHeight),i.setClearColor(0,0),n.current.appendChild(i.domElement);let r=new a._12(2,2),s=new a.jyz({uniforms:{time:{value:0},resolution:{value:new a.FM8(window.innerWidth,window.innerHeight)},mouse:{value:new a.FM8(.5,.5)}},vertexShader:"\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = vec4(position, 1.0);\n        }\n      ",fragmentShader:"\n        uniform float time;\n        uniform vec2 resolution;\n        uniform vec2 mouse;\n        varying vec2 vUv;\n        \n        // Pseudo-random function\n        float random(vec2 st) {\n          return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n        }\n        \n        // Value noise function\n        float noise(vec2 st) {\n          vec2 i = floor(st);\n          vec2 f = fract(st);\n          \n          // Four corners\n          float a = random(i);\n          float b = random(i + vec2(1.0, 0.0));\n          float c = random(i + vec2(0.0, 1.0));\n          float d = random(i + vec2(1.0, 1.0));\n          \n          // Smooth interpolation\n          vec2 u = smoothstep(0.0, 1.0, f);\n          \n          // Mix\n          return mix(mix(a, b, u.x), mix(c, d, u.x), u.y);\n        }\n        \n        // Fractal Brownian Motion\n        float fbm(vec2 st) {\n          float value = 0.0;\n          float amplitude = 0.5;\n          float frequency = 0.0;\n          \n          // Octaves\n          for (int i = 0; i < 6; i++) {\n            value += amplitude * noise(st);\n            st *= 2.0;\n            amplitude *= 0.5;\n          }\n          \n          return value;\n        }\n        \n        // Distance field\n        float sdCircle(vec2 p, float r) {\n          return length(p) - r;\n        }\n        \n        void main() {\n          // Normalized coordinates\n          vec2 uv = vUv;\n          vec2 aspect = resolution / min(resolution.x, resolution.y);\n          vec2 st = uv * aspect;\n          \n          // Mouse position\n          vec2 m = mouse * aspect;\n          \n          // Time-based animation\n          float t = time * 0.2;\n          \n          // Distortion from mouse\n          float distToMouse = length(st - m);\n          float mouseInfluence = smoothstep(0.4, 0.0, distToMouse);\n          \n          // Flow direction based on mouse\n          vec2 flow = normalize(st - m) * 0.05;\n          \n          // Animate UVs\n          vec2 uvT = st + flow * mouseInfluence;\n          \n          // Create fluid noise patterns\n          float f1 = fbm(uvT * 3.0 + vec2(t * 0.5, t * -0.5));\n          float f2 = fbm(uvT * 2.0 - vec2(t * -0.5, t * 0.5));\n          float f3 = fbm(uvT * 4.0 + vec2(t * -0.2, t * 0.2));\n          \n          // Combine noise patterns for fluid-like effect\n          float fluid = f1 * f2 + f3;\n          \n          // Create color gradient\n          vec3 color1 = vec3(0.1, 0.3, 0.9); // Deep blue\n          vec3 color2 = vec3(0.0, 0.8, 0.8); // Cyan\n          vec3 color3 = vec3(0.9, 0.3, 0.8); // Purple\n          \n          // Create final color\n          vec3 finalColor = mix(\n            mix(color1, color2, fluid),\n            color3,\n            f3 * mouseInfluence\n          );\n          \n          // Add glow around mouse\n          float glow = smoothstep(0.4, 0.0, distToMouse) * 1.5;\n          finalColor += vec3(0.9, 0.7, 1.0) * glow;\n          \n          // Apply vignette\n          float vignette = smoothstep(1.2, 0.5, length(uv * 2.0 - 1.0));\n          finalColor *= vignette;\n          \n          // Output with transparency\n          float alpha = 0.8;\n          gl_FragColor = vec4(finalColor, alpha);\n        }\n      ",transparent:!0,depthTest:!1}),l=new a.Kj0(r,s);t.add(l);let u=0,c=0,f=n=>{e.current.x=n.clientX/window.innerWidth,e.current.y=1-n.clientY/window.innerHeight},d=()=>{let n=window.innerWidth,e=window.innerHeight;i.setSize(n,e),s.uniforms.resolution.value.set(n,e)},v=()=>{c=requestAnimationFrame(v),u+=.01,s.uniforms.time.value=u,s.uniforms.mouse.value.set(e.current.x,e.current.y),i.render(t,o)};return v(),window.addEventListener("mousemove",f),window.addEventListener("resize",d),()=>{window.removeEventListener("mousemove",f),window.removeEventListener("resize",d),cancelAnimationFrame(c),n.current&&n.current.removeChild(i.domElement),t.remove(l),r.dispose(),s.dispose(),i.dispose()}},[]),(0,o.jsx)("div",{ref:n,style:{position:"fixed",top:0,left:0,width:"100%",height:"100%",zIndex:-1}})};function c(){let n=(0,l.useRouter)();return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(s(),{children:[(0,o.jsx)("title",{children:"Portfolio Redesign - KayosDev"}),(0,o.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1"})]}),(0,o.jsx)("div",{onClick:()=>{n.push("/")},style:{position:"fixed",top:0,left:0,width:"100%",height:"100%",cursor:"pointer",zIndex:10}}),(0,o.jsx)(u,{})]})}},9008:function(n,e,t){n.exports=t(3867)},1163:function(n,e,t){n.exports=t(3079)}},function(n){n.O(0,[737,888,774,179],function(){return n(n.s=204)}),_N_E=n.O()}]);